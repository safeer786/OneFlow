#!groovy
node 
{
   
    // AWS 
    def awsRegion="eu-central-1"
    def rolestacks=[]
    def policystacks=[]
    def userstacks=[]
	// Print identity the AWS commands are running with
    awsIdentity()
    def awsEnvironments =[]
    if (accounts.contains(','))
    {
    	awsEnvironments = accounts.split(',')	
    }
    else
    {
    	awsEnvironments[0] = accounts
    }
    if (roles.contains(','))
    {
        rolestacks = roles.split(',')    
    }
    else
    {
        rolestacks[0] = roles
    }
    if (users.contains(','))
    {
        userstacks = users.split(',')    
    }
    else
    {
        userstacks[0] = users
    }
    if (policies.contains(','))
    {
        policystacks = policies.split(',')    
    }
    else
    {
        policystacks[0] = policies
    }
    for(String account: awsEnvironments)
    {
        def awsUser='AWS-'+ account.toUpperCase()
        print awsUser
        try {
            stage('Delete RoleStack' + account) 
            {
                withAWS(region:awsRegion, credentials:awsUser) 
                {
                    print 'i am here'
                    if(rolestacks[0] != '')
                    {
                        for(String role : rolestacks)
                    {
                        print 'Deleting'+role
                        def stackName='AZD-CO-IAM-ROLE-'+role.toUpperCase()+'-' + account.toUpperCase()
                        
                        print stackName
                        cfnDelete(stack:stackName, pollInterval:3000)   
                    }
                    }
                }           
            }
           
         stage('DELETE USER' + account)
         {
                withAWS(region:awsRegion, credentials:awsUser) 
                {
                    print 'i am here'
                    print account
                    if(userstacks[0] != '')
                    {
                        for(String user : userstacks)
                    {
                        
                        print 'zaaaaa'
                        def stackName='AZD-CO-IAM-USER-'+user.toUpperCase()+'-' + account.toUpperCase()
                        
                        print stackName
                        cfnDelete(stack:stackName, pollInterval:3000)   
                    }
                    }
                }           
            }
             stage('Delete PolicyStacks' + account) 
            {
                withAWS(region:awsRegion, credentials:awsUser) 
                {
                    print 'i am here'
                    print account
                    if(policystacks[0] != '')
                    {
                        for(String policy : policystacks)
                    {
                        print policy
                        print 'zaaaaa'
                        if( policy == 'CloudForms')
                        {
                        def stackName='AZD-CO-IAM-POLICY-'+policy.toUpperCase()+'-' + account.toUpperCase()
                        print 'i am here'
                        print stackName
                        cfnDelete(stack:stackName, pollInterval:3000)    
                        }
                        else
                        {
                        def stackName='AZD-CO-IAM-POLICY-'+policy.toUpperCase()+'-' + account.toUpperCase()
                        print 'i am here'
                        print stackName
                        cfnDelete(stack:stackName, pollInterval:3000)
                        }
                    }
                    }
                }           
            }
        }
        catch(e) {
            print 'Error in the whole block'
        }
        
        
    }
}