Policy Name: ADPMaintenance
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:*", 
                "cloudformation:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListStackResources", 
                "cloudformation:UpdateStack", 
                "cloudwatch:*", 
                "cloudwatch:Describe*", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "ec2:AssociateAddress", 
                "ec2:AssociateSubnetCidrBlock", 
                "ec2:Attach*", 
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CopyImage", 
                "ec2:CreateFpgaImage", 
                "ec2:CreateImage", 
                "ec2:CreateKeyPair", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSecurityGroupEgress", 
                "ec2:CreateSecurityGroupIngress", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:CreateInternetGateway", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteKeyPair", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteVolume", 
                "ec2:DeregisterImage", 
                "ec2:Describe*", 
                "ec2:DescribeKeyPairs", 
                "ec2:Detach*", 
                "ec2:DetachVolume", 
                "ec2:DetachInternetGateway", 
                "ec2:DisassociateSubnetCidrBlock", 
                "ec2:Get*", 
                "ec2:ImportKeyPair", 
                "ec2:InstanceType", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:ModifyVolume", 
                "ec2:ModifyVolumeAttribute", 
                "ec2:RebootInstances", 
                "ec2:RegisterImage", 
                "ec2:ReplaceNetworkAclAssociation", 
                "ec2:ReplaceNetworkAclEntry", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:UpdateSecurityGroupRuleDescriptionsEgress", 
                "ec2:UpdateSecurityGroupRuleDescriptionsIngress", 
                "elasticfilesystem:ModifyMountTargetSecurityGroups", 
                "elasticloadbalancing:ConfigureHealthCheck", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:ModifyLoadBalancerAttributes", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:SetLoadBalancerPoliciesOfListener", 
                "events:DeleteRule", 
                "events:DescribeRule", 
                "events:DescribeRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "iam:AddRoleToInstanceProfile", 
                "iam:AttachRolePolicy", 
                "iam:AttachUserPolicy", 
                "iam:CreateAccessKey", 
                "iam:CreateInstanceProfile", 
                "iam:CreateRole", 
                "iam:CreateUser", 
                "iam:DeleteAccessKey", 
                "iam:DeleteInstanceProfile", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DeleteUser", 
                "iam:DeleteUserPolicy", 
                "iam:DetachRolePolicy", 
                "iam:GetInstanceProfile", 
                "iam:GetRole", 
                "iam:GetSSHPublicKey", 
                "iam:GetUser", 
                "iam:ListAccessKeys", 
                "iam:ListRolePolicies", 
                "iam:ListRoles", 
                "iam:ListSSHPublicKeys ", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:PutUserPolicy", 
                "iam:RemoveRoleFromInstanceProfile", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey ", 
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:DeleteKey", 
                "kms:Decrypt", 
                "kms:Encrypt", 
                "kms:Get*", 
                "kms:ListAliases", 
                "kms:ListKeys", 
                "kms:Enable*", 
                "kms:Put*", 
                "kms:ScheduleKeyDeletion", 
                "kms:TagResource", 
                "lambda:*", 
                "lambda:AddPermission", 
                "lambda:CreateFunction", 
                "lambda:GetAccountSettings", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListAliases", 
                "lambda:ListFunctions", 
                "lambda:ListTags", 
                "lambda:TagResource", 
                "lambda:UntagResource", 
                "lambda:UpdateFunctionCode", 
                "lambda:UpdateFunctionConfiguration", 
                "logs:Describe*", 
                "logs:FilterLogEvents", 
                "logs:GetLogEvents", 
                "logs:TestMetricFilter", 
                "rds:*", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateRecordSet", 
                "route53:DeleteRecordSet", 
                "route53:GetChange", 
                "route53:GetHostedZone", 
                "route53:ListHostedZones", 
                "route53:ListResourceRecordSets", 
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteObject", 
                "s3:DeleteObjectVersion", 
                "s3:GetBucketAcl", 
                "s3:GetBucketLocation", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:GetObjectAcl", 
                "s3:GetObjectVersion", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:ListBucketVersions", 
                "s3:PutBucketAcl", 
                "s3:PutBucketPolicy", 
                "s3:PutObject", 
                "s3:PutObjectAcl", 
                "sns:ListTopics", 
                "sns:GetTopicAttributes", 
                "sns:ConfirmSubscription", 
                "sns:CreateTopic", 
                "sns:Publish*", 
                "sns:SetTopicAttributes", 
                "sns:Subscribe", 
                "sts:DecodeAuthorizationMessage", 
                "sts:DecodeAuthorizationMessage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: Artifactory-Bucket-policy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::artifactory4-artifactorybucket-194o0m0b7mjrk"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:GetObject", 
                "s3:DeleteObject"
            ], 
            "Resource": [
                "arn:aws:s3:::artifactory4-artifactorybucket-194o0m0b7mjrk/*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AssumeRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "sts:AssumeRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "VisualEditor0"
        }
    ]
}
Policy Name: AWSCloudFormationFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: bosh-policy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AssociateAddress", 
                "ec2:AttachVolume", 
                "ec2:CreateVolume", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteVolume", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeRegions", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:TerminateInstances", 
                "ec2:RegisterImage", 
                "ec2:DeregisterImage", 
                "ec2:ResetInstanceAttribute"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:List*", 
                "iam:Get*", 
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kms:CreateKey", 
                "kms:TagResource", 
                "kms:ListAliases", 
                "kms:CreateAlias", 
                "kms:Encrypt", 
                "kms:Decrypt", 
                "kms:DescribeKey", 
                "kms:GetKeyPolicy", 
                "kms:ListKeyPolicies", 
                "kms:ReEncryptFrom", 
                "kms:ReEncryptTo"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: cc-adp-terraform-policy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:*", 
                "s3:*", 
                "kms:*", 
                "ec2:*", 
                "elasticloadbalancing:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "VisualEditor0"
        }, 
        {
            "Action": "route53:*", 
            "Resource": [
                "arn:aws:route53:::hostedzone/ZW2FPUM1E30CZ", 
                "arn:aws:route53:::change/ZW2FPUM1E30CZ", 
                "arn:aws:route53:::change/C12AI23HGPOMYL", 
                "arn:aws:route53:::change/C1WCLVJIGG31JR", 
                "arn:aws:route53:::change/C3SYYIA8DVHIUM", 
                "arn:aws:route53:::change/*"
            ], 
            "Effect": "Allow", 
            "Sid": "VisualEditor1"
        }
    ]
}
Policy Name: cc-adpsecrets-s3-repo
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:AbortMultipartUpload", 
                "s3:DeleteObject", 
                "s3:DeleteObjectVersion", 
                "s3:GetAccelerateConfiguration", 
                "s3:GetBucketAcl", 
                "s3:GetBucketCORS", 
                "s3:GetBucketLocation", 
                "s3:GetBucketLogging", 
                "s3:GetBucketNotification", 
                "s3:GetBucketPolicy", 
                "s3:GetBucketRequestPayment", 
                "s3:GetBucketTagging", 
                "s3:GetBucketVersioning", 
                "s3:GetBucketWebsite", 
                "s3:GetLifecycleConfiguration", 
                "s3:GetObject", 
                "s3:GetObjectAcl", 
                "s3:GetObjectTagging", 
                "s3:GetObjectTorrent", 
                "s3:GetObjectVersion", 
                "s3:GetObjectVersionAcl", 
                "s3:GetObjectVersionTagging", 
                "s3:GetObjectVersionTorrent", 
                "s3:GetReplicationConfiguration", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:ListObjects", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListBucketVersions", 
                "s3:ListMultipartUploadParts", 
                "s3:PutObject", 
                "s3:ReplicateObject"
            ], 
            "Resource": [
                "arn:aws:s3:::adp-credentials"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1501105796000"
        }
    ]
}
Policy Name: cc-artifactory-s3-repo
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::artifactory-303747409146"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:GetObject", 
                "s3:DeleteObject"
            ], 
            "Resource": [
                "arn:aws:s3:::artifactory-303747409146/*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ccdt_iam_nodepolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:*"
            ], 
            "Resource": "arn:aws:logs:*:*:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "ec2:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateSnapshot", 
                "ec2:DeleteSnapshot", 
                "ec2:CreateTags", 
                "ec2:ModifySnapshotAttribute", 
                "ec2:ResetSnapshotAttribute"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudFormsPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:ListCertificates", 
                "athena:List*", 
                "aws-marketplace:ViewSubscriptions", 
                "autoscaling:Describe*", 
                "batch:ListJobs", 
                "clouddirectory:ListAppliedSchemaArns", 
                "clouddirectory:ListDevelopmentSchemaArns", 
                "clouddirectory:ListDirectories", 
                "clouddirectory:ListPublishedSchemaArns", 
                "cloudformation:List*", 
                "cloudformation:DescribeStacks", 
                "cloudfront:List*", 
                "cloudhsm:ListAvailableZones", 
                "cloudhsm:ListLunaClients", 
                "cloudhsm:ListHapgs", 
                "cloudhsm:ListHsms", 
                "cloudsearch:List*", 
                "cloudsearch:DescribeDomains", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:LookupEvents", 
                "cloudwatch:List*", 
                "cloudformation:GetTemplate", 
                "cloudwatch:GetMetricData", 
                "codebuild:ListBuilds*", 
                "codebuild:ListProjects", 
                "codecommit:List*", 
                "codedeploy:List*", 
                "codedeploy:Get*", 
                "codepipeline:ListPipelines", 
                "codestar:List*", 
                "codestar:Verify*", 
                "cognito-idp:List*", 
                "cognito-identity:ListIdentities", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:ListDatasets", 
                "connect:List*", 
                "config:List*", 
                "config:Describe*", 
                "datapipeline:ListPipelines", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetAccountLimits", 
                "devicefarm:List*", 
                "directconnect:Describe*", 
                "discovery:List*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListTables", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeBundleTasks", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeHost*", 
                "ec2:DescribeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeImage*", 
                "ec2:DescribeImport*", 
                "ec2:DescribeInstance*", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetwork*", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeReserved*", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshot*", 
                "ec2:DescribeSpot*", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolume*", 
                "ec2:DescribeVpc*", 
                "ec2:DescribeVpnGateways", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:DescribeApplicationVersions", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticbeanstalk:ListAvailableSolutionStacks", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "es:DescribeElasticsearchDomain", 
                "es:DescribeElasticsearchDomains", 
                "es:ListDomainNames", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "firehose:List*", 
                "firehose:DescribeDeliveryStream", 
                "gamelift:List*", 
                "glacier:List*", 
                "iam:List*", 
                "iam:GetAccountSummary", 
                "iam:GetLoginProfile", 
                "importexport:ListJobs", 
                "inspector:List*", 
                "iot:List*", 
                "kinesis:ListStreams", 
                "kinesisanalytics:ListApplications", 
                "kms:ListKeys", 
                "lambda:List*", 
                "lex:GetBotAliases", 
                "lex:GetBotChannelAssociations", 
                "lex:GetBots", 
                "lex:GetBotVersions", 
                "lex:GetIntents", 
                "lex:GetIntentVersions", 
                "lex:GetSlotTypes", 
                "lex:GetSlotTypeVersions", 
                "lex:GetUtterancesView", 
                "lightsail:GetBlueprints", 
                "lightsail:GetBundles", 
                "lightsail:GetInstances", 
                "lightsail:GetInstanceSnapshots", 
                "lightsail:GetKeyPair", 
                "lightsail:GetRegions", 
                "lightsail:GetStaticIps", 
                "lightsail:IsVpcPeered", 
                "logs:Describe*", 
                "machinelearning:Describe*", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "opsworks:Describe*", 
                "opsworks-cm:Describe*", 
                "organizations:List*", 
                "mobiletargeting:GetApplicationSettings", 
                "mobiletargeting:GetCampaigns", 
                "mobiletargeting:GetImportJobs", 
                "mobiletargeting:GetSegments", 
                "polly:Describe*", 
                "polly:List*", 
                "rds:Describe*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeEvents", 
                "redshift:ViewQueriesInConsole", 
                "route53:List*", 
                "route53:Get*", 
                "route53domains:List*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "sdb:List*", 
                "servicecatalog:List*", 
                "ses:List*", 
                "shield:List*", 
                "states:ListActivities", 
                "states:ListStateMachines", 
                "sns:List*", 
                "sqs:ListQueues", 
                "ssm:ListAssociations", 
                "ssm:ListDocuments", 
                "storagegateway:ListGateways", 
                "storagegateway:ListLocalDisks", 
                "storagegateway:ListVolumeRecoveryPoints", 
                "storagegateway:ListVolumes", 
                "swf:List*", 
                "trustedadvisor:Describe*", 
                "waf:List*", 
                "waf-regional:List*", 
                "workdocs:DescribeAvailableDirectories", 
                "workdocs:DescribeInstances", 
                "workmail:Describe*", 
                "workspaces:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CRPMaintenance
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListStackResources", 
                "cloudformation:UpdateStack", 
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSecurityGroupEgress", 
                "ec2:CreateSecurityGroupIngress", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteVolume", 
                "ec2:Describe*", 
                "ec2:DetachVolume", 
                "ec2:ModifyVolumeAttribute", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "elasticloadbalancing:ConfigureHealthCheck", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:ModifyLoadBalancerAttributes", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:SetLoadBalancerPoliciesOfListener", 
                "iam:AddRoleToInstanceProfile", 
                "iam:CreateAccessKey", 
                "iam:CreateInstanceProfile", 
                "iam:CreateRole", 
                "iam:CreateUser", 
                "iam:DeleteAccessKey", 
                "iam:DeleteInstanceProfile", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DeleteUser", 
                "iam:DeleteUserPolicy", 
                "iam:GetRole", 
                "iam:GetUser", 
                "iam:ListAccessKeys", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:PutUserPolicy", 
                "iam:RemoveRoleFromInstanceProfile", 
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:DeleteAlias", 
                "kms:DeleteKey", 
                "kms:ListAliases", 
                "kms:ListKeys", 
                "kms:ScheduleKeyDeletion", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateRecordSet", 
                "route53:DeleteRecordSet", 
                "route53:GetChange", 
                "route53:ListHostedZones", 
                "route53:ListResourceRecordSets", 
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "sts:DecodeAuthorizationMessage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DynatraceBastionHostPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:GetRole", 
                "iam:PassRole", 
                "iam:PutUserPolicy", 
                "iam:CreateRole", 
                "iam:PutRolePolicy", 
                "iam:GetUser", 
                "iam:AttachRolePolicy", 
                "iam:AddRoleToInstanceProfile", 
                "apigateway:GET", 
                "iam:CreateUser", 
                "ec2:*", 
                "iam:createInstanceProfile", 
                "cloudformation:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "VisualEditor0"
        }
    ]
}
Policy Name: IAMCfnAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:List*", 
                "iam:Get*", 
                "iam:CreateAccessKey", 
                "iam:CreateRole", 
                "iam:DeleteAccessKey", 
                "iam:PassRole", 
                "iam:AttachRolePolicy", 
                "iam:CreatePolicy", 
                "iam:CreatePolicyVersion", 
                "iam:PutRolePolicy", 
                "iam:UpdateAssumeRolePolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: JiraAdmins
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: JiraUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: NetworkServicePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:List*", 
                "dynamodb:Get*", 
                "dynamodb:Describe*", 
                "s3:List*", 
                "s3:Get*", 
                "s3:Describe*", 
                "ec2:AllocateAddress", 
                "ec2:AssociateAddress", 
                "ec2:DescribeAddresses", 
                "ec2:DisassociateAddress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: PO_SupportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "support:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: PrometheusBackupPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:Get*", 
                "s3:List*", 
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteObject", 
                "s3:PutObject", 
                "s3:PutObjectTagging", 
                "s3:*", 
                "cloudwatch:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: proxy-db
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:GetItem"
            ], 
            "Resource": [
                "arn:aws:dynamodb:eu-central-1:303747409146:table/proxy"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1490550873000"
        }
    ]
}
Policy Name: SAMLBastionHostRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sts:GetSessionToken", 
                "sts:AssumeRole", 
                "sts:GetFederationToken", 
                "sts:AssumeRoleWithSAML", 
                "sts:GetCallerIdentity"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "VisualEditor0"
        }
    ]
}
Policy Name: SatelliteCustomEC2EBSFullAccess-201707111519
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "ec2:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "route53:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "cloudwatch:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ViewOnlyPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "connect:List*", 
                "config:List*", 
                "config:Describe*", 
                "cloudwatch:List*", 
                "cloudwatch:Get*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListTables", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeBundleTasks", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeHost*", 
                "ec2:DescribeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeImage*", 
                "ec2:DescribeImport*", 
                "ec2:DescribeInstance*", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetwork*", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeReserved*", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshot*", 
                "ec2:DescribeSpot*", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolume*", 
                "ec2:DescribeVpc*", 
                "ec2:DescribeVpnGateways", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:DescribeApplicationVersions", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticbeanstalk:ListAvailableSolutionStacks", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "iam:List*", 
                "iam:GetAccountSummary", 
                "iam:GetLoginProfile", 
                "importexport:ListJobs", 
                "inspector:List*", 
                "kms:ListKeys", 
                "lambda:List*", 
                "logs:Get*", 
                "logs:Filter*", 
                "logs:List*", 
                "logs:Describe*", 
                "organizations:List*", 
                "rds:Describe*", 
                "route53:List*", 
                "route53:Get*", 
                "route53domains:List*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:Get*", 
                "sdb:List*", 
                "servicecatalog:List*", 
                "ses:List*", 
                "sns:List*", 
                "sqs:ListQueues", 
                "ssm:ListAssociations", 
                "ssm:ListDocuments", 
                "swf:List*", 
                "trustedadvisor:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDirectConnectReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "directconnect:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGlacierReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glacier:DescribeJob", 
                "glacier:DescribeVault", 
                "glacier:GetDataRetrievalPolicy", 
                "glacier:GetJobOutput", 
                "glacier:GetVaultAccessPolicy", 
                "glacier:GetVaultLock", 
                "glacier:GetVaultNotifications", 
                "glacier:ListJobs", 
                "glacier:ListMultipartUploads", 
                "glacier:ListParts", 
                "glacier:ListTagsForVault", 
                "glacier:ListVaults"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackResource", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:List*", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcs", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingConsoleReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:ListMetrics", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:ListSubscriptions", 
                "sns:ListTopics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDMSRedshiftS3Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:ListBucket", 
                "s3:DeleteBucket", 
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject", 
                "s3:GetObjectVersion", 
                "s3:GetBucketPolicy", 
                "s3:PutBucketPolicy", 
                "s3:DeleteBucketPolicy"
            ], 
            "Resource": "arn:aws:s3:::dms-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSQuickSightListIAM
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSHealthFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "health:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessGatewayExecution
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:Send*", 
                "a4b:Get*"
            ], 
            "Resource": "arn:aws:a4b:*:*:gateway/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sqs:ReceiveMessage", 
                "sqs:DeleteMessage"
            ], 
            "Resource": [
                "arn:aws:sqs:*:*:dd-*", 
                "arn:aws:sqs:*:*:sd-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "a4b:List*", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogGroups", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRDSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:*", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DeleteAlarms", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "sns:ListSubscriptions", 
                "sns:ListTopics", 
                "sns:Publish", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "pi:*", 
            "Resource": "arn:aws:pi:*:*:metrics/rds/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "rds.amazonaws.com", 
                        "rds.application-autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: SupportUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "support:*", 
                "acm:DescribeCertificate", 
                "acm:GetCertificate", 
                "acm:List*", 
                "apigateway:GET", 
                "appstream:Get*", 
                "autoscaling:Describe*", 
                "aws-marketplace:ViewSubscriptions", 
                "cloudformation:Describe*", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:EstimateTemplateCost", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "cloudsearch:Describe*", 
                "cloudsearch:List*", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:LookupEvents", 
                "cloudtrail:ListTags", 
                "cloudtrail:ListPublicKeys", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "codecommit:BatchGetRepositories", 
                "codecommit:Get*", 
                "codecommit:List*", 
                "codedeploy:Batch*", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codepipeline:AcknowledgeJob", 
                "codepipeline:AcknowledgeThirdPartyJob", 
                "codepipeline:ListActionTypes", 
                "codepipeline:ListPipelines", 
                "codepipeline:PollForJobs", 
                "codepipeline:PollForThirdPartyJobs", 
                "codepipeline:GetPipelineState", 
                "codepipeline:GetPipeline", 
                "cognito-identity:List*", 
                "cognito-identity:LookupDeveloperIdentity", 
                "cognito-identity:Describe*", 
                "cognito-idp:Describe*", 
                "cognito-sync:Describe*", 
                "cognito-sync:GetBulkPublishDetails", 
                "cognito-sync:GetCognitoEvents", 
                "cognito-sync:GetIdentityPoolConfiguration", 
                "cognito-sync:List*", 
                "config:DescribeConfigurationRecorders", 
                "config:DescribeConfigurationRecorderStatus", 
                "config:DescribeConfigRuleEvaluationStatus", 
                "config:DescribeConfigRules", 
                "config:DescribeDeliveryChannels", 
                "config:DescribeDeliveryChannelStatus", 
                "config:GetResourceConfigHistory", 
                "config:ListDiscoveredResources", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:QueryObjects", 
                "datapipeline:ReportTaskProgress", 
                "datapipeline:ReportTaskRunnerHeartbeat", 
                "devicefarm:List*", 
                "devicefarm:Get*", 
                "directconnect:Describe*", 
                "discovery:Describe*", 
                "discovery:ListConfigurations", 
                "dms:Describe*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "ds:DescribeSnapshots", 
                "ds:GetDirectoryLimits", 
                "ds:GetSnapshotLimits", 
                "ds:ListAuthorizedApplications", 
                "dynamodb:DescribeLimits", 
                "dynamodb:DescribeTable", 
                "dynamodb:ListTables", 
                "ec2:Describe*", 
                "ec2:DescribeHosts", 
                "ec2:describeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeReservedInstancesModifications", 
                "ec2:DescribeTags", 
                "ec2:GetFlowLogsCount", 
                "ecr:GetRepositoryPolicy", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:Describe*", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticache:List*", 
                "elasticbeanstalk:Check*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:RequestEnvironmentInfo", 
                "elasticbeanstalk:RetrieveEnvironmentInfo", 
                "elasticbeanstalk:ValidateConfigurationSettings", 
                "elasticfilesystem:Describe*", 
                "elasticloadbalancing:Describe*", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "elastictranscoder:ReadJob", 
                "elasticfilesystem:DescribeFileSystems", 
                "es:Describe*", 
                "es:List*", 
                "es:ESHttpGet", 
                "es:ESHttpHead", 
                "events:DescribeRule", 
                "events:List*", 
                "events:TestEventPattern", 
                "firehose:Describe*", 
                "firehose:List*", 
                "gamelift:List*", 
                "gamelift:Describe*", 
                "glacier:ListVaults", 
                "glacier:DescribeVault", 
                "glacier:DescribeJob", 
                "glacier:Get*", 
                "glacier:List*", 
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:Get*", 
                "iam:List*", 
                "importexport:GetStatus", 
                "importexport:ListJobs", 
                "importexport:GetJobDetail", 
                "inspector:Describe*", 
                "inspector:List*", 
                "inspector:GetAssessmentTelemetry", 
                "inspector:LocalizeText", 
                "iot:Describe*", 
                "iot:Get*", 
                "iot:List*", 
                "kinesisanalytics:DescribeApplication", 
                "kinesisanalytics:DiscoverInputSchema", 
                "kinesisanalytics:GetApplicationState", 
                "kinesisanalytics:ListApplications", 
                "kinesis:Describe*", 
                "kinesis:Get*", 
                "kinesis:List*", 
                "kms:Describe*", 
                "kms:Get*", 
                "kms:List*", 
                "lambda:List*", 
                "lambda:Get*", 
                "logs:Describe*", 
                "logs:TestMetricFilter", 
                "machinelearning:Describe*", 
                "machinelearning:Get*", 
                "mobilehub:GetProject", 
                "mobilehub:List*", 
                "mobilehub:ValidateProject", 
                "mobilehub:VerifyServiceRole", 
                "opsworks:Describe*", 
                "rds:Describe*", 
                "rds:ListTagsForResource", 
                "redshift:Describe*", 
                "route53:Get*", 
                "route53:List*", 
                "route53domains:CheckDomainAvailability", 
                "route53domains:GetDomainDetail", 
                "route53domains:GetOperationDetail", 
                "route53domains:List*", 
                "s3:List*", 
                "sdb:GetAttributes", 
                "sdb:List*", 
                "sdb:Select*", 
                "servicecatalog:SearchProducts", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ScanProvisionedProducts", 
                "ses:Get*", 
                "ses:List*", 
                "sns:Get*", 
                "sns:List*", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "sqs:ListQueues", 
                "sqs:ReceiveMessage", 
                "ssm:List*", 
                "ssm:Describe*", 
                "storagegateway:Describe*", 
                "storagegateway:List*", 
                "swf:Count*", 
                "swf:Describe*", 
                "swf:Get*", 
                "swf:List*", 
                "waf:Get*", 
                "waf:List*", 
                "workspaces:Describe*", 
                "workdocs:Describe*", 
                "workmail:Describe*", 
                "workmail:Get*", 
                "workspaces:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "ec2:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "cloudwatch:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": [
                        "autoscaling.amazonaws.com", 
                        "ec2scheduled.amazonaws.com", 
                        "elasticloadbalancing.amazonaws.com", 
                        "spot.amazonaws.com", 
                        "spotfleet.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: SecretsManagerReadWrite
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "secretsmanager:*", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:DescribeChangeSet", 
                "cloudformation:DescribeStackResource", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ExecuteChangeSet", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "kms:DescribeKey", 
                "kms:ListAliases", 
                "kms:ListKeys", 
                "lambda:ListFunctions", 
                "rds:DescribeDBInstances", 
                "tag:GetResources"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:AddPermission", 
                "lambda:CreateFunction", 
                "lambda:GetFunction", 
                "lambda:InvokeFunction", 
                "lambda:UpdateFunctionConfiguration"
            ], 
            "Resource": "arn:aws:lambda:*:*:function:SecretsManager*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "serverlessrepo:CreateCloudFormationChangeSet"
            ], 
            "Resource": "arn:aws:serverlessrepo:*:*:applications/SecretsManager*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::awsserverlessrepo-changesets*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTThingsRegistration
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:AddThingToThingGroup", 
                "iot:AttachPrincipalPolicy", 
                "iot:AttachThingPrincipal", 
                "iot:CreateCertificateFromCsr", 
                "iot:CreatePolicy", 
                "iot:CreateThing", 
                "iot:DescribeCertificate", 
                "iot:DescribeThing", 
                "iot:DescribeThingGroup", 
                "iot:DescribeThingType", 
                "iot:DetachThingPrincipal", 
                "iot:GetPolicy", 
                "iot:ListPolicyPrincipals", 
                "iot:ListPrincipalPolicies", 
                "iot:ListPrincipalThings", 
                "iot:ListThingGroupsForThing", 
                "iot:ListThingPrincipals", 
                "iot:RegisterCertificate", 
                "iot:RegisterThing", 
                "iot:RemoveThingFromThingGroup", 
                "iot:UpdateCertificate", 
                "iot:UpdateThing", 
                "iot:UpdateThingGroupsForThing"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticbeanstalk:Check*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:RequestEnvironmentInfo", 
                "elasticbeanstalk:RetrieveEnvironmentInfo", 
                "ec2:Describe*", 
                "elasticloadbalancing:Describe*", 
                "autoscaling:Describe*", 
                "cloudwatch:Describe*", 
                "cloudwatch:List*", 
                "cloudwatch:Get*", 
                "s3:Get*", 
                "s3:List*", 
                "sns:Get*", 
                "sns:List*", 
                "cloudformation:Describe*", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:Validate*", 
                "cloudformation:Estimate*", 
                "rds:Describe*", 
                "sqs:Get*", 
                "sqs:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElementalMediaStoreReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mediastore:Get*", 
                "mediastore:List*", 
                "mediastore:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "Bool": {
                    "aws:SecureTransport": "true"
                }
            }
        }
    ]
}
Policy Name: AWSCertificateManagerReadOnly
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "acm:DescribeCertificate", 
            "acm:ListCertificates", 
            "acm:GetCertificate", 
            "acm:ListTagsForCertificate"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AWSQuicksightAthenaAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "athena:BatchGetQueryExecution", 
                "athena:CancelQueryExecution", 
                "athena:GetCatalogs", 
                "athena:GetExecutionEngine", 
                "athena:GetExecutionEngines", 
                "athena:GetNamespace", 
                "athena:GetNamespaces", 
                "athena:GetQueryExecution", 
                "athena:GetQueryExecutions", 
                "athena:GetQueryResults", 
                "athena:GetTable", 
                "athena:GetTables", 
                "athena:ListQueryExecutions", 
                "athena:RunQuery", 
                "athena:StartQueryExecution", 
                "athena:StopQueryExecution"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "glue:CreateDatabase", 
                "glue:DeleteDatabase", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:UpdateDatabase", 
                "glue:CreateTable", 
                "glue:DeleteTable", 
                "glue:BatchDeleteTable", 
                "glue:UpdateTable", 
                "glue:GetTable", 
                "glue:GetTables", 
                "glue:BatchCreatePartition", 
                "glue:CreatePartition", 
                "glue:DeletePartition", 
                "glue:BatchDeletePartition", 
                "glue:UpdatePartition", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:BatchGetPartition"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts", 
                "s3:AbortMultipartUpload", 
                "s3:CreateBucket", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-athena-query-results-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeCommitPowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codecommit:BatchGet*", 
                "codecommit:Get*", 
                "codecommit:List*", 
                "codecommit:Create*", 
                "codecommit:DeleteBranch", 
                "codecommit:Describe*", 
                "codecommit:Put*", 
                "codecommit:Post*", 
                "codecommit:Merge*", 
                "codecommit:Test*", 
                "codecommit:Update*", 
                "codecommit:GitPull", 
                "codecommit:GitPush"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "events:DeleteRule", 
                "events:DescribeRule", 
                "events:DisableRule", 
                "events:EnableRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "events:ListTargetsByRule"
            ], 
            "Resource": "arn:aws:events:*:*:rule/codecommit*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsCodeCommitRulesAccess"
        }, 
        {
            "Action": [
                "sns:Subscribe", 
                "sns:Unsubscribe"
            ], 
            "Resource": "arn:aws:sns:*:*:codecommit*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionAccess"
        }, 
        {
            "Action": [
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionReadAccess"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "LambdaReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListAccessKeys", 
                "iam:ListSSHPublicKeys", 
                "iam:ListServiceSpecificCredentials", 
                "iam:ListAccessKeys", 
                "iam:GetSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyConsoleAccess"
        }, 
        {
            "Action": [
                "iam:DeleteSSHPublicKey", 
                "iam:GetSSHPublicKey", 
                "iam:ListSSHPublicKeys", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMUserSSHKeys"
        }, 
        {
            "Action": [
                "iam:CreateServiceSpecificCredential", 
                "iam:UpdateServiceSpecificCredential", 
                "iam:DeleteServiceSpecificCredential", 
                "iam:ResetServiceSpecificCredential"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMSelfManageServiceSpecificCredentials"
        }
    ]
}
Policy Name: AWSCodeCommitFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codecommit:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "events:DeleteRule", 
                "events:DescribeRule", 
                "events:DisableRule", 
                "events:EnableRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "events:ListTargetsByRule"
            ], 
            "Resource": "arn:aws:events:*:*:rule/codecommit*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsCodeCommitRulesAccess"
        }, 
        {
            "Action": [
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sns:SetTopicAttributes"
            ], 
            "Resource": "arn:aws:sns:*:*:codecommit*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionAccess"
        }, 
        {
            "Action": [
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionReadAccess"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "LambdaReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListAccessKeys", 
                "iam:ListSSHPublicKeys", 
                "iam:ListServiceSpecificCredentials", 
                "iam:ListAccessKeys", 
                "iam:GetSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyConsoleAccess"
        }, 
        {
            "Action": [
                "iam:DeleteSSHPublicKey", 
                "iam:GetSSHPublicKey", 
                "iam:ListSSHPublicKeys", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMUserSSHKeys"
        }, 
        {
            "Action": [
                "iam:CreateServiceSpecificCredential", 
                "iam:UpdateServiceSpecificCredential", 
                "iam:DeleteServiceSpecificCredential", 
                "iam:ResetServiceSpecificCredential"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMSelfManageServiceSpecificCredentials"
        }
    ]
}
Policy Name: IAMSelfManageServiceSpecificCredentials
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:CreateServiceSpecificCredential", 
                "iam:ListServiceSpecificCredentials", 
                "iam:UpdateServiceSpecificCredential", 
                "iam:DeleteServiceSpecificCredential", 
                "iam:ResetServiceSpecificCredential"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEMRCleanupPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:TerminateInstances", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeVolumeStatus", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "ec2:DeleteVolume"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9EnvironmentMember
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloud9:GetUserSettings", 
                "cloud9:UpdateUserSettings", 
                "iam:GetUser", 
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloud9:DescribeEnvironmentMemberships"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "Null": {
                    "cloud9:UserArn": "true", 
                    "cloud9:EnvironmentId": "true"
                }
            }
        }
    ]
}
Policy Name: AWSApplicationAutoscalingSageMakerEndpointPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sagemaker:DescribeEndpoint", 
                "sagemaker:DescribeEndpointConfig", 
                "sagemaker:UpdateEndpointWeightsAndCapacities", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: FMSServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "waf:UpdateWebACL", 
                "waf:DeleteWebACL", 
                "waf:GetWebACL", 
                "waf-regional:UpdateWebACL", 
                "waf-regional:DeleteWebACL", 
                "waf-regional:GetWebACL", 
                "waf-regional:ListResourcesForWebACL", 
                "waf-regional:AssociateWebACL", 
                "waf-regional:DisassociateWebACL", 
                "elasticloadbalancing:SetWebACL"
            ], 
            "Resource": [
                "arn:aws:waf:*:*:webacl/*", 
                "arn:aws:waf-regional:*:*:webacl/*", 
                "arn:aws:waf:*:*:rulegroup/*", 
                "arn:aws:waf-regional:*:*:rulegroup/*", 
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "waf:CreateWebACL", 
                "waf-regional:CreateWebACL", 
                "waf:GetChangeToken", 
                "waf-regional:GetChangeToken"
            ], 
            "Resource": [
                "arn:aws:waf:*", 
                "arn:aws:waf-regional:*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "waf:PutPermissionPolicy", 
                "waf:GetPermissionPolicy", 
                "waf:DeletePermissionPolicy", 
                "waf-regional:PutPermissionPolicy", 
                "waf-regional:GetPermissionPolicy", 
                "waf-regional:DeletePermissionPolicy"
            ], 
            "Resource": [
                "arn:aws:waf:*:*:webacl/*", 
                "arn:aws:waf:*:*:rulegroup/*", 
                "arn:aws:waf-regional:*:*:webacl/*", 
                "arn:aws:waf-regional:*:*:rulegroup/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudfront:GetDistribution", 
                "cloudfront:UpdateDistribution", 
                "cloudfront:ListDistributionsByWebACLId"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "config:DescribeConfigurationRecorders", 
                "config:DescribeConfigurationRecorderStatus", 
                "config:PutConfigurationRecorder", 
                "config:StartConfigurationRecorder", 
                "config:PutDeliveryChannel", 
                "config:DescribeDeliveryChannels", 
                "config:DescribeDeliveryChannelStatus", 
                "config:DeleteConfigRule", 
                "config:DescribeComplianceByConfigRule", 
                "config:DescribeConfigRuleEvaluationStatus", 
                "config:DescribeConfigRules", 
                "config:GetComplianceDetailsByConfigRule", 
                "config:GetComplianceSummaryByConfigRule", 
                "config:GetDiscoveredResourceCounts", 
                "config:PutConfigRule", 
                "config:StartConfigRulesEvaluation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/fms.amazonaws.com/AWSServiceRoleForFMS"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "organizations:DescribeAccount", 
                "organizations:DescribeOrganization", 
                "organizations:ListAccounts"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSQSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sqs:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:Get*", 
                "a4b:List*", 
                "a4b:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeChangeSet", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStackResources", 
                "cloudwatch:*", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:GetCognitoEvents", 
                "cognito-sync:SetCognitoEvents", 
                "dynamodb:*", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "events:*", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListRolePolicies", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "iot:AttachPrincipalPolicy", 
                "iot:AttachThingPrincipal", 
                "iot:CreateKeysAndCertificate", 
                "iot:CreatePolicy", 
                "iot:CreateThing", 
                "iot:CreateTopicRule", 
                "iot:DescribeEndpoint", 
                "iot:GetTopicRule", 
                "iot:ListPolicies", 
                "iot:ListThings", 
                "iot:ListTopicRules", 
                "iot:ReplaceTopicRule", 
                "kinesis:DescribeStream", 
                "kinesis:ListStreams", 
                "kinesis:PutRecord", 
                "kms:ListAliases", 
                "lambda:*", 
                "logs:*", 
                "s3:*", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sns:Publish", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sqs:ListQueues", 
                "sqs:SendMessage", 
                "tag:GetResources", 
                "xray:PutTelemetryRecords", 
                "xray:PutTraceSegments"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTLogging
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:PutMetricFilter", 
                "logs:PutRetentionPolicy", 
                "logs:GetLogEvents", 
                "logs:DeleteLogStream"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2RoleforSSM
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:DescribeAssociation", 
                "ssm:GetDeployablePatchSnapshotForInstance", 
                "ssm:GetDocument", 
                "ssm:GetManifest", 
                "ssm:GetParameters", 
                "ssm:ListAssociations", 
                "ssm:ListInstanceAssociations", 
                "ssm:PutInventory", 
                "ssm:PutComplianceItems", 
                "ssm:PutConfigurePackageResult", 
                "ssm:UpdateAssociationStatus", 
                "ssm:UpdateInstanceAssociationStatus", 
                "ssm:UpdateInstanceInformation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2messages:AcknowledgeMessage", 
                "ec2messages:DeleteMessage", 
                "ec2messages:FailMessage", 
                "ec2messages:GetEndpoint", 
                "ec2messages:GetMessages", 
                "ec2messages:SendReply"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:PutMetricData"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeInstanceStatus"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ds:CreateComputer", 
                "ds:DescribeDirectories"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:GetObject", 
                "s3:AbortMultipartUpload", 
                "s3:ListMultipartUploadParts", 
                "s3:ListBucket", 
                "s3:ListBucketMultipartUploads"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudHSMRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:CreateTags", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DetachNetworkInterface"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSEnhancedClassicNetworkingMangementPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: IAMFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "iam:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonInspectorFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "inspector:*", 
                "ec2:DescribeInstances", 
                "ec2:DescribeTags", 
                "sns:ListTopics", 
                "events:DescribeRule", 
                "events:ListRuleNamesByTarget"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "inspector.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/inspector.amazonaws.com/AWSServiceRoleForAmazonInspector", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "inspector.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonElastiCacheFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "elasticache:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/elasticache.amazonaws.com/AWSServiceRoleForElastiCache", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "elasticache.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSAgentlessDiscoveryService
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "awsconnector:RegisterConnector", 
                "awsconnector:GetConnectorHealth"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:GetUser", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:ListBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::connector-platform-upgrade-info/*", 
                "arn:aws:s3:::connector-platform-upgrade-info", 
                "arn:aws:s3:::connector-platform-upgrade-bundles/*", 
                "arn:aws:s3:::connector-platform-upgrade-bundles", 
                "arn:aws:s3:::connector-platform-release-notes/*", 
                "arn:aws:s3:::connector-platform-release-notes", 
                "arn:aws:s3:::prod.agentless.discovery.connector.upgrade/*", 
                "arn:aws:s3:::prod.agentless.discovery.connector.upgrade"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:PutObjectAcl"
            ], 
            "Resource": [
                "arn:aws:s3:::import-to-ec2-connector-debug-logs/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "SNS:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "Discovery:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "Discovery"
        }, 
        {
            "Action": [
                "arsenal:RegisterOnPremisesAgent"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "arsenal"
        }
    ]
}
Policy Name: AWSXrayWriteOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "xray:PutTraceSegments", 
                "xray:PutTelemetryRecords"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSPriceListServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "pricing:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "autoscaling:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "autoscaling:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "cloudwatch:PutMetricAlarm", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeLaunchTemplateVersions", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcClassicLink"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "autoscaling.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonEC2RoleforAWSCodeDeploy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectVersion", 
                "s3:ListBucket"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMobileHub_ReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:DescribeTable", 
                "iam:ListSAMLProviders", 
                "lambda:ListFunctions", 
                "sns:ListTopics", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:GetBot", 
                "lex:GetBots", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases", 
                "mobilehub:ExportProject", 
                "mobilehub:GenerateProjectParameters", 
                "mobilehub:GetProject", 
                "mobilehub:GetProjectSnapshot", 
                "mobilehub:ListProjectSnapshots", 
                "mobilehub:ListAvailableConnectors", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "mobilehub:ValidateProject", 
                "mobilehub:VerifyServiceRole", 
                "mobilehub:DescribeBundle", 
                "mobilehub:ExportBundle", 
                "mobilehub:ListBundles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::*/aws-my-sample-app*.zip", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsBuiltInTargetExecutionAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:Describe*", 
                "ec2:RebootInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:CreateSnapshot"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsBuiltInTargetExecutionAccess"
        }
    ]
}
Policy Name: AutoScalingServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AttachClassicLinkVpc", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:Describe*", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RunInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "EC2InstanceManagement"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "ec2.amazonaws.com*"
                }
            }, 
            "Sid": "EC2InstanceProfileManagement"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "spot.amazonaws.com"
                }
            }, 
            "Sid": "EC2SpotManagement"
        }, 
        {
            "Action": [
                "elasticloadbalancing:Register*", 
                "elasticloadbalancing:Deregister*", 
                "elasticloadbalancing:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ELBManagement"
        }, 
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CWManagement"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSManagement"
        }
    ]
}
Policy Name: AmazonCloudDirectoryReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "clouddirectory:List*", 
                "clouddirectory:Get*", 
                "clouddirectory:LookupPolicy", 
                "clouddirectory:BatchRead"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchAgentAdminPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData", 
                "ec2:DescribeTags", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups", 
                "logs:CreateLogStream", 
                "logs:CreateLogGroup"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:GetParameter", 
                "ssm:PutParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "opsworks:*", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "iam:GetRolePolicy", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksCMInstanceProfileRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeStackResource", 
                "cloudformation:SignalResource"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:AbortMultipartUpload", 
                "s3:DeleteObject", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:ListMultipartUploadParts", 
                "s3:PutObject"
            ], 
            "Resource": "arn:aws:s3:::aws-opsworks-cm-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSBatchServiceEventTargetRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "batch:SubmitJob"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineApproverAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:GetPipeline", 
                "codepipeline:GetPipelineState", 
                "codepipeline:GetPipelineExecution", 
                "codepipeline:ListPipelineExecutions", 
                "codepipeline:ListPipelines", 
                "codepipeline:PutApprovalResult"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationDiscoveryAgentAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "arsenal:RegisterOnPremisesAgent"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ViewOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:ListCertificates", 
                "athena:List*", 
                "aws-marketplace:ViewSubscriptions", 
                "autoscaling:Describe*", 
                "batch:ListJobs", 
                "clouddirectory:ListAppliedSchemaArns", 
                "clouddirectory:ListDevelopmentSchemaArns", 
                "clouddirectory:ListDirectories", 
                "clouddirectory:ListPublishedSchemaArns", 
                "cloudformation:List*", 
                "cloudformation:DescribeStacks", 
                "cloudfront:List*", 
                "cloudhsm:ListAvailableZones", 
                "cloudhsm:ListLunaClients", 
                "cloudhsm:ListHapgs", 
                "cloudhsm:ListHsms", 
                "cloudsearch:List*", 
                "cloudsearch:DescribeDomains", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:LookupEvents", 
                "cloudwatch:List*", 
                "cloudwatch:GetMetricData", 
                "codebuild:ListBuilds*", 
                "codebuild:ListProjects", 
                "codecommit:List*", 
                "codedeploy:List*", 
                "codedeploy:Get*", 
                "codepipeline:ListPipelines", 
                "codestar:List*", 
                "codestar:Verify*", 
                "cognito-idp:List*", 
                "cognito-identity:ListIdentities", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:ListDatasets", 
                "connect:List*", 
                "config:List*", 
                "config:Describe*", 
                "datapipeline:ListPipelines", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetAccountLimits", 
                "devicefarm:List*", 
                "directconnect:Describe*", 
                "discovery:List*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListTables", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeBundleTasks", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeHost*", 
                "ec2:DescribeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeImage*", 
                "ec2:DescribeImport*", 
                "ec2:DescribeInstance*", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetwork*", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeReserved*", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshot*", 
                "ec2:DescribeSpot*", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolume*", 
                "ec2:DescribeVpc*", 
                "ec2:DescribeVpnGateways", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:List*", 
                "ecs:Describe*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:DescribeApplicationVersions", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticbeanstalk:ListAvailableSolutionStacks", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "es:DescribeElasticsearchDomain", 
                "es:DescribeElasticsearchDomains", 
                "es:ListDomainNames", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "firehose:List*", 
                "firehose:DescribeDeliveryStream", 
                "gamelift:List*", 
                "glacier:List*", 
                "iam:List*", 
                "iam:GetAccountSummary", 
                "iam:GetLoginProfile", 
                "importexport:ListJobs", 
                "inspector:List*", 
                "iot:List*", 
                "kinesis:ListStreams", 
                "kinesisanalytics:ListApplications", 
                "kms:ListKeys", 
                "lambda:List*", 
                "lex:GetBotAliases", 
                "lex:GetBotChannelAssociations", 
                "lex:GetBots", 
                "lex:GetBotVersions", 
                "lex:GetIntents", 
                "lex:GetIntentVersions", 
                "lex:GetSlotTypes", 
                "lex:GetSlotTypeVersions", 
                "lex:GetUtterancesView", 
                "lightsail:GetBlueprints", 
                "lightsail:GetBundles", 
                "lightsail:GetInstances", 
                "lightsail:GetInstanceSnapshots", 
                "lightsail:GetKeyPair", 
                "lightsail:GetRegions", 
                "lightsail:GetStaticIps", 
                "lightsail:IsVpcPeered", 
                "logs:Describe*", 
                "machinelearning:Describe*", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "opsworks:Describe*", 
                "opsworks-cm:Describe*", 
                "organizations:List*", 
                "mobiletargeting:GetApplicationSettings", 
                "mobiletargeting:GetCampaigns", 
                "mobiletargeting:GetImportJobs", 
                "mobiletargeting:GetSegments", 
                "polly:Describe*", 
                "polly:List*", 
                "rds:Describe*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeEvents", 
                "redshift:ViewQueriesInConsole", 
                "route53:List*", 
                "route53:Get*", 
                "route53domains:List*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "sdb:List*", 
                "servicecatalog:List*", 
                "ses:List*", 
                "shield:List*", 
                "states:ListActivities", 
                "states:ListStateMachines", 
                "sns:List*", 
                "sqs:ListQueues", 
                "ssm:ListAssociations", 
                "ssm:ListDocuments", 
                "storagegateway:ListGateways", 
                "storagegateway:ListLocalDisks", 
                "storagegateway:ListVolumeRecoveryPoints", 
                "storagegateway:ListVolumes", 
                "swf:List*", 
                "trustedadvisor:Describe*", 
                "waf:List*", 
                "waf-regional:List*", 
                "workdocs:DescribeAvailableDirectories", 
                "workdocs:DescribeInstances", 
                "workmail:Describe*", 
                "workspaces:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkCrowdReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "crowd:GetTask"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CrowdApiReadOnlyAccess"
        }
    ]
}
Policy Name: AmazonElasticMapReduceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteTags", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSpotPriceHistory", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcs", 
                "ec2:DetachNetworkInterface", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RunInstances", 
                "ec2:TerminateInstances", 
                "ec2:DeleteVolume", 
                "ec2:DescribeVolumeStatus", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListInstanceProfiles", 
                "iam:ListRolePolicies", 
                "iam:PassRole", 
                "s3:CreateBucket", 
                "s3:Get*", 
                "s3:List*", 
                "sdb:BatchPutAttributes", 
                "sdb:Select", 
                "sqs:CreateQueue", 
                "sqs:Delete*", 
                "sqs:GetQueue*", 
                "sqs:PurgeQueue", 
                "sqs:ReceiveMessage", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms", 
                "application-autoscaling:RegisterScalableTarget", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "spot.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonRoute53DomainsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53domains:Get*", 
                "route53domains:List*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMAutomationApproverAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:DescribeAutomationExecutions", 
                "ssm:GetAutomationExecution", 
                "ssm:SendAutomationSignal"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "iam:GetRolePolicy", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "iam:PassRole", 
                "opsworks:*", 
                "rds:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigRoleForOrganizations
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "organizations:ListAccounts", 
                "organizations:DescribeOrganization", 
                "organizations:ListAWSServiceAccessForOrganization"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ApplicationAutoScalingForAmazonAppStreamAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:UpdateFleet", 
                "appstream:DescribeFleets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DescribeAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerRegistryFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:*", 
                "cloudtrail:LookupEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: SimpleWorkflowFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "swf:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: GreengrassOTAUpdateArtifactAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::eu-central-1-greengrass-updates/*", 
                "arn:aws:s3:::us-east-1-greengrass-updates/*", 
                "arn:aws:s3:::ap-northeast-1-greengrass-updates/*", 
                "arn:aws:s3:::us-west-2-greengrass-updates/*", 
                "arn:aws:s3:::ap-southeast-2-greengrass-updates/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowsIotToAccessGreengrassOTAUpdateArtifacts"
        }
    ]
}
Policy Name: AmazonS3FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "s3:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStorageGatewayReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "storagegateway:List*", 
                "storagegateway:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeSnapshots"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: Billing
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-portal:*Billing", 
                "awsbillingconsole:*Billing", 
                "aws-portal:*Usage", 
                "awsbillingconsole:*Usage", 
                "aws-portal:*PaymentMethods", 
                "awsbillingconsole:*PaymentMethods", 
                "budgets:ViewBudget", 
                "budgets:ModifyBudget", 
                "cur:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: QuickSightAccessForS3StorageManagementAnalyticsReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectMetadata"
            ], 
            "Resource": [
                "arn:aws:s3:::s3-analytics-export-shared-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetAnalyticsConfiguration", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketLocation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerRegistryReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:GetRepositoryPolicy", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecr:DescribeImages", 
                "ecr:BatchGetImage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticMapReduceforEC2Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "dynamodb:*", 
                "ec2:Describe*", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:ListBootstrapActions", 
                "elasticmapreduce:ListClusters", 
                "elasticmapreduce:ListInstanceGroups", 
                "elasticmapreduce:ListInstances", 
                "elasticmapreduce:ListSteps", 
                "kinesis:CreateStream", 
                "kinesis:DeleteStream", 
                "kinesis:DescribeStream", 
                "kinesis:GetRecords", 
                "kinesis:GetShardIterator", 
                "kinesis:MergeShards", 
                "kinesis:PutRecord", 
                "kinesis:SplitShard", 
                "rds:Describe*", 
                "s3:*", 
                "sdb:*", 
                "sns:*", 
                "sqs:*", 
                "glue:CreateDatabase", 
                "glue:UpdateDatabase", 
                "glue:DeleteDatabase", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:CreateTable", 
                "glue:UpdateTable", 
                "glue:DeleteTable", 
                "glue:GetTable", 
                "glue:GetTables", 
                "glue:GetTableVersions", 
                "glue:CreatePartition", 
                "glue:BatchCreatePartition", 
                "glue:UpdatePartition", 
                "glue:DeletePartition", 
                "glue:BatchDeletePartition", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:BatchGetPartition", 
                "glue:CreateUserDefinedFunction", 
                "glue:UpdateUserDefinedFunction", 
                "glue:DeleteUserDefinedFunction", 
                "glue:GetUserDefinedFunction", 
                "glue:GetUserDefinedFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DatabaseAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:Describe*", 
                "cloudwatch:DisableAlarmActions", 
                "cloudwatch:EnableAlarmActions", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "cloudwatch:PutMetricAlarm", 
                "datapipeline:ActivatePipeline", 
                "datapipeline:CreatePipeline", 
                "datapipeline:DeletePipeline", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:PutPipelineDefinition", 
                "datapipeline:QueryObjects", 
                "dynamodb:*", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "elasticache:*", 
                "iam:ListRoles", 
                "iam:GetRole", 
                "kms:ListKeys", 
                "lambda:CreateEventSourceMapping", 
                "lambda:CreateFunction", 
                "lambda:DeleteEventSourceMapping", 
                "lambda:DeleteFunction", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListEventSourceMappings", 
                "lambda:ListFunctions", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:FilterLogEvents", 
                "logs:GetLogEvents", 
                "logs:Create*", 
                "logs:PutLogEvents", 
                "logs:PutMetricFilter", 
                "rds:*", 
                "redshift:*", 
                "s3:CreateBucket", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:Get*", 
                "sns:List*", 
                "sns:SetTopicAttributes", 
                "sns:Subscribe", 
                "sns:Unsubscribe"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:AbortMultipartUpload", 
                "s3:DeleteObject*", 
                "s3:Get*", 
                "s3:List*", 
                "s3:PutAccelerateConfiguration", 
                "s3:PutBucketTagging", 
                "s3:PutBucketVersioning", 
                "s3:PutBucketWebsite", 
                "s3:PutLifecycleConfiguration", 
                "s3:PutReplicationConfiguration", 
                "s3:PutObject*", 
                "s3:Replicate*", 
                "s3:RestoreObject"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/rds-monitoring-role", 
                "arn:aws:iam::*:role/rdbms-lambda-access", 
                "arn:aws:iam::*:role/lambda_exec_role", 
                "arn:aws:iam::*:role/lambda-dynamodb-*", 
                "arn:aws:iam::*:role/lambda-vpc-execution-role", 
                "arn:aws:iam::*:role/DataPipelineDefaultRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRedshiftReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "redshift:Describe*", 
                "redshift:ViewQueriesInConsole", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "sns:Get*", 
                "sns:List*", 
                "cloudwatch:Describe*", 
                "cloudwatch:List*", 
                "cloudwatch:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "ec2:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:ListMetrics", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchAgentServerPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData", 
                "ec2:DescribeTags", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups", 
                "logs:CreateLogStream", 
                "logs:CreateLogGroup"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:GetParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSXrayReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "xray:BatchGetTraces", 
                "xray:GetServiceGraph", 
                "xray:GetTraceGraph", 
                "xray:GetTraceSummaries"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkEnhancedHealth
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:GetConsoleOutput", 
                "ec2:AssociateAddress", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeSecurityGroups", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:DescribeNotificationConfigurations", 
                "sns:Publish"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:DescribeLogStreams", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*:log-stream:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticMapReduceReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:List*", 
                "elasticmapreduce:ViewEventsFromAllClustersInConsole", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "sdb:Select", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDirectoryServiceReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:Check*", 
                "ds:Describe*", 
                "ds:Get*", 
                "ds:List*", 
                "ds:Verify*", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "sns:ListTopics", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGuardDutyServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:DescribeImages"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonVPCReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeEgressOnlyInternetGateways", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroupReferences", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeStaleSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeVpcClassicLinkDnsSupport", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointConnectionNotifications", 
                "ec2:DescribeVpcEndpointConnections", 
                "ec2:DescribeVpcEndpointServiceConfigurations", 
                "ec2:DescribeVpcEndpointServicePermissions", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeStackResource", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awseb-*", 
                "arn:aws:cloudformation:*:*:stack/eb-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCloudformationReadOperationsOnElasticBeanstalkStacks"
        }, 
        {
            "Action": [
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:DescribeNotificationConfigurations", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:PutNotificationConfiguration", 
                "ec2:DescribeInstanceStatus", 
                "ec2:AssociateAddress", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "sns:Publish"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowOperations"
        }, 
        {
            "Action": [
                "logs:DescribeLogStreams", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*:log-stream:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "events:DescribeRule", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "events:TestEventPattern", 
                "events:DescribeEventBus"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsReadOnlyAccess"
        }
    ]
}
Policy Name: AWSLambdaReplicator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:DisableReplication"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:*"
            ], 
            "Effect": "Allow", 
            "Sid": "LambdaCreateDeletePermission"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLikeIfExists": {
                    "iam:PassedToService": "lambda.amazonaws.com"
                }
            }, 
            "Sid": "IamPassRolePermission"
        }, 
        {
            "Action": [
                "cloudfront:ListDistributionsByLambdaFunction"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudFrontListDistributions"
        }
    ]
}
Policy Name: AmazonAPIGatewayInvokeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "execute-api:Invoke"
            ], 
            "Resource": "arn:aws:execute-api:*:*:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSSSOServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:AttachRolePolicy", 
                "iam:CreateRole", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DetachRolePolicy", 
                "iam:GetRole", 
                "iam:ListRolePolicies", 
                "iam:PutRolePolicy", 
                "iam:ListAttachedRolePolicies"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListRoles"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "ListRolesInTheAccount"
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus", 
                "iam:DeleteRole", 
                "iam:GetRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDeletionOfServiceLinkedRoleForPeregrine"
        }, 
        {
            "Action": [
                "iam:CreateSAMLProvider", 
                "iam:GetSAMLProvider", 
                "iam:UpdateSAMLProvider", 
                "iam:DeleteSAMLProvider"
            ], 
            "Resource": [
                "arn:aws:iam::*:saml-provider/AWSSSO_*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "organizations:DescribeAccount", 
                "organizations:DescribeOrganization", 
                "organizations:ListAccounts"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisAnalyticsReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesisanalytics:Describe*", 
                "kinesisanalytics:Get*", 
                "kinesisanalytics:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesis:DescribeStream", 
                "kinesis:ListStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "firehose:DescribeDeliveryStream", 
                "firehose:ListDeliveryStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "logs:GetLogEvents", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListPolicyVersions", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "mobileanalytics:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMobileHub_FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "apigateway:GET", 
                "apigateway:GetRestApis", 
                "apigateway:GetResources", 
                "apigateway:POST", 
                "apigateway:TestInvokeMethod", 
                "cloudfront:GetDistribution", 
                "devicefarm:CreateProject", 
                "devicefarm:ListJobs", 
                "devicefarm:ListRuns", 
                "devicefarm:GetProject", 
                "devicefarm:GetRun", 
                "devicefarm:ListArtifacts", 
                "devicefarm:ListProjects", 
                "devicefarm:ScheduleRun", 
                "dynamodb:DescribeTable", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "iam:ListSAMLProviders", 
                "lambda:ListFunctions", 
                "sns:ListTopics", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:GetBot", 
                "lex:GetBots", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases", 
                "mobilehub:CreateProject", 
                "mobilehub:DeleteProject", 
                "mobilehub:UpdateProject", 
                "mobilehub:ExportProject", 
                "mobilehub:ImportProject", 
                "mobilehub:SynchronizeProject", 
                "mobilehub:GenerateProjectParameters", 
                "mobilehub:GetProject", 
                "mobilehub:GetProjectSnapshot", 
                "mobilehub:ListProjectSnapshots", 
                "mobilehub:DeleteProjectSnapshot", 
                "mobilehub:ListAvailableConnectors", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "mobilehub:ValidateProject", 
                "mobilehub:VerifyServiceRole", 
                "mobilehub:DescribeBundle", 
                "mobilehub:ExportBundle", 
                "mobilehub:ListBundles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::*/aws-my-sample-app*.zip", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject"
            ], 
            "Resource": "arn:aws:s3:::*-mobilehub-*/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:ListBucket"
            ], 
            "Resource": "arn:aws:s3:::*-mobilehub-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAPIGatewayPushToCloudWatchLogs
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:PutLogEvents", 
                "logs:GetLogEvents", 
                "logs:FilterLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDataPipelineRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "datapipeline:DescribeObjects", 
                "datapipeline:EvaluateExpression", 
                "dynamodb:BatchGetItem", 
                "dynamodb:DescribeTable", 
                "dynamodb:GetItem", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "dynamodb:UpdateTable", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:Describe*", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:DeleteSecurityGroup", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DetachNetworkInterface", 
                "elasticmapreduce:*", 
                "iam:GetInstanceProfile", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListRolePolicies", 
                "iam:ListInstanceProfiles", 
                "iam:PassRole", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "s3:CreateBucket", 
                "s3:DeleteObject", 
                "s3:Get*", 
                "s3:List*", 
                "s3:Put*", 
                "sdb:BatchPutAttributes", 
                "sdb:Select*", 
                "sns:GetTopicAttributes", 
                "sns:ListTopics", 
                "sns:Publish", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sqs:CreateQueue", 
                "sqs:Delete*", 
                "sqs:GetQueue*", 
                "sqs:PurgeQueue", 
                "sqs:ReceiveMessage"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "elasticmapreduce.amazonaws.com", 
                        "spot.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: CloudWatchFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "cloudwatch:*", 
                "logs:*", 
                "sns:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "events.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSDeepLensLambdaFunctionAccessPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListBucket", 
                "s3:GetObject", 
                "s3:ListObjects"
            ], 
            "Resource": [
                "arn:aws:s3:::deeplens*/*", 
                "arn:aws:s3:::deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensS3ObjectAccess"
        }, 
        {
            "Action": [
                "logs:CreateLogStream", 
                "logs:DescribeLogStreams", 
                "logs:PutLogEvents", 
                "logs:CreateLogGroup"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/greengrass/*", 
            "Effect": "Allow", 
            "Sid": "DeepLensGreenGrassCloudWatchAccess"
        }, 
        {
            "Action": [
                "deeplens:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAccess"
        }, 
        {
            "Action": [
                "acuity:CreateStream", 
                "acuity:DescribeStream", 
                "acuity:DeleteStream", 
                "acuity:PutMedia"
            ], 
            "Resource": [
                "arn:aws:acuity:*:*:stream/deeplens*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityStreamAccess"
        }, 
        {
            "Action": [
                "acuity:GetDataEndpoint"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityEndpointAccess"
        }
    ]
}
Policy Name: AmazonGuardDutyFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "guardduty:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "guardduty.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonRDSDirectoryServiceAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:DescribeDirectories", 
                "ds:AuthorizeApplication", 
                "ds:UnauthorizeApplication"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:GetPipeline", 
                "codepipeline:GetPipelineState", 
                "codepipeline:GetPipelineExecution", 
                "codepipeline:ListPipelineExecutions", 
                "codepipeline:ListActionTypes", 
                "codepipeline:ListPipelines", 
                "iam:ListRoles", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "codecommit:ListBranches", 
                "codecommit:ListRepositories", 
                "codedeploy:GetApplication", 
                "codedeploy:GetDeploymentGroup", 
                "codedeploy:ListApplications", 
                "codedeploy:ListDeploymentGroups", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListFunctions", 
                "opsworks:DescribeApps", 
                "opsworks:DescribeLayers", 
                "opsworks:DescribeStacks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:Describe*", 
                "acm:Get*", 
                "acm:List*", 
                "apigateway:GET", 
                "application-autoscaling:Describe*", 
                "autoscaling-plans:Describe*", 
                "appstream:Describe*", 
                "appstream:Get*", 
                "appstream:List*", 
                "athena:List*", 
                "athena:Batch*", 
                "athena:Get*", 
                "autoscaling:Describe*", 
                "batch:List*", 
                "batch:Describe*", 
                "cloud9:Describe*", 
                "cloud9:List*", 
                "clouddirectory:List*", 
                "clouddirectory:BatchRead", 
                "clouddirectory:Get*", 
                "clouddirectory:LookupPolicy", 
                "cloudformation:Describe*", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:Estimate*", 
                "cloudformation:Preview*", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "cloudhsm:List*", 
                "cloudhsm:Describe*", 
                "cloudhsm:Get*", 
                "cloudsearch:Describe*", 
                "cloudsearch:List*", 
                "cloudtrail:Describe*", 
                "cloudtrail:Get*", 
                "cloudtrail:List*", 
                "cloudtrail:LookupEvents", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "codebuild:BatchGet*", 
                "codebuild:List*", 
                "codecommit:BatchGet*", 
                "codecommit:Get*", 
                "codecommit:GitPull", 
                "codecommit:List*", 
                "codedeploy:BatchGet*", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codepipeline:List*", 
                "codepipeline:Get*", 
                "codestar:List*", 
                "codestar:Describe*", 
                "codestar:Get*", 
                "codestar:Verify*", 
                "cognito-identity:List*", 
                "cognito-identity:Describe*", 
                "cognito-identity:Lookup*", 
                "cognito-sync:List*", 
                "cognito-sync:Describe*", 
                "cognito-sync:Get*", 
                "cognito-sync:QueryRecords", 
                "cognito-idp:AdminList*", 
                "cognito-idp:List*", 
                "cognito-idp:Describe*", 
                "cognito-idp:Get*", 
                "config:Deliver*", 
                "config:Describe*", 
                "config:Get*", 
                "config:List*", 
                "connect:List*", 
                "connect:Describe*", 
                "connect:Get*", 
                "datapipeline:Describe*", 
                "datapipeline:EvaluateExpression", 
                "datapipeline:Get*", 
                "datapipeline:List*", 
                "datapipeline:QueryObjects", 
                "datapipeline:Validate*", 
                "directconnect:Describe*", 
                "devicefarm:List*", 
                "devicefarm:Get*", 
                "discovery:Describe*", 
                "discovery:List*", 
                "discovery:Get*", 
                "dms:Describe*", 
                "dms:List*", 
                "dms:Test*", 
                "ds:Check*", 
                "ds:Describe*", 
                "ds:Get*", 
                "ds:List*", 
                "ds:Verify*", 
                "dynamodb:BatchGet*", 
                "dynamodb:Describe*", 
                "dynamodb:Get*", 
                "dynamodb:List*", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "ec2:Describe*", 
                "ec2:Get*", 
                "ec2messages:Get*", 
                "ecr:BatchCheck*", 
                "ecr:BatchGet*", 
                "ecr:Describe*", 
                "ecr:Get*", 
                "ecr:List*", 
                "ecs:Describe*", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticache:List*", 
                "elasticbeanstalk:Check*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:Request*", 
                "elasticbeanstalk:Retrieve*", 
                "elasticbeanstalk:Validate*", 
                "elasticfilesystem:Describe*", 
                "elasticloadbalancing:Describe*", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:List*", 
                "elasticmapreduce:View*", 
                "elastictranscoder:List*", 
                "elastictranscoder:Read*", 
                "es:Describe*", 
                "es:List*", 
                "es:ESHttpGet", 
                "es:ESHttpHead", 
                "events:Describe*", 
                "events:List*", 
                "events:Test*", 
                "firehose:Describe*", 
                "firehose:List*", 
                "gamelift:List*", 
                "gamelift:Get*", 
                "gamelift:Describe*", 
                "gamelift:RequestUploadCredentials", 
                "gamelift:ResolveAlias", 
                "gamelift:Search*", 
                "glacier:List*", 
                "glacier:Describe*", 
                "glacier:Get*", 
                "guardduty:Get*", 
                "guardduty:List*", 
                "health:Describe*", 
                "health:Get*", 
                "health:List*", 
                "iam:Generate*", 
                "iam:Get*", 
                "iam:List*", 
                "iam:Simulate*", 
                "importexport:Get*", 
                "importexport:List*", 
                "inspector:Describe*", 
                "inspector:Get*", 
                "inspector:List*", 
                "inspector:Preview*", 
                "inspector:LocalizeText", 
                "iot:Describe*", 
                "iot:Get*", 
                "iot:List*", 
                "kinesisanalytics:Describe*", 
                "kinesisanalytics:Discover*", 
                "kinesisanalytics:Get*", 
                "kinesisanalytics:List*", 
                "kinesis:Describe*", 
                "kinesis:Get*", 
                "kinesis:List*", 
                "kms:Describe*", 
                "kms:Get*", 
                "kms:List*", 
                "lambda:List*", 
                "lambda:Get*", 
                "lex:Get*", 
                "lightsail:Get*", 
                "lightsail:Is*", 
                "lightsail:Download*", 
                "logs:Describe*", 
                "logs:Get*", 
                "logs:FilterLogEvents", 
                "logs:ListTagsLogGroup", 
                "logs:TestMetricFilter", 
                "machinelearning:Describe*", 
                "machinelearning:Get*", 
                "mobileanalytics:Get*", 
                "mobilehub:Describe*", 
                "mobilehub:Export*", 
                "mobilehub:Generate*", 
                "mobilehub:Get*", 
                "mobilehub:List*", 
                "mobilehub:Validate*", 
                "mobilehub:Verify*", 
                "mobiletargeting:Get*", 
                "opsworks:Describe*", 
                "opsworks:Get*", 
                "opsworks-cm:Describe*", 
                "organizations:Describe*", 
                "organizations:List*", 
                "polly:Describe*", 
                "polly:Get*", 
                "polly:List*", 
                "polly:SynthesizeSpeech", 
                "rekognition:CompareFaces", 
                "rekognition:Detect*", 
                "rekognition:List*", 
                "rekognition:Search*", 
                "rds:Describe*", 
                "rds:List*", 
                "rds:Download*", 
                "redshift:Describe*", 
                "redshift:View*", 
                "redshift:Get*", 
                "resource-groups:Describe*", 
                "resource-groups:Get*", 
                "resource-groups:List*", 
                "resource-groups:Search*", 
                "route53:Get*", 
                "route53:List*", 
                "route53:Test*", 
                "route53domains:Check*", 
                "route53domains:Get*", 
                "route53domains:List*", 
                "route53domains:View*", 
                "s3:Get*", 
                "s3:List*", 
                "s3:Head*", 
                "sdb:Get*", 
                "sdb:List*", 
                "sdb:Select*", 
                "servicecatalog:List*", 
                "servicecatalog:Scan*", 
                "servicecatalog:Search*", 
                "servicecatalog:Describe*", 
                "ses:Get*", 
                "ses:List*", 
                "ses:Describe*", 
                "ses:Verify*", 
                "shield:Describe*", 
                "shield:List*", 
                "snowball:Get*", 
                "snowball:Describe*", 
                "snowball:List*", 
                "sns:Get*", 
                "sns:List*", 
                "sns:Check*", 
                "sqs:Get*", 
                "sqs:List*", 
                "sqs:Receive*", 
                "ssm:Describe*", 
                "ssm:Get*", 
                "ssm:List*", 
                "states:List*", 
                "states:Describe*", 
                "states:GetExecutionHistory", 
                "storagegateway:Describe*", 
                "storagegateway:List*", 
                "sts:Get*", 
                "swf:Count*", 
                "swf:Describe*", 
                "swf:Get*", 
                "swf:List*", 
                "tag:Get*", 
                "trustedadvisor:Describe*", 
                "waf:Get*", 
                "waf:List*", 
                "waf-regional:List*", 
                "waf-regional:Get*", 
                "workdocs:Describe*", 
                "workdocs:Get*", 
                "workdocs:CheckAlias", 
                "workmail:Describe*", 
                "workmail:Get*", 
                "workmail:List*", 
                "workmail:Search*", 
                "workspaces:Describe*", 
                "xray:BatchGet*", 
                "xray:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncInvokeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appsync:GraphQL", 
                "appsync:GetGraphqlApi", 
                "appsync:ListGraphqlApis", 
                "appsync:ListApiKeys"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningBatchPredictionsAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:CreateBatchPrediction", 
                "machinelearning:DeleteBatchPrediction", 
                "machinelearning:DescribeBatchPredictions", 
                "machinelearning:GetBatchPrediction", 
                "machinelearning:UpdateBatchPrediction"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSEC2SpotFleetServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:RunInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*", 
                "arn:aws:ec2:*:*:spot-instances-request/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:ec2spot:fleet-request-id": "*"
                }
            }
        }
    ]
}
Policy Name: AmazonRekognitionReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rekognition:CompareFaces", 
                "rekognition:DetectFaces", 
                "rekognition:DetectLabels", 
                "rekognition:ListCollections", 
                "rekognition:ListFaces", 
                "rekognition:SearchFaces", 
                "rekognition:SearchFacesByImage", 
                "rekognition:DetectText", 
                "rekognition:GetCelebrityInfo", 
                "rekognition:RecognizeCelebrities", 
                "rekognition:DetectModerationLabels", 
                "rekognition:GetLabelDetection", 
                "rekognition:GetFaceDetection", 
                "rekognition:GetContentModeration", 
                "rekognition:GetPersonTracking", 
                "rekognition:GetCelebrityRecognition", 
                "rekognition:GetFaceSearch", 
                "rekognition:DescribeStreamProcessor", 
                "rekognition:ListStreamProcessors"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codedeploy:Batch*", 
                "codedeploy:Get*", 
                "codedeploy:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudSearchFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudsearch:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudHSMFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "cloudhsm:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2SpotFleetAutoscaleRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeSpotFleetRequests", 
                "ec2:ModifySpotFleetRequest"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticLoadBalancingServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAddresses", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:AttachNetworkInterface", 
                "ec2:DetachNetworkInterface", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssignIpv6Addresses", 
                "ec2:UnassignIpv6Addresses"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeBuildDeveloperAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codebuild:StartBuild", 
                "codebuild:StopBuild", 
                "codebuild:BatchGet*", 
                "codebuild:Get*", 
                "codebuild:List*", 
                "codecommit:GetBranch", 
                "codecommit:GetCommit", 
                "codecommit:GetRepository", 
                "codecommit:ListBranches", 
                "s3:GetBucketLocation", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:PutParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ElastiCacheServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSGlueServiceNotebookRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glue:CreateDatabase", 
                "glue:CreatePartition", 
                "glue:CreateTable", 
                "glue:DeleteDatabase", 
                "glue:DeletePartition", 
                "glue:DeleteTable", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:GetTable", 
                "glue:GetTableVersions", 
                "glue:GetTables", 
                "glue:UpdateDatabase", 
                "glue:UpdatePartition", 
                "glue:UpdateTable", 
                "glue:CreateBookmark", 
                "glue:GetBookmark", 
                "glue:UpdateBookmark", 
                "glue:GetMetric", 
                "glue:PutMetric", 
                "glue:CreateConnection", 
                "glue:CreateJob", 
                "glue:DeleteConnection", 
                "glue:DeleteJob", 
                "glue:GetConnection", 
                "glue:GetConnections", 
                "glue:GetDevEndpoint", 
                "glue:GetDevEndpoints", 
                "glue:GetJob", 
                "glue:GetJobs", 
                "glue:UpdateJob", 
                "glue:BatchDeleteConnection", 
                "glue:UpdateConnection", 
                "glue:GetUserDefinedFunction", 
                "glue:UpdateUserDefinedFunction", 
                "glue:GetUserDefinedFunctions", 
                "glue:DeleteUserDefinedFunction", 
                "glue:CreateUserDefinedFunction", 
                "glue:BatchGetPartition", 
                "glue:BatchDeletePartition", 
                "glue:BatchCreatePartition", 
                "glue:BatchDeleteTable", 
                "glue:UpdateDevEndpoint", 
                "s3:GetBucketLocation", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketAcl"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::crawler-public*", 
                "arn:aws:s3:::aws-glue*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:DeleteObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:network-interface/*", 
                "arn:aws:ec2:*:*:security-group/*", 
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringEquals": {
                    "aws:TagKeys": [
                        "aws-glue-service-resource"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonEC2SpotFleetRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeInstanceStatus", 
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterTargets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDataPipeline_PowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:List*", 
                "dynamodb:DescribeTable", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "sns:ListTopics", 
                "iam:ListRoles", 
                "iam:GetRolePolicy", 
                "iam:GetInstanceProfile", 
                "iam:ListInstanceProfiles", 
                "datapipeline:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultRole"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderJobsSubmitter
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elastictranscoder:Read*", 
                "elastictranscoder:List*", 
                "elastictranscoder:*Job", 
                "elastictranscoder:*Preset", 
                "s3:List*", 
                "iam:List*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeStarServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "events:PutTargets", 
                "events:RemoveTargets", 
                "events:PutRule", 
                "events:DeleteRule", 
                "events:DescribeRule"
            ], 
            "Resource": [
                "arn:aws:events:*:*:rule/awscodestar-*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectEventRules"
        }, 
        {
            "Action": [
                "cloudformation:*Stack*", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:ExecuteChangeSet", 
                "cloudformation:DeleteChangeSet", 
                "cloudformation:GetTemplate"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awscodestar-*", 
                "arn:aws:cloudformation:*:*:stack/awseb-*", 
                "arn:aws:cloudformation:*:*:stack/aws-cloud9-*", 
                "arn:aws:cloudformation:*:aws:transform/CodeStar*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectStack"
        }, 
        {
            "Action": [
                "cloudformation:GetTemplateSummary", 
                "cloudformation:DescribeChangeSet"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ProjectStackTemplate"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::awscodestar-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectQuickstarts"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-codestar-*", 
                "arn:aws:s3:::aws-codestar-*/*", 
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectS3Buckets"
        }, 
        {
            "Action": [
                "codestar:*", 
                "codecommit:*", 
                "codepipeline:*", 
                "codedeploy:*", 
                "codebuild:*", 
                "ec2:RunInstances", 
                "autoscaling:*", 
                "cloudwatch:Put*", 
                "ec2:*", 
                "elasticbeanstalk:*", 
                "elasticloadbalancing:*", 
                "iam:ListRoles", 
                "logs:*", 
                "sns:*", 
                "cloud9:CreateEnvironmentEC2", 
                "cloud9:DeleteEnvironment", 
                "cloud9:DescribeEnvironment*", 
                "cloud9:ListEnvironments"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ProjectServices"
        }, 
        {
            "Action": [
                "iam:AttachRolePolicy", 
                "iam:CreateRole", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DetachRolePolicy", 
                "iam:GetRole", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:SetDefaultPolicyVersion", 
                "iam:CreatePolicy", 
                "iam:DeletePolicy", 
                "iam:AddRoleToInstanceProfile", 
                "iam:CreateInstanceProfile", 
                "iam:DeleteInstanceProfile", 
                "iam:RemoveRoleFromInstanceProfile"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/CodeStarWorker*", 
                "arn:aws:iam::*:policy/CodeStarWorker*", 
                "arn:aws:iam::*:instance-profile/awscodestar-*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectWorkerRoles"
        }, 
        {
            "Action": [
                "iam:AttachUserPolicy", 
                "iam:DetachUserPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "ArnEquals": {
                    "iam:PolicyArn": [
                        "arn:aws:iam::*:policy/CodeStar_*"
                    ]
                }
            }, 
            "Sid": "ProjectTeamMembers"
        }, 
        {
            "Action": [
                "iam:CreatePolicy", 
                "iam:DeletePolicy", 
                "iam:CreatePolicyVersion", 
                "iam:DeletePolicyVersion", 
                "iam:ListEntitiesForPolicy", 
                "iam:ListPolicyVersions"
            ], 
            "Resource": [
                "arn:aws:iam::*:policy/CodeStar_*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectRoles"
        }, 
        {
            "Action": [
                "iam:ListAttachedRolePolicies"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-codestar-service-role", 
                "arn:aws:iam::*:role/service-role/aws-codestar-service-role"
            ], 
            "Effect": "Allow", 
            "Sid": "InspectServiceRole"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "cloud9.amazonaws.com"
                }
            }, 
            "Sid": "IAMLinkRole"
        }, 
        {
            "Action": [
                "config:DescribeConfigRules"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DescribeConfigRuleForARN"
        }
    ]
}
Policy Name: AmazonTranscribeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "transcribe:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::*transcribe*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDirectoryServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:*", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:SetTopicAttributes", 
                "sns:Subscribe", 
                "sns:Unsubscribe"
            ], 
            "Resource": "arn:aws:sns:*:*:DirectoryMonitoring*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDynamoDBFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:*", 
                "dax:*", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget", 
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarmHistory", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics", 
                "cloudwatch:PutMetricAlarm", 
                "datapipeline:ActivatePipeline", 
                "datapipeline:CreatePipeline", 
                "datapipeline:DeletePipeline", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:PutPipelineDefinition", 
                "datapipeline:QueryObjects", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "iam:GetRole", 
                "iam:ListRoles", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sns:SetTopicAttributes", 
                "lambda:CreateFunction", 
                "lambda:ListFunctions", 
                "lambda:ListEventSourceMappings", 
                "lambda:CreateEventSourceMapping", 
                "lambda:DeleteEventSourceMapping", 
                "lambda:GetFunctionConfiguration", 
                "lambda:DeleteFunction"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "application-autoscaling.amazonaws.com", 
                        "dax.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": [
                        "replication.dynamodb.amazonaws.com", 
                        "dax.amazonaws.com", 
                        "dynamodb.application-autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonSESReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ses:Get*", 
                "ses:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSWAFReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "waf:Get*", 
                "waf:List*", 
                "waf-regional:Get*", 
                "waf-regional:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingNotificationAccessRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sqs:SendMessage", 
                "sqs:GetQueueUrl", 
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mechanicalturk:Get*", 
                "mechanicalturk:Search*", 
                "mechanicalturk:List*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaReplicatorInternal
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:DisableReplication"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:*"
            ], 
            "Effect": "Allow", 
            "Sid": "LambdaCreateDeletePermission"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLikeIfExists": {
                    "iam:PassedToService": [
                        "lambda.amazonaws.com", 
                        "lambda.beta.amazonaws.com", 
                        "lambda.gamma.amazonaws.com"
                    ]
                }
            }, 
            "Sid": "IamPassRolePermission"
        }, 
        {
            "Action": [
                "cloudfront:ListDistributionsByLambdaFunction"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudFrontListDistributions"
        }
    ]
}
Policy Name: AmazonKinesisReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesis:Get*", 
                "kinesis:List*", 
                "kinesis:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "codedeploy:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchActionsEC2Access
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:Describe*", 
                "ec2:Describe*", 
                "ec2:RebootInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaDynamoDBExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:DescribeStream", 
                "dynamodb:GetRecords", 
                "dynamodb:GetShardIterator", 
                "dynamodb:ListStreams", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53DomainsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:CreateHostedZone", 
                "route53domains:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElastiCacheReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticache:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRDSServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/rds/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAthenaFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "athena:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "glue:CreateDatabase", 
                "glue:DeleteDatabase", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:UpdateDatabase", 
                "glue:CreateTable", 
                "glue:DeleteTable", 
                "glue:BatchDeleteTable", 
                "glue:UpdateTable", 
                "glue:GetTable", 
                "glue:GetTables", 
                "glue:BatchCreatePartition", 
                "glue:CreatePartition", 
                "glue:DeletePartition", 
                "glue:BatchDeletePartition", 
                "glue:UpdatePartition", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:BatchGetPartition"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts", 
                "s3:AbortMultipartUpload", 
                "s3:CreateBucket", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-athena-query-results-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::athena-examples*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkCrowdFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "crowd:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CrowdApiFullAccess"
        }
    ]
}
Policy Name: AmazonElasticFileSystemReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "elasticfilesystem:Describe*", 
                "kms:ListAliases"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudFrontFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "arn:aws:s3:::*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "acm:ListCertificates", 
                "cloudfront:*", 
                "iam:ListServerCertificates", 
                "waf:ListWebACLs", 
                "waf:GetWebACL"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9Administrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloud9:*", 
                "iam:GetUser", 
                "iam:ListUsers", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "cloud9.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonMachineLearningRoleforRedshiftDataSource
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:RevokeSecurityGroupIngress", 
                "redshift:AuthorizeClusterSecurityGroupIngress", 
                "redshift:CreateClusterSecurityGroup", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "redshift:ModifyCluster", 
                "redshift:RevokeClusterSecurityGroupIngress", 
                "s3:GetBucketLocation", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:PutBucketPolicy", 
                "s3:PutObject"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingEMRInstanceGroupPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticmapreduce:ListInstanceGroups", 
                "elasticmapreduce:ModifyInstanceGroups", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOrganizationsServiceTrustPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:DeleteRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/organizations.amazonaws.com/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDeletionOfServiceLinkedRoleForOrganizations"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowCreationOfServiceLinkedRoles"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsNon-financialReportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "mobileanalytics:GetReports", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudTrailFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:AddPermission", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListTopics", 
                "sns:SetTopicAttributes", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:ListAllMyBuckets", 
                "s3:PutBucketPolicy", 
                "s3:ListBucket", 
                "s3:GetObject", 
                "s3:GetBucketLocation", 
                "s3:GetBucketPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "cloudtrail:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole", 
                "iam:ListRoles", 
                "iam:GetRolePolicy", 
                "iam:GetUser"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kms:ListKeys", 
                "kms:ListAliases"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCognitoDeveloperAuthenticatedIdentities
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-identity:GetOpenIdTokenForDeveloperIdentity", 
                "cognito-identity:LookupDeveloperIdentity", 
                "cognito-identity:MergeDeveloperIdentities", 
                "cognito-identity:UnlinkDeveloperIdentity"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudtrail:DescribeTrails", 
                "ec2:Describe*", 
                "config:Put*", 
                "config:Get*", 
                "config:List*", 
                "config:Describe*", 
                "cloudtrail:GetTrailStatus", 
                "s3:GetObject", 
                "iam:GetAccountAuthorizationDetails", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetGroup", 
                "iam:GetGroupPolicy", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:GetUser", 
                "iam:GetUserPolicy", 
                "iam:ListAttachedGroupPolicies", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListAttachedUserPolicies", 
                "iam:ListEntitiesForPolicy", 
                "iam:ListGroupPolicies", 
                "iam:ListGroupsForUser", 
                "iam:ListInstanceProfilesForRole", 
                "iam:ListPolicyVersions", 
                "iam:ListRolePolicies", 
                "iam:ListUserPolicies", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeLoadBalancerAttributes", 
                "elasticloadbalancing:DescribeLoadBalancerPolicies", 
                "elasticloadbalancing:DescribeTags", 
                "acm:DescribeCertificate", 
                "acm:ListCertificates", 
                "acm:ListTagsForCertificate", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "rds:DescribeDBSnapshotAttributes", 
                "rds:DescribeDBSnapshots", 
                "rds:DescribeDBSubnetGroups", 
                "rds:DescribeEventSubscriptions", 
                "rds:ListTagsForResource", 
                "rds:DescribeDBClusters", 
                "s3:GetAccelerateConfiguration", 
                "s3:GetBucketAcl", 
                "s3:GetBucketCORS", 
                "s3:GetBucketLocation", 
                "s3:GetBucketLogging", 
                "s3:GetBucketNotification", 
                "s3:GetBucketPolicy", 
                "s3:GetBucketRequestPayment", 
                "s3:GetBucketTagging", 
                "s3:GetBucketVersioning", 
                "s3:GetBucketWebsite", 
                "s3:GetLifecycleConfiguration", 
                "s3:GetReplicationConfiguration", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "redshift:DescribeClusterParameterGroups", 
                "redshift:DescribeClusterParameters", 
                "redshift:DescribeClusterSecurityGroups", 
                "redshift:DescribeClusterSnapshots", 
                "redshift:DescribeClusterSubnetGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeEventSubscriptions", 
                "redshift:DescribeLoggingStatus", 
                "dynamodb:DescribeLimits", 
                "dynamodb:DescribeTable", 
                "dynamodb:ListTables", 
                "dynamodb:ListTagsOfResource", 
                "cloudwatch:DescribeAlarms", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingPolicies", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLaunchConfigurations", 
                "autoscaling:DescribeLifecycleHooks", 
                "autoscaling:DescribePolicies", 
                "autoscaling:DescribeScheduledActions", 
                "autoscaling:DescribeTags", 
                "lambda:GetFunction", 
                "lambda:GetPolicy", 
                "lambda:ListFunctions", 
                "lambda:GetAlias", 
                "lambda:ListAliases", 
                "waf-regional:GetWebACLForResource", 
                "waf-regional:GetWebACL", 
                "cloudfront:ListTagsForResource"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingAppStreamFleetPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:UpdateFleet", 
                "appstream:DescribeFleets", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSGlueServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glue:*", 
                "s3:GetBucketLocation", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketAcl", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeRouteTables", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "iam:ListRolePolicies", 
                "iam:GetRole", 
                "iam:GetRolePolicy"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*/*", 
                "arn:aws:s3:::*/*aws-glue-*/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::crawler-public*", 
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:/aws-glue/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:network-interface/*", 
                "arn:aws:ec2:*:*:security-group/*", 
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringEquals": {
                    "aws:TagKeys": [
                        "aws-glue-service-resource"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonAppStreamServiceAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeSubnets", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:ListBucket", 
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject", 
                "s3:GetObjectVersion", 
                "s3:DeleteObjectVersion", 
                "s3:PutBucketPolicy"
            ], 
            "Resource": "arn:aws:s3:::appstream2-36fb080bb8-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRedshiftFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "redshift:*", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "sns:CreateTopic", 
                "sns:Get*", 
                "sns:List*", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:EnableAlarmActions", 
                "cloudwatch:DisableAlarmActions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/redshift.amazonaws.com/AWSServiceRoleForRedshift", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "redshift.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonZocaloReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "zocalo:Describe*", 
                "ds:DescribeDirectories", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudHSMReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudhsm:Get*", 
                "cloudhsm:List*", 
                "cloudhsm:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ComprehendFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "comprehend:*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "iam:ListRoles", 
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: SystemAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:Describe*", 
                "acm:Get*", 
                "acm:List*", 
                "acm:Request*", 
                "acm:Resend*", 
                "autoscaling:*", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:ListPublicKeys", 
                "cloudtrail:ListTags", 
                "cloudtrail:LookupEvents", 
                "cloudtrail:StartLogging", 
                "cloudtrail:StopLogging", 
                "cloudwatch:*", 
                "codecommit:BatchGetRepositories", 
                "codecommit:CreateBranch", 
                "codecommit:CreateRepository", 
                "codecommit:Get*", 
                "codecommit:GitPull", 
                "codecommit:GitPush", 
                "codecommit:List*", 
                "codecommit:Put*", 
                "codecommit:Test*", 
                "codecommit:Update*", 
                "codedeploy:*", 
                "codepipeline:*", 
                "config:*", 
                "ds:*", 
                "ec2:Allocate*", 
                "ec2:AssignPrivateIpAddresses*", 
                "ec2:Associate*", 
                "ec2:Allocate*", 
                "ec2:AttachInternetGateway", 
                "ec2:AttachNetworkInterface", 
                "ec2:AttachVpnGateway", 
                "ec2:Bundle*", 
                "ec2:Cancel*", 
                "ec2:Copy*", 
                "ec2:CreateCustomerGateway", 
                "ec2:CreateDhcpOptions", 
                "ec2:CreateFlowLogs", 
                "ec2:CreateImage", 
                "ec2:CreateInstanceExportTask", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateKeyPair", 
                "ec2:CreateNatGateway", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreatePlacementGroup", 
                "ec2:CreateReservedInstancesListing", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSnapshot", 
                "ec2:CreateSpotDatafeedSubscription", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:CreateVpc", 
                "ec2:CreateVpcEndpoint", 
                "ec2:CreateVpnConnection", 
                "ec2:CreateVpnConnectionRoute", 
                "ec2:CreateVpnGateway", 
                "ec2:DeleteFlowLogs", 
                "ec2:DeleteKeyPair", 
                "ec2:DeleteNatGateway", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeletePlacementGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteSpotDatafeedSubscription", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteTags", 
                "ec2:DeleteVpc", 
                "ec2:DeleteVpcEndpoints", 
                "ec2:DeleteVpnConnection", 
                "ec2:DeleteVpnConnectionRoute", 
                "ec2:DeleteVpnGateway", 
                "ec2:DeregisterImage", 
                "ec2:Describe*", 
                "ec2:DetachInternetGateway", 
                "ec2:DetachNetworkInterface", 
                "ec2:DetachVpnGateway", 
                "ec2:DisableVgwRoutePropagation", 
                "ec2:DisableVpcClassicLinkDnsSupport", 
                "ec2:DisassociateAddress", 
                "ec2:DisassociateRouteTable", 
                "ec2:EnableVgwRoutePropagation", 
                "ec2:EnableVolumeIO", 
                "ec2:EnableVpcClassicLinkDnsSupport", 
                "ec2:GetConsoleOutput", 
                "ec2:GetHostReservationPurchasePreview", 
                "ec2:GetPasswordData", 
                "ec2:Import*", 
                "ec2:Modify*", 
                "ec2:MonitorInstances", 
                "ec2:MoveAddressToVpc", 
                "ec2:Purchase*", 
                "ec2:RegisterImage", 
                "ec2:Release*", 
                "ec2:Replace*", 
                "ec2:ReportInstanceStatus", 
                "ec2:Request*", 
                "ec2:Reset*", 
                "ec2:RestoreAddressToClassic", 
                "ec2:RunScheduledInstances", 
                "ec2:UnassignPrivateIpAddresses", 
                "ec2:UnmonitorInstances", 
                "elasticloadbalancing:*", 
                "events:*", 
                "iam:GetAccount*", 
                "iam:GetContextKeys*", 
                "iam:GetCredentialReport", 
                "iam:ListAccountAliases", 
                "iam:ListGroups", 
                "iam:ListOpenIDConnectProviders", 
                "iam:ListPolicies", 
                "iam:ListPoliciesGrantingServiceAccess", 
                "iam:ListRoles", 
                "iam:ListSAMLProviders", 
                "iam:ListServerCertificates", 
                "iam:Simulate*", 
                "iam:UpdateServerCertificate", 
                "iam:UpdateSigningCertificate", 
                "kinesis:ListStreams", 
                "kinesis:PutRecord", 
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:Describe*", 
                "kms:GenerateRandom", 
                "kms:Get*", 
                "kms:List*", 
                "kms:Encrypt", 
                "kms:ReEncrypt*", 
                "lambda:Create*", 
                "lambda:Delete*", 
                "lambda:Get*", 
                "lambda:InvokeFunction", 
                "lambda:List*", 
                "lambda:PublishVersion", 
                "lambda:Update*", 
                "logs:*", 
                "rds:Describe*", 
                "rds:ListTagsForResource", 
                "route53:*", 
                "route53domains:*", 
                "ses:*", 
                "sns:*", 
                "sqs:*", 
                "trustedadvisor:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AcceptVpcPeeringConnection", 
                "ec2:AttachClassicLinkVpc", 
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateVpcPeeringConnection", 
                "ec2:DeleteCustomerGateway", 
                "ec2:DeleteDhcpOptions", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteNetworkAcl*", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteVolume", 
                "ec2:DeleteVpcPeeringConnection", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:DetachVolume", 
                "ec2:DisableVpcClassicLink", 
                "ec2:EnableVpcClassicLink", 
                "ec2:GetConsoleScreenshot", 
                "ec2:RebootInstances", 
                "ec2:RejectVpcPeeringConnection", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "s3:*", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetAccessKeyLastUsed", 
                "iam:GetGroup*", 
                "iam:GetInstanceProfile", 
                "iam:GetLoginProfile", 
                "iam:GetOpenIDConnectProvider", 
                "iam:GetPolicy*", 
                "iam:GetRole*", 
                "iam:GetSAMLProvider", 
                "iam:GetSSHPublicKey", 
                "iam:GetServerCertificate", 
                "iam:GetServiceLastAccessed*", 
                "iam:GetUser*", 
                "iam:ListAccessKeys", 
                "iam:ListAttached*", 
                "iam:ListEntitiesForPolicy", 
                "iam:ListGroupPolicies", 
                "iam:ListGroupsForUser", 
                "iam:ListInstanceProfiles*", 
                "iam:ListMFADevices", 
                "iam:ListPolicyVersions", 
                "iam:ListRolePolicies", 
                "iam:ListSSHPublicKeys", 
                "iam:ListSigningCertificates", 
                "iam:ListUserPolicies", 
                "iam:Upload*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:ListRoles", 
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/rds-monitoring-role", 
                "arn:aws:iam::*:role/ec2-sysadmin-*", 
                "arn:aws:iam::*:role/ecr-sysadmin-*", 
                "arn:aws:iam::*:role/lamdba-sysadmin-*", 
                "arn:aws:iam::*:role/lambda-sysadmin-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceEventsRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:RunTask"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:Get*", 
                "route53:List*", 
                "route53:TestDNSAnswer"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMigrationHubDiscoveryAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "discovery:ListConfigurations", 
                "discovery:DescribeConfigurations"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ReportsAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "ec2-reports:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceAutoscaleRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:DescribeServices", 
                "ecs:UpdateService"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncSchemaAuthor
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appsync:GraphQL", 
                "appsync:CreateResolver", 
                "appsync:CreateType", 
                "appsync:DeleteResolver", 
                "appsync:DeleteType", 
                "appsync:GetResolver", 
                "appsync:GetType", 
                "appsync:GetDataSource", 
                "appsync:GetSchemaCreationStatus", 
                "appsync:GetIntrospectionSchema", 
                "appsync:GetGraphqlApi", 
                "appsync:ListTypes", 
                "appsync:ListApiKeys", 
                "appsync:ListResolvers", 
                "appsync:ListDataSources", 
                "appsync:ListGraphqlApis", 
                "appsync:StartSchemaCreation", 
                "appsync:UpdateResolver", 
                "appsync:UpdateType"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessDeviceSetup
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:RegisterDevice", 
                "a4b:CompleteRegistration", 
                "a4b:SearchDevices"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSBatchServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeImages", 
                "ec2:DescribeImageAttribute", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSpotFleetInstances", 
                "ec2:DescribeSpotFleetRequests", 
                "ec2:DescribeSpotPriceHistory", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:RequestSpotFleet", 
                "ec2:CancelSpotFleetRequests", 
                "ec2:ModifySpotFleetRequest", 
                "ec2:TerminateInstances", 
                "autoscaling:DescribeAccountLimits", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLaunchConfigurations", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:CreateLaunchConfiguration", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:UpdateAutoScalingGroup", 
                "autoscaling:SetDesiredCapacity", 
                "autoscaling:DeleteLaunchConfiguration", 
                "autoscaling:DeleteAutoScalingGroup", 
                "autoscaling:CreateOrUpdateTags", 
                "autoscaling:SuspendProcesses", 
                "autoscaling:PutNotificationConfiguration", 
                "autoscaling:TerminateInstanceInAutoScalingGroup", 
                "ecs:DescribeClusters", 
                "ecs:DescribeContainerInstances", 
                "ecs:DescribeTaskDefinition", 
                "ecs:DescribeTasks", 
                "ecs:ListClusters", 
                "ecs:ListContainerInstances", 
                "ecs:ListTaskDefinitionFamilies", 
                "ecs:ListTaskDefinitions", 
                "ecs:ListTasks", 
                "ecs:CreateCluster", 
                "ecs:DeleteCluster", 
                "ecs:RegisterTaskDefinition", 
                "ecs:DeregisterTaskDefinition", 
                "ecs:RunTask", 
                "ecs:StartTask", 
                "ecs:StopTask", 
                "ecs:UpdateContainerAgent", 
                "ecs:DeregisterContainerInstance", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogGroups", 
                "iam:GetInstanceProfile", 
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ecs-tasks.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": [
                        "spot.amazonaws.com", 
                        "spotfleet.amazonaws.com", 
                        "autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AWSElasticBeanstalkWebTier
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:Get*", 
                "s3:List*", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "BucketAccess"
        }, 
        {
            "Action": [
                "xray:PutTraceSegments", 
                "xray:PutTelemetryRecords"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "XRayAccess"
        }, 
        {
            "Action": [
                "logs:PutLogEvents", 
                "logs:CreateLogStream", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudWatchLogsAccess"
        }
    ]
}
Policy Name: AmazonSQSReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sqs:GetQueueAttributes", 
                "sqs:ListQueues"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMobileHub_ServiceUseOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateUploadBucket", 
                "cloudformation:ListStacks", 
                "cloudformation:ValidateTemplate", 
                "cloudfront:CreateDistribution", 
                "cloudfront:DeleteDistribution", 
                "cloudfront:GetDistribution", 
                "cloudfront:GetDistributionConfig", 
                "cloudfront:TagResource", 
                "cloudfront:UpdateDistribution", 
                "cognito-identity:CreateIdentityPool", 
                "cognito-identity:UpdateIdentityPool", 
                "cognito-identity:DeleteIdentityPool", 
                "cognito-identity:SetIdentityPoolRoles", 
                "cognito-idp:CreateUserPool", 
                "dynamodb:CreateTable", 
                "dynamodb:DeleteTable", 
                "dynamodb:DescribeTable", 
                "dynamodb:TagResource", 
                "dynamodb:UpdateTable", 
                "iam:AddClientIDToOpenIDConnectProvider", 
                "iam:CreateOpenIDConnectProvider", 
                "iam:GetOpenIDConnectProvider", 
                "iam:ListOpenIDConnectProviders", 
                "iam:CreateSAMLProvider", 
                "iam:GetSAMLProvider", 
                "iam:ListSAMLProvider", 
                "iam:UpdateSAMLProvider", 
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:GetFunction", 
                "mobileanalytics:CreateApp", 
                "mobileanalytics:DeleteApp", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListPlatformApplications", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "lex:PutIntent", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:PutSlotType", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:PutBot", 
                "lex:GetBot", 
                "lex:GetBots", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:CreatePlatformApplication", 
                "sns:DeletePlatformApplication", 
                "sns:GetPlatformApplicationAttributes", 
                "sns:SetPlatformApplicationAttributes"
            ], 
            "Resource": [
                "arn:aws:sns:*:*:app/*_MOBILEHUB_*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteBucketPolicy", 
                "s3:DeleteBucketWebsite", 
                "s3:ListBucket", 
                "s3:ListBucketVersions", 
                "s3:GetBucketLocation", 
                "s3:GetBucketVersioning", 
                "s3:PutBucketVersioning", 
                "s3:PutBucketWebsite", 
                "s3:PutBucketPolicy", 
                "s3:PutBucketTagging", 
                "s3:PutBucketCORS", 
                "s3:SetBucketCrossOriginConfiguration"
            ], 
            "Resource": [
                "arn:aws:s3:::*-userfiles-mobilehub-*", 
                "arn:aws:s3:::*-contentdelivery-mobilehub-*", 
                "arn:aws:s3:::*-hosting-mobilehub-*", 
                "arn:aws:s3:::*-deployments-mobilehub-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:DeleteObject", 
                "s3:DeleteVersion", 
                "s3:DeleteObjectVersion", 
                "s3:GetObject", 
                "s3:GetObjectVersion", 
                "s3:PutObject", 
                "s3:PutObjectAcl"
            ], 
            "Resource": [
                "arn:aws:s3:::*-userfiles-mobilehub-*/*", 
                "arn:aws:s3:::*-contentdelivery-mobilehub-*/*", 
                "arn:aws:s3:::*-hosting-mobilehub-*/*", 
                "arn:aws:s3:::*-deployments-mobilehub-*/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:AddPermission", 
                "lambda:CreateAlias", 
                "lambda:DeleteAlias", 
                "lambda:UpdateAlias", 
                "lambda:GetFunctionConfiguration", 
                "lambda:GetPolicy", 
                "lambda:RemovePermission", 
                "lambda:UpdateFunctionCode", 
                "lambda:UpdateFunctionConfiguration"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:*-mobilehub-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateRole", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListRolePolicies", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:UpdateAssumeRolePolicy", 
                "iam:AttachRolePolicy", 
                "iam:DetachRolePolicy"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/*_unauth_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_auth_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_consolepush_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_lambdaexecutionrole_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_smsverification_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_botexecutionrole_MOBILEHUB_*", 
                "arn:aws:iam::*:role/pinpoint-events", 
                "arn:aws:iam::*:role/service-role/pinpoint-events", 
                "arn:aws:iam::*:role/MOBILEHUB-*-lambdaexecution*", 
                "arn:aws:iam::*:role/MobileHub_Service_Role"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole", 
                "iam:GetRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/mobilehub/*:log-stream:*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListAttachedRolePolicies"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/MobileHub_Service_Role"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStacks", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStackResource", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStackResources", 
                "cloudformation:UpdateStack"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/MOBILEHUB-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "apigateway:DELETE", 
                "apigateway:GET", 
                "apigateway:HEAD", 
                "apigateway:OPTIONS", 
                "apigateway:PATCH", 
                "apigateway:POST", 
                "apigateway:PUT"
            ], 
            "Resource": [
                "arn:aws:apigateway:*::/restapis*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "apigateway:GET", 
                "apigateway:HEAD", 
                "apigateway:OPTIONS"
            ], 
            "Resource": [
                "arn:aws:apigateway:*::/domainnames*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cognito-idp:DeleteUserPool", 
                "cognito-idp:DescribeUserPool", 
                "cognito-idp:CreateUserPoolClient", 
                "cognito-idp:DescribeUserPoolClient", 
                "cognito-idp:DeleteUserPoolClient"
            ], 
            "Resource": [
                "arn:aws:cognito-idp:*:*:userpool/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mobiletargeting:UpdateApnsChannel", 
                "mobiletargeting:UpdateApnsSandboxChannel", 
                "mobiletargeting:UpdateEmailChannel", 
                "mobiletargeting:UpdateGcmChannel", 
                "mobiletargeting:UpdateSmsChannel", 
                "mobiletargeting:DeleteApnsChannel", 
                "mobiletargeting:DeleteApnsSandboxChannel", 
                "mobiletargeting:DeleteEmailChannel", 
                "mobiletargeting:DeleteGcmChannel", 
                "mobiletargeting:DeleteSmsChannel"
            ], 
            "Resource": [
                "arn:aws:mobiletargeting:*:*:apps/*/channels/*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonChimeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "chime:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticLoadBalancingClassicServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAddresses", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:AttachNetworkInterface", 
                "ec2:DetachNetworkInterface", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssignIpv6Addresses", 
                "ec2:UnassignIpv6Addresses"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMigrationHubDMSAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:CreateProgressUpdateStream"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:AssociateCreatedArtifact", 
                "mgh:DescribeMigrationTask", 
                "mgh:DisassociateCreatedArtifact", 
                "mgh:ImportMigrationTask", 
                "mgh:ListCreatedArtifacts", 
                "mgh:NotifyMigrationTaskState", 
                "mgh:PutResourceAttributes", 
                "mgh:NotifyApplicationState", 
                "mgh:DescribeApplicationState", 
                "mgh:AssociateDiscoveredResource", 
                "mgh:DisassociateDiscoveredResource", 
                "mgh:ListDiscoveredResources"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:ListMigrationTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "kinesis:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGuardDutyReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "guardduty:GetDetector", 
                "guardduty:ListDetectors", 
                "guardduty:GetIPSet", 
                "guardduty:ListIPSets", 
                "guardduty:GetThreatIntelSet", 
                "guardduty:ListThreatIntelSets", 
                "guardduty:GetFindings", 
                "guardduty:GetFindingsStatistics", 
                "guardduty:ListFindings", 
                "guardduty:GetMembers", 
                "guardduty:ListMembers", 
                "guardduty:GetMasterAccount", 
                "guardduty:ListInvitations", 
                "guardduty:GetInvitationsCount"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowAllUsersToViewAndManageThisGroup"
        }
    ]
}
Policy Name: AmazonECSServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AttachNetworkInterface", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:Describe*", 
                "ec2:DetachNetworkInterface", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DeregisterTargets", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:RegisterTargets", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateHealthCheck", 
                "route53:DeleteHealthCheck", 
                "route53:Get*", 
                "route53:List*", 
                "route53:UpdateHealthCheck", 
                "servicediscovery:DeregisterInstance", 
                "servicediscovery:Get*", 
                "servicediscovery:List*", 
                "servicediscovery:RegisterInstance", 
                "servicediscovery:UpdateInstanceCustomHealthStatus"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:Describe*", 
                "machinelearning:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRekognitionFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rekognition:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: RDSCloudHsmAuthorizationRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudhsm:CreateLunaClient", 
                "cloudhsm:GetClientConfiguration", 
                "cloudhsm:DeleteLunaClient", 
                "cloudhsm:DescribeLunaClient", 
                "cloudhsm:ModifyLunaClient", 
                "cloudhsm:DescribeHapg", 
                "cloudhsm:ModifyHapg", 
                "cloudhsm:GetConfig"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AdministratorAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningRealTimePredictionOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:Predict"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncPushToCloudWatchLogs
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMigrationHubSMSAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:CreateProgressUpdateStream"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:AssociateCreatedArtifact", 
                "mgh:DescribeMigrationTask", 
                "mgh:DisassociateCreatedArtifact", 
                "mgh:ImportMigrationTask", 
                "mgh:ListCreatedArtifacts", 
                "mgh:NotifyMigrationTaskState", 
                "mgh:PutResourceAttributes", 
                "mgh:NotifyApplicationState", 
                "mgh:DescribeApplicationState", 
                "mgh:AssociateDiscoveredResource", 
                "mgh:DisassociateDiscoveredResource", 
                "mgh:ListDiscoveredResources"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:ListMigrationTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigUserAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "config:Get*", 
                "config:Describe*", 
                "config:Deliver*", 
                "config:List*", 
                "tag:GetResources", 
                "tag:GetTagKeys", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:LookupEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTConfigAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:AcceptCertificateTransfer", 
                "iot:AddThingToThingGroup", 
                "iot:AssociateTargetsWithJob", 
                "iot:AttachPolicy", 
                "iot:AttachPrincipalPolicy", 
                "iot:AttachThingPrincipal", 
                "iot:CancelCertificateTransfer", 
                "iot:CancelJob", 
                "iot:ClearDefaultAuthorizer", 
                "iot:CreateAuthorizer", 
                "iot:CreateCertificateFromCsr", 
                "iot:CreateJob", 
                "iot:CreateKeysAndCertificate", 
                "iot:CreateOTAUpdate", 
                "iot:CreatePolicy", 
                "iot:CreatePolicyVersion", 
                "iot:CreateRoleAlias", 
                "iot:CreateStream", 
                "iot:CreateThing", 
                "iot:CreateThingGroup", 
                "iot:CreateThingType", 
                "iot:CreateTopicRule", 
                "iot:DeleteAuthorizer", 
                "iot:DeleteCACertificate", 
                "iot:DeleteCertificate", 
                "iot:DeleteOTAUpdate", 
                "iot:DeletePolicy", 
                "iot:DeletePolicyVersion", 
                "iot:DeleteRegistrationCode", 
                "iot:DeleteRoleAlias", 
                "iot:DeleteStream", 
                "iot:DeleteThing", 
                "iot:DeleteThingGroup", 
                "iot:DeleteThingType", 
                "iot:DeleteTopicRule", 
                "iot:DeleteV2LoggingLevel", 
                "iot:DeprecateThingType", 
                "iot:DescribeAuthorizer", 
                "iot:DescribeCACertificate", 
                "iot:DescribeCertificate", 
                "iot:DescribeCertificateTag", 
                "iot:DescribeDefaultAuthorizer", 
                "iot:DescribeEndpoint", 
                "iot:DescribeEventConfigurations", 
                "iot:DescribeIndex", 
                "iot:DescribeJob", 
                "iot:DescribeJobExecution", 
                "iot:DescribeRoleAlias", 
                "iot:DescribeStream", 
                "iot:DescribeThing", 
                "iot:DescribeThingGroup", 
                "iot:DescribeThingRegistrationTask", 
                "iot:DescribeThingType", 
                "iot:DetachPolicy", 
                "iot:DetachPrincipalPolicy", 
                "iot:DetachThingPrincipal", 
                "iot:DisableTopicRule", 
                "iot:EnableTopicRule", 
                "iot:GetEffectivePolicies", 
                "iot:GetIndexingConfiguration", 
                "iot:GetJobDocument", 
                "iot:GetLoggingOptions", 
                "iot:GetOTAUpdate", 
                "iot:GetPolicy", 
                "iot:GetPolicyVersion", 
                "iot:GetRegistrationCode", 
                "iot:GetTopicRule", 
                "iot:GetV2LoggingOptions", 
                "iot:ListAttachedPolicies", 
                "iot:ListAuthorizers", 
                "iot:ListCACertificates", 
                "iot:ListCertificates", 
                "iot:ListCertificatesByCA", 
                "iot:ListIndices", 
                "iot:ListJobExecutionsForJob", 
                "iot:ListJobExecutionsForThing", 
                "iot:ListJobs", 
                "iot:ListOTAUpdates", 
                "iot:ListOutgoingCertificates", 
                "iot:ListPolicies", 
                "iot:ListPolicyPrincipals", 
                "iot:ListPolicyVersions", 
                "iot:ListPrincipalPolicies", 
                "iot:ListPrincipalThings", 
                "iot:ListRoleAliases", 
                "iot:ListStreams", 
                "iot:ListTargetsForPolicy", 
                "iot:ListThingGroups", 
                "iot:ListThingGroupsForThing", 
                "iot:ListThingPrincipals", 
                "iot:ListThingRegistrationTaskReports", 
                "iot:ListThingRegistrationTasks", 
                "iot:ListThings", 
                "iot:ListThingsInThingGroup", 
                "iot:ListThingTypes", 
                "iot:ListTopicRules", 
                "iot:ListV2LoggingLevels", 
                "iot:RegisterCACertificate", 
                "iot:RegisterCertificate", 
                "iot:RegisterThing", 
                "iot:RejectCertificateTransfer", 
                "iot:RemoveThingFromThingGroup", 
                "iot:ReplaceTopicRule", 
                "iot:SearchIndex", 
                "iot:SetDefaultAuthorizer", 
                "iot:SetDefaultPolicyVersion", 
                "iot:SetLoggingOptions", 
                "iot:SetV2LoggingLevel", 
                "iot:SetV2LoggingOptions", 
                "iot:StartThingRegistrationTask", 
                "iot:StopThingRegistrationTask", 
                "iot:TestAuthorization", 
                "iot:TestInvokeAuthorizer", 
                "iot:TransferCertificate", 
                "iot:UpdateAuthorizer", 
                "iot:UpdateCACertificate", 
                "iot:UpdateCertificate", 
                "iot:UpdateCertificateTag", 
                "iot:UpdateEventConfigurations", 
                "iot:UpdateIndexingConfiguration", 
                "iot:UpdateRoleAlias", 
                "iot:UpdateStream", 
                "iot:UpdateThing", 
                "iot:UpdateThingGroup", 
                "iot:UpdateThingGroupsForThing"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: SecurityAudit
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:DescribeCertificate", 
                "acm:ListCertificates", 
                "autoscaling:Describe*", 
                "batch:DescribeComputeEnvironments", 
                "batch:DescribeJobDefinitions", 
                "clouddirectory:ListDirectories", 
                "cloudformation:DescribeStack*", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStack*", 
                "cloudformation:GetStackPolicy", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "cloudhsm:ListHapgs", 
                "cloudhsm:ListHsms", 
                "cloudhsm:ListLunaClients", 
                "cloudsearch:DescribeDomains", 
                "cloudsearch:DescribeServiceAccessPolicies", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:ListTags", 
                "cloudwatch:Describe*", 
                "codebuild:ListProjects", 
                "codecommit:BatchGetRepositories", 
                "codecommit:GetBranch", 
                "codecommit:GetObjectIdentifier", 
                "codecommit:GetRepository", 
                "codecommit:List*", 
                "codedeploy:Batch*", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codepipeline:ListPipelines", 
                "cognito-identity:ListIdentityPools", 
                "cognito-idp:ListUserPools", 
                "config:Deliver*", 
                "config:Describe*", 
                "config:Get*", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:EvaluateExpression", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:QueryObjects", 
                "datapipeline:ValidatePipelineDefinition", 
                "directconnect:Describe*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListStreams", 
                "dynamodb:ListTables", 
                "ec2:Describe*", 
                "ecr:DescribeRepositories", 
                "ecr:GetRepositoryPolicy", 
                "ecs:Describe*", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:Describe*", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticloadbalancing:Describe*", 
                "elasticmapreduce:DescribeJobFlows", 
                "elasticmapreduce:ListClusters", 
                "elasticmapreduce:ListInstances", 
                "es:Describe*", 
                "es:ListDomainNames", 
                "events:DescribeEventBus", 
                "events:ListRules", 
                "firehose:Describe*", 
                "firehose:List*", 
                "gamelift:ListBuilds", 
                "gamelift:ListFleets", 
                "glacier:DescribeVault", 
                "glacier:GetVaultAccessPolicy", 
                "glacier:ListVaults", 
                "iam:GenerateCredentialReport", 
                "iam:Get*", 
                "iam:List*", 
                "iot:ListThings", 
                "kinesis:ListStreams", 
                "kinesisanalytics:ListApplications", 
                "kms:Describe*", 
                "kms:Get*", 
                "kms:List*", 
                "lambda:GetAccountSettings", 
                "lambda:GetPolicy", 
                "lambda:ListFunctions", 
                "logs:DescribeDestinations", 
                "logs:DescribeLogGroups", 
                "logs:DescribeMetricFilters", 
                "logs:DescribeResourcePolicies", 
                "machinelearning:DescribeMLModels", 
                "mediastore:GetContainerPolicy", 
                "mediastore:ListContainers", 
                "opsworks-cm:DescribeServers", 
                "rds:Describe*", 
                "rds:DownloadDBLogFilePortion", 
                "rds:ListTagsForResource", 
                "redshift:Describe*", 
                "route53:Get*", 
                "route53:List*", 
                "route53domains:GetDomainDetail", 
                "route53domains:GetOperationDetail", 
                "route53domains:ListDomains", 
                "route53domains:ListOperations", 
                "route53domains:ListTagsForDomain", 
                "s3:GetAccelerateConfiguration", 
                "s3:GetAnalyticsConfiguration", 
                "s3:GetBucket*", 
                "s3:GetEncryptionConfiguration", 
                "s3:GetInventoryConfiguration", 
                "s3:GetLifecycleConfiguration", 
                "s3:GetMetricsConfiguration", 
                "s3:GetObjectAcl", 
                "s3:GetObjectVersionAcl", 
                "s3:GetReplicationConfiguration", 
                "s3:ListAllMyBuckets", 
                "sdb:DomainMetadata", 
                "sdb:ListDomains", 
                "serverlessrepo:GetApplicationPolicy", 
                "serverlessrepo:ListApplications", 
                "ses:GetIdentityDkimAttributes", 
                "ses:GetIdentityVerificationAttributes", 
                "ses:ListIdentities", 
                "snowball:ListClusters", 
                "snowball:ListJobs", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sqs:GetQueueAttributes", 
                "sqs:ListQueues", 
                "ssm:DescribeDocumentPermission", 
                "ssm:ListDocuments", 
                "states:ListStateMachines", 
                "storagegateway:DescribeBandwidthRateLimit", 
                "storagegateway:DescribeCache", 
                "storagegateway:DescribeCachediSCSIVolumes", 
                "storagegateway:DescribeGatewayInformation", 
                "storagegateway:DescribeMaintenanceStartTime", 
                "storagegateway:DescribeNFSFileShares", 
                "storagegateway:DescribeSnapshotSchedule", 
                "storagegateway:DescribeStorediSCSIVolumes", 
                "storagegateway:DescribeTapeArchives", 
                "storagegateway:DescribeTapeRecoveryPoints", 
                "storagegateway:DescribeTapes", 
                "storagegateway:DescribeUploadBuffer", 
                "storagegateway:DescribeVTLDevices", 
                "storagegateway:DescribeWorkingStorage", 
                "storagegateway:List*", 
                "tag:GetResources", 
                "tag:GetTagKeys", 
                "trustedadvisor:Describe*", 
                "waf:ListWebACLs", 
                "waf-regional:ListWebACLs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSResourceGroupsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "resource-groups:Describe*", 
                "resource-groups:Get*", 
                "resource-groups:List*", 
                "resource-groups:Search*", 
                "tag:Get*", 
                "cloudformation:DescribeStacks", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeVolumes", 
                "ec2:DescribeVpcs", 
                "elasticache:DescribeCacheClusters", 
                "elasticache:DescribeSnapshots", 
                "elasticache:ListTagsForResource", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticmapreduce:DescribeCluster", 
                "elasticmapreduce:ListClusters", 
                "glacier:ListVaults", 
                "glacier:DescribeVault", 
                "glacier:ListTagsForVault", 
                "kinesis:ListStreams", 
                "kinesis:DescribeStream", 
                "kinesis:ListTagsForStream", 
                "opsworks:DescribeStacks", 
                "opsworks:ListTags", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSnapshots", 
                "rds:ListTagsForResource", 
                "redshift:DescribeClusters", 
                "redshift:DescribeTags", 
                "route53domains:ListDomains", 
                "route53:ListHealthChecks", 
                "route53:GetHealthCheck", 
                "route53:ListHostedZones", 
                "route53:GetHostedZone", 
                "route53:ListTagsForResource", 
                "storagegateway:ListGateways", 
                "storagegateway:DescribeGatewayInformation", 
                "storagegateway:ListTagsForResource", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketTagging", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTags", 
                "ssm:ListDocuments"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeStarFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codestar:*", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "cloud9:DescribeEnvironment*", 
                "cloud9:ValidateEnvironmentName"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CodeStarEC2"
        }, 
        {
            "Action": [
                "cloudformation:DescribeStack*", 
                "cloudformation:GetTemplateSummary"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awscodestar-*"
            ], 
            "Effect": "Allow", 
            "Sid": "CodeStarCF"
        }
    ]
}
Policy Name: AmazonSSMServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:CancelCommand", 
                "ssm:GetCommandInvocation", 
                "ssm:ListCommandInvocations", 
                "ssm:ListCommands", 
                "ssm:SendCommand"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "resource-groups:ListGroups", 
                "resource-groups:ListGroupResources"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "tag:GetResources"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDataPipeline_FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:List*", 
                "dynamodb:DescribeTable", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "sns:ListTopics", 
                "sns:Subscribe", 
                "iam:ListRoles", 
                "iam:GetRolePolicy", 
                "iam:GetInstanceProfile", 
                "iam:ListInstanceProfiles", 
                "datapipeline:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultRole"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDynamoDBReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "cloudwatch:DescribeAlarmHistory", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:QueryObjects", 
                "dynamodb:BatchGetItem", 
                "dynamodb:DescribeTable", 
                "dynamodb:GetItem", 
                "dynamodb:ListTables", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "dynamodb:DescribeReservedCapacity", 
                "dynamodb:DescribeReservedCapacityOfferings", 
                "dynamodb:ListTagsOfResource", 
                "dynamodb:DescribeTimeToLive", 
                "dynamodb:DescribeLimits", 
                "dynamodb:ListGlobalTables", 
                "dynamodb:DescribeGlobalTable", 
                "dynamodb:DescribeBackup", 
                "dynamodb:ListBackups", 
                "dynamodb:DescribeContinuousBackups", 
                "dax:Describe*", 
                "dax:List*", 
                "dax:GetItem", 
                "dax:BatchGetItem", 
                "dax:Query", 
                "dax:Scan", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "iam:GetRole", 
                "iam:ListRoles", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "lambda:ListFunctions", 
                "lambda:ListEventSourceMappings", 
                "lambda:GetFunctionConfiguration"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingConsoleFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateKeyPair", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeLaunchTemplateVersions", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:ImportKeyPair"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:ListMetrics", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:ListSubscriptions", 
                "sns:ListTopics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:ListRoles", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "autoscaling.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSElementalMediaPackageFullAccess
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": "mediapackage:*", 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AmazonKinesisVideoStreamsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "kinesisvideo:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSNSReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:GetTopicAttributes", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSEC2SpotServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonElasticMapReduceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackEvents", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateRoute", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DeleteRoute", 
                "ec2:DeleteTags", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSpotPriceHistory", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeNetworkAcls", 
                "ec2:CreateVpcEndpoint", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RunInstances", 
                "ec2:TerminateInstances", 
                "elasticmapreduce:*", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "kms:List*", 
                "s3:*", 
                "sdb:*", 
                "support:CreateCase", 
                "support:DescribeServices", 
                "support:DescribeSeverityLevels"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "elasticmapreduce.amazonaws.com", 
                        "elasticmapreduce.amazonaws.com.cn"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonS3ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:Get*", 
                "s3:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticbeanstalk:*", 
                "ec2:*", 
                "ecs:*", 
                "ecr:*", 
                "elasticloadbalancing:*", 
                "autoscaling:*", 
                "cloudwatch:*", 
                "s3:*", 
                "sns:*", 
                "cloudformation:*", 
                "dynamodb:*", 
                "rds:*", 
                "sqs:*", 
                "logs:*", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:PassRole", 
                "iam:ListRolePolicies", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:ListServerCertificates", 
                "acm:DescribeCertificate", 
                "acm:ListCertificates", 
                "codebuild:CreateProject", 
                "codebuild:DeleteProject", 
                "codebuild:BatchGetBuilds", 
                "codebuild:StartBuild"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:AddRoleToInstanceProfile", 
                "iam:CreateInstanceProfile", 
                "iam:CreateRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-elasticbeanstalk*", 
                "arn:aws:iam::*:instance-profile/aws-elasticbeanstalk*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "autoscaling.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "elasticbeanstalk.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:AttachRolePolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PolicyArn": [
                        "arn:aws:iam::aws:policy/AWSElasticBeanstalk*", 
                        "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalk*"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonWorkSpacesAdmin
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "workspaces:CreateWorkspaces", 
                "workspaces:DescribeWorkspaces", 
                "workspaces:RebootWorkspaces", 
                "workspaces:RebuildWorkspaces", 
                "workspaces:TerminateWorkspaces", 
                "workspaces:DescribeWorkspaceDirectories", 
                "workspaces:DescribeWorkspaceBundles", 
                "workspaces:ModifyWorkspaceProperties", 
                "workspaces:StopWorkspaces", 
                "workspaces:StartWorkspaces", 
                "workspaces:DescribeWorkspacesConnectionStatus", 
                "workspaces:CreateTags", 
                "workspaces:DeleteTags", 
                "workspaces:DescribeTags", 
                "kms:ListKeys", 
                "kms:ListAliases", 
                "kms:DescribeKey"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:CompleteLifecycleAction", 
                "autoscaling:DeleteLifecycleHook", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLifecycleHooks", 
                "autoscaling:PutLifecycleHook", 
                "autoscaling:RecordLifecycleActionHeartbeat", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:UpdateAutoScalingGroup", 
                "autoscaling:EnableMetricsCollection", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribePolicies", 
                "autoscaling:DescribeScheduledActions", 
                "autoscaling:DescribeNotificationConfigurations", 
                "autoscaling:DescribeLifecycleHooks", 
                "autoscaling:SuspendProcesses", 
                "autoscaling:ResumeProcesses", 
                "autoscaling:AttachLoadBalancers", 
                "autoscaling:PutScalingPolicy", 
                "autoscaling:PutScheduledUpdateGroupAction", 
                "autoscaling:PutNotificationConfiguration", 
                "autoscaling:PutLifecycleHook", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:DeleteAutoScalingGroup", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:TerminateInstances", 
                "tag:GetTags", 
                "tag:GetResources", 
                "sns:Publish", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticloadbalancing:RegisterTargets", 
                "elasticloadbalancing:DeregisterTargets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSESFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ses:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchLogsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:Describe*", 
                "logs:Get*", 
                "logs:List*", 
                "logs:TestMetricFilter", 
                "logs:FilterLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisFirehoseReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "firehose:Describe*", 
                "firehose:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksRegisterCLI
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "opsworks:AssignInstance", 
                "opsworks:CreateStack", 
                "opsworks:CreateLayer", 
                "opsworks:DeregisterInstance", 
                "opsworks:DescribeInstances", 
                "opsworks:DescribeStackProvisioningParameters", 
                "opsworks:DescribeStacks", 
                "opsworks:UnassignInstance"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:AddUserToGroup", 
                "iam:CreateAccessKey", 
                "iam:CreateGroup", 
                "iam:CreateUser", 
                "iam:ListInstanceProfiles", 
                "iam:PassRole", 
                "iam:PutUserPolicy"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDynamoDBFullAccesswithDataPipeline
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarmHistory", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics", 
                "cloudwatch:PutMetricAlarm", 
                "dynamodb:*", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sns:SetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "DDBConsole"
        }, 
        {
            "Action": [
                "lambda:*", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "DDBConsoleTriggers"
        }, 
        {
            "Action": [
                "datapipeline:*", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "DDBConsoleImportExport"
        }, 
        {
            "Action": [
                "iam:GetRolePolicy", 
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "IAMEDPRoles"
        }, 
        {
            "Action": [
                "ec2:CreateTags", 
                "ec2:DescribeInstances", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "elasticmapreduce:*", 
                "datapipeline:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "EMR"
        }, 
        {
            "Action": [
                "s3:DeleteObject", 
                "s3:Get*", 
                "s3:List*", 
                "s3:Put*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "S3"
        }
    ]
}
Policy Name: AmazonEC2RoleforDataPipelineRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "datapipeline:*", 
                "dynamodb:*", 
                "ec2:Describe*", 
                "elasticmapreduce:AddJobFlowSteps", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:ListInstance*", 
                "elasticmapreduce:ModifyInstanceGroups", 
                "rds:Describe*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "s3:*", 
                "sdb:*", 
                "sns:*", 
                "sqs:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchLogsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElementalMediaPackageReadOnly
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "mediapackage:List*", 
            "mediapackage:Describe*"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AWSElasticBeanstalkMulticontainerDocker
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:Poll", 
                "ecs:StartTask", 
                "ecs:StopTask", 
                "ecs:DiscoverPollEndpoint", 
                "ecs:StartTelemetrySession", 
                "ecs:RegisterContainerInstance", 
                "ecs:DeregisterContainerInstance", 
                "ecs:DescribeContainerInstances", 
                "ecs:Submit*", 
                "ecs:DescribeTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ECSAccess"
        }
    ]
}
Policy Name: AWSMigrationHubFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:*", 
                "discovery:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elastictranscoder:*", 
                "cloudfront:*", 
                "s3:List*", 
                "s3:Put*", 
                "s3:Get*", 
                "s3:*MultipartUpload*", 
                "iam:CreateRole", 
                "iam:GetRolePolicy", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:List*", 
                "sns:CreateTopic", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: IAMUserChangePassword
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:ChangePassword"
            ], 
            "Resource": [
                "arn:aws:iam::*:user/${aws:username}"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetAccountPasswordPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAPIGatewayAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "apigateway:*"
            ], 
            "Resource": "arn:aws:apigateway:*::/*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonVPCCrossAccountNetworkInterfaceOperations
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeRouteTables", 
                "ec2:CreateRoute", 
                "ec2:DeleteRoute", 
                "ec2:ReplaceRoute"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeNetworkInterfaces", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AssignPrivateIpAddresses", 
                "ec2:UnassignPrivateIpAddresses"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ServiceCatalogEndUserAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "catalog-user:*", 
                "s3:GetObject", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:SearchProducts"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:DescribeProvisionedProduct", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ScanProvisionedProducts"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "servicecatalog:userLevel": "self"
                }
            }
        }
    ]
}
Policy Name: AmazonMacieSetupRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetEventSelectors", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:ListTags", 
                "cloudtrail:LookupEvents", 
                "iam:ListAccountAliases", 
                "s3:GetBucket*", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudtrail:CreateTrail", 
                "cloudtrail:StartLogging", 
                "cloudtrail:StopLogging", 
                "cloudtrail:UpdateTrail", 
                "cloudtrail:DeleteTrail", 
                "cloudtrail:PutEventSelectors"
            ], 
            "Resource": "arn:aws:cloudtrail:*:*:trail/AWSMacieTrail-DO-NOT-EDIT", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteBucketPolicy", 
                "s3:DeleteBucketWebsite", 
                "s3:DeleteObject", 
                "s3:DeleteObjectTagging", 
                "s3:DeleteObjectVersion", 
                "s3:DeleteObjectVersionTagging", 
                "s3:DeleteReplicationConfiguration", 
                "s3:PutBucketPolicy"
            ], 
            "Resource": [
                "arn:aws:s3:::awsmacie-*", 
                "arn:aws:s3:::awsmacietrail-*", 
                "arn:aws:s3:::*-awsmacietrail-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonPollyReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "polly:DescribeVoices", 
                "polly:GetLexicon", 
                "polly:ListLexicons", 
                "polly:SynthesizeSpeech"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsWriteOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "mobileanalytics:PutEvents", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2SpotFleetTaggingRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:CreateTags"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterTargets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DataScientist
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:*", 
                "cloudwatch:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackEvents", 
                "datapipeline:Describe*", 
                "datapipeline:ListPipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:QueryObjects", 
                "dynamodb:*", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CancelSpotFleetRequests", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:Describe*", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:ModifySpotFleetRequest", 
                "ec2:RequestSpotInstances", 
                "ec2:RequestSpotFleet", 
                "elasticfilesystem:*", 
                "elasticmapreduce:*", 
                "es:*", 
                "firehose:*", 
                "iam:GetInstanceProfile", 
                "iam:GetRole", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:ListRoles", 
                "kinesis:*", 
                "kms:List*", 
                "lambda:Create*", 
                "lambda:Delete*", 
                "lambda:Get*", 
                "lambda:InvokeFunction", 
                "lambda:PublishVersion", 
                "lambda:Update*", 
                "lambda:List*", 
                "machinelearning:*", 
                "sdb:*", 
                "rds:*", 
                "sns:ListSubscriptions", 
                "sns:ListTopics", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents", 
                "redshift:*", 
                "s3:CreateBucket", 
                "sns:CreateTopic", 
                "sns:Get*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:Abort*", 
                "s3:DeleteObject", 
                "s3:Get*", 
                "s3:List*", 
                "s3:PutAccelerateConfiguration", 
                "s3:PutBucketLogging", 
                "s3:PutBucketNotification", 
                "s3:PutBucketTagging", 
                "s3:PutObject", 
                "s3:Replicate*", 
                "s3:RestoreObject"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:RunInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/DataPipelineDefaultRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole", 
                "arn:aws:iam::*:role/EMR_EC2_DefaultRole", 
                "arn:aws:iam::*:role/EMR_DefaultRole", 
                "arn:aws:iam::*:role/kinesis-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceMeteringFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:MeterUsage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksCMServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteObject", 
                "s3:DeleteBucket", 
                "s3:GetObject", 
                "s3:HeadBucket", 
                "s3:ListBucket", 
                "s3:ListObjects", 
                "s3:PutBucketPolicy"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:DescribeInstanceInformation", 
                "ssm:GetCommandInvocation", 
                "ssm:ListCommandInvocations", 
                "ssm:ListCommands"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:SendCommand"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ssm:resourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
                }
            }
        }, 
        {
            "Action": [
                "ssm:SendCommand"
            ], 
            "Resource": [
                "arn:aws:ssm:*::document/*", 
                "arn:aws:s3:::aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AllocateAddress", 
                "ec2:AssociateAddress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateImage", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeregisterImage", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DisassociateAddress", 
                "ec2:ReleaseAddress", 
                "ec2:RunInstances", 
                "ec2:StopInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
                }
            }
        }, 
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:UpdateStack"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-opsworks-cm-*", 
                "arn:aws:iam::*:role/service-role/aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConnector
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "iam:GetUser", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteObject", 
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:PutObject", 
                "s3:PutObjectAcl", 
                "s3:AbortMultipartUpload", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts"
            ], 
            "Resource": "arn:aws:s3:::import-to-ec2-*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CancelConversionTask", 
                "ec2:CancelExportTask", 
                "ec2:CreateImage", 
                "ec2:CreateInstanceExportTask", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:DeleteTags", 
                "ec2:DeleteVolume", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeRegions", 
                "ec2:DescribeTags", 
                "ec2:DetachVolume", 
                "ec2:ImportInstance", 
                "ec2:ImportVolume", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:ImportImage", 
                "ec2:DescribeImportImageTasks", 
                "ec2:DeregisterImage", 
                "ec2:DescribeSnapshots", 
                "ec2:DeleteSnapshot", 
                "ec2:CancelImportTask", 
                "ec2:ImportSnapshot", 
                "ec2:DescribeImportSnapshotTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "SNS:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSBatchFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "batch:*", 
                "cloudwatch:GetMetricStatistics", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeKeyPairs", 
                "ecs:DescribeClusters", 
                "ecs:Describe*", 
                "ecs:List*", 
                "logs:Describe*", 
                "logs:Get*", 
                "logs:TestMetricFilter", 
                "logs:FilterLogEvents", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/AWSBatchServiceRole", 
                "arn:aws:iam::*:role/service-role/AWSBatchServiceRole", 
                "arn:aws:iam::*:role/ecsInstanceRole", 
                "arn:aws:iam::*:role/iaws-ec2-spot-fleet-role", 
                "arn:aws:iam::*:role/aws-ec2-spot-fleet-role", 
                "arn:aws:iam::*:role/AWSBatchJobRole*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonECS_FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget", 
                "autoscaling:UpdateAutoScalingGroup", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:CreateLaunchConfiguration", 
                "autoscaling:DeleteAutoScalingGroup", 
                "autoscaling:DeleteLaunchConfiguration", 
                "autoscaling:Describe*", 
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStack*", 
                "cloudformation:UpdateStack", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm", 
                "ec2:AssociateRouteTable", 
                "ec2:AttachInternetGateway", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CancelSpotFleetRequests", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateVpc", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteVpc", 
                "ec2:Describe*", 
                "ec2:DetachInternetGateway", 
                "ec2:DisassociateRouteTable", 
                "ec2:ModifySubnetAttribute", 
                "ec2:ModifyVpcAttribute", 
                "ec2:RequestSpotFleet", 
                "elasticloadbalancing:CreateListener", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:CreateRule", 
                "elasticloadbalancing:CreateTargetGroup", 
                "elasticloadbalancing:DeleteListener", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:DeleteRule", 
                "elasticloadbalancing:DeleteTargetGroup", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeRules", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "ecs:*", 
                "events:DescribeRule", 
                "events:DeleteRule", 
                "events:ListRuleNamesByTarget", 
                "events:ListTargetsByRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "logs:CreateLogGroup", 
                "logs:DescribeLogGroups", 
                "logs:FilterLogEvents", 
                "route53:GetHostedZone", 
                "route53:ListHostedZonesByName", 
                "route53:CreateHostedZone", 
                "route53:DeleteHostedZone", 
                "route53:GetHealthCheck", 
                "servicediscovery:CreatePrivateDnsNamespace", 
                "servicediscovery:CreateService", 
                "servicediscovery:GetNamespace", 
                "servicediscovery:GetOperation", 
                "servicediscovery:GetService", 
                "servicediscovery:ListNamespaces", 
                "servicediscovery:ListServices", 
                "servicediscovery:UpdateService"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:GetParametersByPath", 
                "ssm:GetParameters", 
                "ssm:GetParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/aws/service/ecs*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-name": "EC2ContainerService-*"
                }
            }
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "ecs-tasks.amazonaws.com"
                }
            }
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/ecsInstanceRole*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/ecsAutoscaleRole*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "application-autoscaling.amazonaws.com", 
                        "application-autoscaling.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "ecs.amazonaws.com", 
                        "spot.amazonaws.com", 
                        "spotfleet.amazonaws.com", 
                        "ecs.application-autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: ServiceCatalogAdminReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "catalog-admin:DescribeConstraints", 
                "catalog-admin:DescribeListingForProduct", 
                "catalog-admin:DescribeListings", 
                "catalog-admin:DescribePortfolios", 
                "catalog-admin:DescribeProductVersions", 
                "catalog-admin:GetPortfolioCount", 
                "catalog-admin:GetPortfolios", 
                "catalog-admin:GetProductCounts", 
                "catalog-admin:ListAllPortfolioConstraints", 
                "catalog-admin:ListPortfolioConstraints", 
                "catalog-admin:ListPortfolios", 
                "catalog-admin:ListPrincipalConstraints", 
                "catalog-admin:ListProductConstraints", 
                "catalog-admin:ListResourceUsers", 
                "catalog-admin:ListTagsForResource", 
                "catalog-admin:SearchListings", 
                "catalog-user:*", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplateSummary", 
                "iam:GetGroup", 
                "iam:GetRole", 
                "iam:GetUser", 
                "iam:ListGroups", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "s3:GetObject", 
                "servicecatalog:DescribeTagOption", 
                "servicecatalog:GetTagOptionMigrationStatus", 
                "servicecatalog:ListResourcesForTagOption", 
                "servicecatalog:ListTagOptions", 
                "servicecatalog:AccountLevelDescribeRecord", 
                "servicecatalog:AccountLevelListRecordHistory", 
                "servicecatalog:AccountLevelScanProvisionedProducts", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:DescribeProvisionedProduct", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:ScanProvisionedProducts", 
                "servicecatalog:SearchProducts", 
                "servicecatalog:DescribeConstraint", 
                "servicecatalog:DescribeProductAsAdmin", 
                "servicecatalog:DescribePortfolio", 
                "servicecatalog:DescribeProvisioningArtifact", 
                "servicecatalog:ListAcceptedPortfolioShares", 
                "servicecatalog:ListConstraintsForPortfolio", 
                "servicecatalog:ListPortfolioAccess", 
                "servicecatalog:ListPortfolios", 
                "servicecatalog:ListPortfoliosForProduct", 
                "servicecatalog:ListPrincipalsForPortfolio", 
                "servicecatalog:ListProvisioningArtifacts", 
                "servicecatalog:SearchProductsAsAdmin"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingRDSClusterPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:AddTagsToResource", 
                "rds:CreateDBInstance", 
                "rds:DeleteDBInstance", 
                "rds:DescribeDBClusters", 
                "rds:DescribeDBInstances", 
                "rds:ModifyDBCluster", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSServiceRoleForEC2ScheduledInstances
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringEquals": {
                    "aws:TagKeys": [
                        "aws:ec2sri:scheduledInstanceId"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:ec2sri:scheduledInstanceId": "*"
                }
            }
        }
    ]
}
Policy Name: AWSCodeDeployRoleForLambda
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "lambda:UpdateAlias", 
                "lambda:GetAlias", 
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectVersion"
            ], 
            "Resource": "arn:aws:s3:::*/CodeDeploy/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectVersion"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "s3:ExistingObjectTag/UseWithCodeDeploy": "true"
                }
            }
        }, 
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": "arn:aws:lambda:*:*:function:CodeDeployHook_*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData", 
                "ds:CreateComputer", 
                "ds:DescribeDirectories", 
                "ec2:DescribeInstanceStatus", 
                "logs:*", 
                "ssm:*", 
                "ec2messages:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeCommitReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codecommit:BatchGet*", 
                "codecommit:Get*", 
                "codecommit:Describe*", 
                "codecommit:List*", 
                "codecommit:GitPull"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "events:DescribeRule", 
                "events:ListTargetsByRule"
            ], 
            "Resource": "arn:aws:events:*:*:rule/codecommit*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsCodeCommitRulesReadOnlyAccess"
        }, 
        {
            "Action": [
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSSubscriptionAccess"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "LambdaReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListAccessKeys", 
                "iam:ListSSHPublicKeys", 
                "iam:ListServiceSpecificCredentials", 
                "iam:ListAccessKeys", 
                "iam:GetSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyConsoleAccess"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "autoscaling:UpdateAutoScalingGroup", 
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStack*", 
                "cloudformation:UpdateStack", 
                "cloudwatch:GetMetricStatistics", 
                "ec2:Describe*", 
                "elasticloadbalancing:*", 
                "ecs:*", 
                "events:DescribeRule", 
                "events:DeleteRule", 
                "events:ListRuleNamesByTarget", 
                "events:ListTargetsByRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonFreeRTOSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "freertos:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCognitoReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-identity:Describe*", 
                "cognito-identity:Get*", 
                "cognito-identity:List*", 
                "cognito-idp:Describe*", 
                "cognito-idp:AdminGetUser", 
                "cognito-idp:List*", 
                "cognito-sync:Describe*", 
                "cognito-sync:Get*", 
                "cognito-sync:List*", 
                "iam:ListOpenIdConnectProviders", 
                "iam:ListRoles", 
                "sns:ListPlatformApplications"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDMSCloudWatchLogsRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:DescribeLogGroups"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDescribeOnAllLogGroups"
        }, 
        {
            "Action": [
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDescribeOfAllLogStreamsOnDmsTasksLogGroup"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCreationOfDmsTasksLogGroups"
        }, 
        {
            "Action": [
                "logs:CreateLogStream"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCreationOfDmsTaskLogStream"
        }, 
        {
            "Action": [
                "logs:PutLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowUploadOfLogEventsToDmsTaskLogStream"
        }
    ]
}
Policy Name: AWSApplicationDiscoveryServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:*", 
                "discovery:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53AutoNamingReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "servicediscovery:Get*", 
                "servicediscovery:List*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonVPCFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AcceptVpcPeeringConnection", 
                "ec2:AcceptVpcEndpointConnections", 
                "ec2:AllocateAddress", 
                "ec2:AssignIpv6Addresses", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssociateAddress", 
                "ec2:AssociateDhcpOptions", 
                "ec2:AssociateRouteTable", 
                "ec2:AssociateSubnetCidrBlock", 
                "ec2:AssociateVpcCidrBlock", 
                "ec2:AttachClassicLinkVpc", 
                "ec2:AttachInternetGateway", 
                "ec2:AttachNetworkInterface", 
                "ec2:AttachVpnGateway", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateCustomerGateway", 
                "ec2:CreateDefaultSubnet", 
                "ec2:CreateDefaultVpc", 
                "ec2:CreateDhcpOptions", 
                "ec2:CreateEgressOnlyInternetGateway", 
                "ec2:CreateFlowLogs", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateNatGateway", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAclEntry", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:CreateVpcEndpoint", 
                "ec2:CreateVpcEndpointConnectionNotification", 
                "ec2:CreateVpcEndpointServiceConfiguration", 
                "ec2:CreateVpcPeeringConnection", 
                "ec2:CreateVpnConnection", 
                "ec2:CreateVpnConnectionRoute", 
                "ec2:CreateVpnGateway", 
                "ec2:DeleteCustomerGateway", 
                "ec2:DeleteDhcpOptions", 
                "ec2:DeleteEgressOnlyInternetGateway", 
                "ec2:DeleteFlowLogs", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteNatGateway", 
                "ec2:DeleteNetworkAcl", 
                "ec2:DeleteNetworkAclEntry", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteTags", 
                "ec2:DeleteVpc", 
                "ec2:DeleteVpcEndpoints", 
                "ec2:DeleteVpcEndpointConnectionNotifications", 
                "ec2:DeleteVpcEndpointServiceConfigurations", 
                "ec2:DeleteVpcPeeringConnection", 
                "ec2:DeleteVpnConnection", 
                "ec2:DeleteVpnConnectionRoute", 
                "ec2:DeleteVpnGateway", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeEgressOnlyInternetGateways", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroupReferences", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeStaleSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeVpcClassicLinkDnsSupport", 
                "ec2:DescribeVpcEndpointConnectionNotifications", 
                "ec2:DescribeVpcEndpointConnections", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointServiceConfigurations", 
                "ec2:DescribeVpcEndpointServicePermissions", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:DetachInternetGateway", 
                "ec2:DetachNetworkInterface", 
                "ec2:DetachVpnGateway", 
                "ec2:DisableVgwRoutePropagation", 
                "ec2:DisableVpcClassicLink", 
                "ec2:DisableVpcClassicLinkDnsSupport", 
                "ec2:DisassociateAddress", 
                "ec2:DisassociateRouteTable", 
                "ec2:DisassociateSubnetCidrBlock", 
                "ec2:DisassociateVpcCidrBlock", 
                "ec2:EnableVgwRoutePropagation", 
                "ec2:EnableVpcClassicLink", 
                "ec2:EnableVpcClassicLinkDnsSupport", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:ModifySubnetAttribute", 
                "ec2:ModifyVpcAttribute", 
                "ec2:ModifyVpcEndpoint", 
                "ec2:ModifyVpcEndpointConnectionNotification", 
                "ec2:ModifyVpcEndpointServiceConfiguration", 
                "ec2:ModifyVpcEndpointServicePermissions", 
                "ec2:ModifyVpcPeeringConnectionOptions", 
                "ec2:ModifyVpcTenancy", 
                "ec2:MoveAddressToVpc", 
                "ec2:RejectVpcEndpointConnections", 
                "ec2:RejectVpcPeeringConnection", 
                "ec2:ReleaseAddress", 
                "ec2:ReplaceNetworkAclAssociation", 
                "ec2:ReplaceNetworkAclEntry", 
                "ec2:ReplaceRoute", 
                "ec2:ReplaceRouteTableAssociation", 
                "ec2:ResetNetworkInterfaceAttribute", 
                "ec2:RestoreAddressToClassic", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:UnassignIpv6Addresses", 
                "ec2:UnassignPrivateIpAddresses", 
                "ec2:UpdateSecurityGroupRuleDescriptionsEgress", 
                "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appsync:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "appsync.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AWSEC2FleetServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:RunInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*", 
                "arn:aws:ec2:*:*:spot-instances-request/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:ec2:fleet-id": "*"
                }
            }
        }
    ]
}
Policy Name: AmazonRoute53AutoNamingFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:GetHostedZone", 
                "route53:ListHostedZonesByName", 
                "route53:CreateHostedZone", 
                "route53:DeleteHostedZone", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateHealthCheck", 
                "route53:GetHealthCheck", 
                "route53:DeleteHealthCheck", 
                "route53:UpdateHealthCheck", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeRegions", 
                "servicediscovery:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSImportExportFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "importexport:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DynamoDBReplicationServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:GetItem", 
                "dynamodb:PutItem", 
                "dynamodb:UpdateItem", 
                "dynamodb:DeleteItem", 
                "dynamodb:DescribeTable", 
                "dynamodb:Scan", 
                "dynamodb:DescribeStream", 
                "dynamodb:GetRecords", 
                "dynamodb:GetShardIterator", 
                "dynamodb:DescribeTimeToLive", 
                "application-autoscaling:DescribeScalableTargets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mechanicalturk:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerRegistryPowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:GetRepositoryPolicy", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecr:DescribeImages", 
                "ecr:BatchGetImage", 
                "ecr:InitiateLayerUpload", 
                "ecr:UploadLayerPart", 
                "ecr:CompleteLayerUpload", 
                "ecr:PutImage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningCreateOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:Add*", 
                "machinelearning:Create*", 
                "machinelearning:Delete*", 
                "machinelearning:Describe*", 
                "machinelearning:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisVideoStreamsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesisvideo:Describe*", 
                "kinesisvideo:Get*", 
                "kinesisvideo:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudTrailReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetBucketLocation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:LookupEvents", 
                "cloudtrail:ListTags", 
                "cloudtrail:ListPublicKeys", 
                "cloudtrail:GetEventSelectors", 
                "s3:ListAllMyBuckets", 
                "kms:ListAliases", 
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaExecute
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:*"
            ], 
            "Resource": "arn:aws:logs:*:*:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject"
            ], 
            "Resource": "arn:aws:s3:::*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTRuleActions
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "dynamodb:PutItem", 
            "kinesis:PutRecord", 
            "iot:Publish", 
            "s3:PutObject", 
            "sns:Publish", 
            "sqs:SendMessage*", 
            "cloudwatch:SetAlarmState", 
            "cloudwatch:PutMetricData", 
            "es:ESHttpPut", 
            "firehose:PutRecord"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AWSQuickSightDescribeRedshift
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "redshift:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticsearchServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "Stmt1480452973134"
        }
    ]
}
Policy Name: AmazonMQReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mq:Describe*", 
                "mq:List*", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: VMImportExportRoleForAWSConnector
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::import-to-ec2-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:ModifySnapshotAttribute", 
                "ec2:CopySnapshot", 
                "ec2:RegisterImage", 
                "ec2:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineCustomActionAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:AcknowledgeJob", 
                "codepipeline:GetJobDetails", 
                "codepipeline:PollForJobs", 
                "codepipeline:PutJobFailureResult", 
                "codepipeline:PutJobSuccessResult"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9ServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:RunInstances", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeInstances", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStacks", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStackResources"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances", 
                "ec2:DeleteSecurityGroup", 
                "ec2:AuthorizeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:DeleteStack"
            ], 
            "Resource": "arn:aws:cloudformation:*:*:stack/aws-cloud9-*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": "arn:aws:ec2:*:*:instance/*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "aws:RequestTag/Name": "aws-cloud9-*"
                }
            }
        }, 
        {
            "Action": [
                "ec2:StartInstances", 
                "ec2:StopInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-cloud9-*"
                }
            }
        }
    ]
}
Policy Name: AWSApplicationAutoscalingECSServicePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:DescribeServices", 
                "ecs:UpdateService", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksInstanceRegistration
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "opsworks:DescribeStackProvisioningParameters", 
                "opsworks:DescribeStacks", 
                "opsworks:RegisterInstance"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCloudDirectoryFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "clouddirectory:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonECSTaskExecutionRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:BatchGetImage", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStorageGatewayFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "storagegateway:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeSnapshots", 
                "ec2:DeleteSnapshot"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonLexReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lex:GetBot", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases", 
                "lex:GetBots", 
                "lex:GetBotChannelAssociation", 
                "lex:GetBotChannelAssociations", 
                "lex:GetBotVersions", 
                "lex:GetBuiltinIntent", 
                "lex:GetBuiltinIntents", 
                "lex:GetBuiltinSlotTypes", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:GetIntentVersions", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:GetSlotTypeVersions", 
                "lex:GetUtterancesView"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonChimeUserManagement
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "chime:ListAccounts", 
                "chime:GetAccount", 
                "chime:GetAccountSettings", 
                "chime:UpdateAccountSettings", 
                "chime:ListUsers", 
                "chime:GetUser", 
                "chime:GetUserByEmail", 
                "chime:InviteUsers", 
                "chime:SuspendUsers", 
                "chime:ActivateUsers", 
                "chime:UpdateUserLicenses", 
                "chime:ResetPersonalPIN", 
                "chime:LogoutUser", 
                "chime:ListDomains", 
                "chime:GetDomain", 
                "chime:ListDirectories", 
                "chime:ListGroups", 
                "chime:SubmitSupportRequest", 
                "chime:ListDelegates", 
                "chime:ListAccountUsageReportData", 
                "chime:GetMeetingDetail", 
                "chime:ListMeetingEvents", 
                "chime:ListMeetingsReportData", 
                "chime:GetUserActivityReportData"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elastictranscoder:Read*", 
                "elastictranscoder:List*", 
                "s3:List*", 
                "iam:List*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSTrustedAdvisorServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:DescribeAccountLimits", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLaunchConfigurations", 
                "cloudformation:DescribeAccountLimits", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListStacks", 
                "cloudfront:ListDistributions", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "dynamodb:DescribeTable", 
                "dynamodb:ListTables", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeReservedInstances", 
                "ec2:DescribeInstances", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeImages", 
                "ec2:DescribeVolumes", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeReservedInstancesOfferings", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancerAttributes", 
                "elasticloadbalancing:DescribeLoadBalancerPolicies", 
                "elasticloadbalancing:DescribeLoadBalancerPolicyTypes", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "iam:GenerateCredentialReport", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetCredentialReport", 
                "iam:GetServerCertificate", 
                "iam:ListServerCertificates", 
                "kinesis:DescribeLimits", 
                "rds:DescribeAccountAttributes", 
                "rds:DescribeDBClusters", 
                "rds:DescribeDBEngineVersions", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBParameterGroups", 
                "rds:DescribeDBParameters", 
                "rds:DescribeDBSecurityGroups", 
                "rds:DescribeDBSnapshots", 
                "rds:DescribeDBSubnetGroups", 
                "rds:DescribeEngineDefaultParameters", 
                "rds:DescribeEvents", 
                "rds:DescribeOptionGroupOptions", 
                "rds:DescribeOptionGroups", 
                "rds:DescribeOrderableDBInstanceOptions", 
                "rds:DescribeReservedDBInstances", 
                "rds:DescribeReservedDBInstancesOfferings", 
                "rds:ListTagsForResource", 
                "redshift:DescribeClusters", 
                "redshift:DescribeReservedNodeOfferings", 
                "redshift:DescribeReservedNodes", 
                "route53:GetHealthCheck", 
                "route53:GetHostedZone", 
                "route53:ListHealthChecks", 
                "route53:ListHostedZones", 
                "route53:ListHostedZonesByName", 
                "route53:ListResourceRecordSets", 
                "s3:GetBucketAcl", 
                "s3:GetBucketPolicy", 
                "s3:GetBucketLocation", 
                "s3:GetBucketLogging", 
                "s3:GetBucketVersioning", 
                "s3:ListBucket", 
                "s3:ListObjects", 
                "s3:ListAllMyBuckets", 
                "ses:GetSendQuota", 
                "sqs:ListQueues", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTConfigReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:DescribeAuthorizer", 
                "iot:DescribeCACertificate", 
                "iot:DescribeCertificate", 
                "iot:DescribeCertificateTag", 
                "iot:DescribeDefaultAuthorizer", 
                "iot:DescribeEndpoint", 
                "iot:DescribeEventConfigurations", 
                "iot:DescribeIndex", 
                "iot:DescribeJob", 
                "iot:DescribeJobExecution", 
                "iot:DescribeRoleAlias", 
                "iot:DescribeStream", 
                "iot:DescribeThing", 
                "iot:DescribeThingGroup", 
                "iot:DescribeThingRegistrationTask", 
                "iot:DescribeThingType", 
                "iot:GetEffectivePolicies", 
                "iot:GetIndexingConfiguration", 
                "iot:GetJobDocument", 
                "iot:GetLoggingOptions", 
                "iot:GetOTAUpdate", 
                "iot:GetPolicy", 
                "iot:GetPolicyVersion", 
                "iot:GetRegistrationCode", 
                "iot:GetTopicRule", 
                "iot:GetV2LoggingOptions", 
                "iot:ListAttachedPolicies", 
                "iot:ListAuthorizers", 
                "iot:ListCACertificates", 
                "iot:ListCertificates", 
                "iot:ListCertificatesByCA", 
                "iot:ListIndices", 
                "iot:ListJobExecutionsForJob", 
                "iot:ListJobExecutionsForThing", 
                "iot:ListJobs", 
                "iot:ListOTAUpdates", 
                "iot:ListOutgoingCertificates", 
                "iot:ListPolicies", 
                "iot:ListPolicyPrincipals", 
                "iot:ListPolicyVersions", 
                "iot:ListPrincipalPolicies", 
                "iot:ListPrincipalThings", 
                "iot:ListRoleAliases", 
                "iot:ListStreams", 
                "iot:ListTargetsForPolicy", 
                "iot:ListThingGroups", 
                "iot:ListThingGroupsForThing", 
                "iot:ListThingPrincipals", 
                "iot:ListThingRegistrationTaskReports", 
                "iot:ListThingRegistrationTasks", 
                "iot:ListThings", 
                "iot:ListThingsInThingGroup", 
                "iot:ListThingTypes", 
                "iot:ListTopicRules", 
                "iot:ListV2LoggingLevels", 
                "iot:SearchIndex", 
                "iot:TestAuthorization", 
                "iot:TestInvokeAuthorizer"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonWorkMailReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ses:Describe*", 
                "ses:Get*", 
                "workmail:Describe*", 
                "workmail:Get*", 
                "workmail:List*", 
                "workmail:Search*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDMSVPCManagementRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaKinesisExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesis:DescribeStream", 
                "kinesis:GetRecords", 
                "kinesis:GetShardIterator", 
                "kinesis:ListStreams", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ResourceGroupsandTagEditorReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "tag:getResources", 
                "tag:getTagKeys", 
                "tag:getTagValues"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRekognitionServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:AmazonRekognition*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesis:PutRecord", 
                "kinesis:PutRecords"
            ], 
            "Resource": "arn:aws:kinesis:*:*:stream/AmazonRekognition*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesisvideo:GetDataEndpoint", 
                "kinesisvideo:GetMedia"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMAutomationRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:Automation*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateImage", 
                "ec2:CopyImage", 
                "ec2:DeregisterImage", 
                "ec2:DescribeImages", 
                "ec2:DeleteSnapshot", 
                "ec2:StartInstances", 
                "ec2:RunInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:DescribeTags", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:UpdateStack", 
                "cloudformation:DeleteStack"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": [
                "arn:aws:sns:*:*:Automation*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudHSMServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ComprehendReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "comprehend:DetectDominantLanguage", 
                "comprehend:BatchDetectDominantLanguage", 
                "comprehend:DetectEntities", 
                "comprehend:BatchDetectEntities", 
                "comprehend:DetectKeyPhrases", 
                "comprehend:BatchDetectKeyPhrases", 
                "comprehend:DetectSentiment", 
                "comprehend:BatchDetectSentiment", 
                "comprehend:DescribeTopicsDetectionJob", 
                "comprehend:ListTopicsDetectionJobs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStepFunctionsConsoleFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "states:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:ListRoles", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/service-role/StatesExecutionRole*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "lambda:ListFunctions", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSQuickSightIoTAnalyticsAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iotanalytics:ListDatasets", 
                "iotanalytics:DescribeDataset", 
                "iotanalytics:GetDatasetContent"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeBuildReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codebuild:BatchGet*", 
                "codebuild:Get*", 
                "codebuild:List*", 
                "codecommit:GetBranch", 
                "codecommit:GetCommit", 
                "codecommit:GetRepository"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: LexBotPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "polly:SynthesizeSpeech"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMacieFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "macie:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningManageRealTimeEndpointOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:CreateRealtimeEndpoint", 
                "machinelearning:DeleteRealtimeEndpoint"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsInvocationAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesis:PutRecord"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsInvocationAccess"
        }
    ]
}
Policy Name: CloudFrontReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:ListCertificates", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "iam:ListServerCertificates", 
                "route53:List*", 
                "waf:ListWebACLs", 
                "waf:GetWebACL"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDeepLensServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:CreateThing", 
                "iot:DeleteThing", 
                "iot:DeleteThingShadow", 
                "iot:DescribeThing", 
                "iot:GetThingShadow", 
                "iot:UpdateThing", 
                "iot:UpdateThingShadow"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTThingAccess"
        }, 
        {
            "Action": [
                "iot:AttachThingPrincipal", 
                "iot:DetachThingPrincipal"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*", 
                "arn:aws:iot:*:*:cert/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTCertificateAccess"
        }, 
        {
            "Action": [
                "iot:CreateKeysAndCertificate", 
                "iot:CreatePolicy", 
                "iot:CreatePolicyVersion"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTCreateCertificateAndPolicyAccess"
        }, 
        {
            "Action": [
                "iot:AttachPrincipalPolicy"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:policy/deeplens*", 
                "arn:aws:iot:*:*:cert/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTAttachCertificatePolicyAccess"
        }, 
        {
            "Action": [
                "iot:GetThingShadow", 
                "iot:UpdateThingShadow"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTDataAccess"
        }, 
        {
            "Action": [
                "iot:DescribeEndpoint"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTEndpointAccess"
        }, 
        {
            "Action": [
                "deeplens:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAccess"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::deeplens*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensS3ObjectAccess"
        }, 
        {
            "Action": [
                "s3:DeleteBucket", 
                "s3:ListBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensS3Buckets"
        }, 
        {
            "Action": [
                "s3:CreateBucket"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensCreateS3Buckets"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "greengrass.amazonaws.com", 
                        "sagemaker.amazonaws.com"
                    ]
                }
            }, 
            "Sid": "DeepLensIAMPassRoleAccess"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/AWSDeepLens*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEqualsIfExists": {
                    "iam:PassedToService": "lambda.amazonaws.com"
                }
            }, 
            "Sid": "DeepLensIAMLambdaPassRoleAccess"
        }, 
        {
            "Action": [
                "greengrass:AssociateRoleToGroup", 
                "greengrass:AssociateServiceRoleToAccount", 
                "greengrass:CreateResourceDefinition", 
                "greengrass:CreateResourceDefinitionVersion", 
                "greengrass:CreateCoreDefinition", 
                "greengrass:CreateCoreDefinitionVersion", 
                "greengrass:CreateDeployment", 
                "greengrass:CreateFunctionDefinition", 
                "greengrass:CreateFunctionDefinitionVersion", 
                "greengrass:CreateGroup", 
                "greengrass:CreateGroupCertificateAuthority", 
                "greengrass:CreateGroupVersion", 
                "greengrass:CreateLoggerDefinition", 
                "greengrass:CreateLoggerDefinitionVersion", 
                "greengrass:CreateSubscriptionDefinition", 
                "greengrass:CreateSubscriptionDefinitionVersion", 
                "greengrass:DeleteCoreDefinition", 
                "greengrass:DeleteFunctionDefinition", 
                "greengrass:DeleteGroup", 
                "greengrass:DeleteLoggerDefinition", 
                "greengrass:DeleteSubscriptionDefinition", 
                "greengrass:DisassociateRoleFromGroup", 
                "greengrass:DisassociateServiceRoleFromAccount", 
                "greengrass:GetAssociatedRole", 
                "greengrass:GetConnectivityInfo", 
                "greengrass:GetCoreDefinition", 
                "greengrass:GetCoreDefinitionVersion", 
                "greengrass:GetDeploymentStatus", 
                "greengrass:GetDeviceDefinition", 
                "greengrass:GetDeviceDefinitionVersion", 
                "greengrass:GetFunctionDefinition", 
                "greengrass:GetFunctionDefinitionVersion", 
                "greengrass:GetGroup", 
                "greengrass:GetGroupCertificateAuthority", 
                "greengrass:GetGroupCertificateConfiguration", 
                "greengrass:GetGroupVersion", 
                "greengrass:GetLoggerDefinition", 
                "greengrass:GetLoggerDefinitionVersion", 
                "greengrass:GetServiceRoleForAccount", 
                "greengrass:GetSubscriptionDefinition", 
                "greengrass:GetSubscriptionDefinitionVersion", 
                "greengrass:ListCoreDefinitionVersions", 
                "greengrass:ListCoreDefinitions", 
                "greengrass:ListDeployments", 
                "greengrass:ListDeviceDefinitionVersions", 
                "greengrass:ListDeviceDefinitions", 
                "greengrass:ListFunctionDefinitionVersions", 
                "greengrass:ListFunctionDefinitions", 
                "greengrass:ListGroupCertificateAuthorities", 
                "greengrass:ListGroupVersions", 
                "greengrass:ListGroups", 
                "greengrass:ListLoggerDefinitionVersions", 
                "greengrass:ListLoggerDefinitions", 
                "greengrass:ListSubscriptionDefinitionVersions", 
                "greengrass:ListSubscriptionDefinitions", 
                "greengrass:ResetDeployments", 
                "greengrass:UpdateConnectivityInfo", 
                "greengrass:UpdateCoreDefinition", 
                "greengrass:UpdateDeviceDefinition", 
                "greengrass:UpdateFunctionDefinition", 
                "greengrass:UpdateGroup", 
                "greengrass:UpdateGroupCertificateConfiguration", 
                "greengrass:UpdateLoggerDefinition", 
                "greengrass:UpdateSubscriptionDefinition"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensGreenGrassAccess"
        }, 
        {
            "Action": [
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:GetFunction", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListFunctions", 
                "lambda:ListVersionsByFunction", 
                "lambda:PublishVersion", 
                "lambda:UpdateFunctionCode", 
                "lambda:UpdateFunctionConfiguration"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensLambdaAdminFunctionAccess"
        }, 
        {
            "Action": [
                "sagemaker:CreateTrainingJob", 
                "sagemaker:DescribeTrainingJob", 
                "sagemaker:StopTrainingJob"
            ], 
            "Resource": [
                "arn:aws:sagemaker:*:*:training-job/deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensSageMakerAccess"
        }, 
        {
            "Action": [
                "acuity:CreateStream", 
                "acuity:DescribeStream", 
                "acuity:DeleteStream"
            ], 
            "Resource": [
                "arn:aws:acuity:*:*:stream/deeplens*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityStreamAccess"
        }, 
        {
            "Action": [
                "acuity:GetDataEndpoint"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityEndpointAccess"
        }
    ]
}
Policy Name: AmazonSNSRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:PutMetricFilter", 
                "logs:PutRetentionPolicy"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonInspectorServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeInstances", 
                "ec2:DescribeTags", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeLoadBalancerAttributes", 
                "elasticloadbalancing:DescribeRules", 
                "elasticloadbalancing:DescribeTags", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsFinancialReportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mobileanalytics:GetReports", 
                "mobileanalytics:GetFinancialReports"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkService
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:*"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awseb-*", 
                "arn:aws:cloudformation:*:*:stack/eb-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCloudformationOperationsOnElasticBeanstalkStacks"
        }, 
        {
            "Action": [
                "logs:DeleteLogGroup"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDeleteCloudwatchLogGroups"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowS3OperationsOnElasticBeanstalkBuckets"
        }, 
        {
            "Action": [
                "autoscaling:AttachInstances", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:CreateLaunchConfiguration", 
                "autoscaling:DeleteLaunchConfiguration", 
                "autoscaling:DeleteAutoScalingGroup", 
                "autoscaling:DeleteScheduledAction", 
                "autoscaling:DescribeAccountLimits", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:DescribeLaunchConfigurations", 
                "autoscaling:DescribeLoadBalancers", 
                "autoscaling:DescribeNotificationConfigurations", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:DescribeScheduledActions", 
                "autoscaling:DetachInstances", 
                "autoscaling:PutScheduledUpdateGroupAction", 
                "autoscaling:ResumeProcesses", 
                "autoscaling:SetDesiredCapacity", 
                "autoscaling:SuspendProcesses", 
                "autoscaling:TerminateInstanceInAutoScalingGroup", 
                "autoscaling:UpdateAutoScalingGroup", 
                "cloudwatch:PutMetricAlarm", 
                "ec2:AssociateAddress", 
                "ec2:AllocateAddress", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DisassociateAddress", 
                "ec2:ReleaseAddress", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:TerminateInstances", 
                "ecs:CreateCluster", 
                "ecs:DeleteCluster", 
                "ecs:DescribeClusters", 
                "ecs:RegisterTaskDefinition", 
                "elasticbeanstalk:*", 
                "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer", 
                "elasticloadbalancing:ConfigureHealthCheck", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:RegisterTargets", 
                "elasticloadbalancing:DeregisterTargets", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "logs:CreateLogGroup", 
                "logs:PutRetentionPolicy", 
                "rds:DescribeDBEngineVersions", 
                "rds:DescribeDBInstances", 
                "rds:DescribeOrderableDBInstanceOptions", 
                "s3:CopyObject", 
                "s3:GetObject", 
                "s3:GetObjectAcl", 
                "s3:GetObjectMetadata", 
                "s3:ListBucket", 
                "s3:listBuckets", 
                "s3:ListObjects", 
                "sns:CreateTopic", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptionsByTopic", 
                "sns:Subscribe", 
                "sns:SetTopicAttributes", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "codebuild:CreateProject", 
                "codebuild:DeleteProject", 
                "codebuild:BatchGetBuilds", 
                "codebuild:StartBuild"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowOperations"
        }
    ]
}
Policy Name: IAMReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:Get*", 
                "iam:List*", 
                "iam:SimulateCustomPolicy", 
                "iam:SimulatePrincipalPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRDSReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:Describe*", 
                "rds:ListTagsForResource", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCognitoPowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-identity:*", 
                "cognito-idp:*", 
                "cognito-sync:*", 
                "iam:ListRoles", 
                "iam:ListOpenIdConnectProviders", 
                "sns:ListPlatformApplications"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53AutoNamingRegistrantAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:GetHostedZone", 
                "route53:ListHostedZonesByName", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateHealthCheck", 
                "route53:GetHealthCheck", 
                "route53:DeleteHealthCheck", 
                "route53:UpdateHealthCheck", 
                "servicediscovery:Get*", 
                "servicediscovery:List*", 
                "servicediscovery:RegisterInstance", 
                "servicediscovery:DeregisterInstance"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticFileSystemFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "elasticfilesystem:*", 
                "kms:DescribeKey", 
                "kms:ListAliases"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: LexChannelPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lex:PostText"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ServerMigrationConnector
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "iam:GetUser", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sms:SendMessage", 
                "sms:GetMessages"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteObject", 
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:PutObject", 
                "s3:PutObjectAcl", 
                "s3:PutLifecycleConfiguration", 
                "s3:AbortMultipartUpload", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts"
            ], 
            "Resource": [
                "arn:aws:s3:::sms-b-*", 
                "arn:aws:s3:::import-to-ec2-*", 
                "arn:aws:s3:::server-migration-service-upgrade", 
                "arn:aws:s3:::server-migration-service-upgrade/*", 
                "arn:aws:s3:::connector-platform-upgrade-info/*", 
                "arn:aws:s3:::connector-platform-upgrade-info", 
                "arn:aws:s3:::connector-platform-upgrade-bundles/*", 
                "arn:aws:s3:::connector-platform-upgrade-bundles", 
                "arn:aws:s3:::connector-platform-release-notes/*", 
                "arn:aws:s3:::connector-platform-release-notes"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "awsconnector:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "SNS:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonESCognitoAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-idp:DescribeUserPool", 
                "cognito-idp:CreateUserPoolClient", 
                "cognito-idp:DeleteUserPoolClient", 
                "cognito-idp:DescribeUserPoolClient", 
                "cognito-idp:AdminInitiateAuth", 
                "cognito-idp:AdminUserGlobalSignOut", 
                "cognito-idp:ListUserPoolClients", 
                "cognito-identity:DescribeIdentityPool", 
                "cognito-identity:UpdateIdentityPool", 
                "cognito-identity:SetIdentityPoolRoles", 
                "cognito-identity:GetIdentityPoolRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "cognito-identity.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonChimeReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "chime:ListAccounts", 
                "chime:GetAccount", 
                "chime:GetAccountSettings", 
                "chime:ListUsers", 
                "chime:GetUser", 
                "chime:GetUserByEmail", 
                "chime:ListDomains", 
                "chime:GetDomain", 
                "chime:ListGroups", 
                "chime:ListDirectories", 
                "chime:ListCDRBucket", 
                "chime:GetCDRBucket", 
                "chime:ListDelegates", 
                "chime:GetAccountResource", 
                "chime:ValidateDelegate", 
                "chime:ListAccountUsageReportData", 
                "chime:GetUserActivityReportData"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonZocaloFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "zocalo:*", 
                "ds:*", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeChangeSet", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStackResources", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:GetCognitoEvents", 
                "dynamodb:BatchGetItem", 
                "dynamodb:DescribeStream", 
                "dynamodb:DescribeTable", 
                "dynamodb:GetItem", 
                "dynamodb:ListStreams", 
                "dynamodb:ListTables", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "events:Describe*", 
                "events:List*", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListRolePolicies", 
                "iam:ListRoles", 
                "iot:DescribeEndpoint", 
                "iot:GetTopicRules", 
                "iot:ListPolicies", 
                "iot:ListThings", 
                "iot:ListTopicRules", 
                "kinesis:DescribeStream", 
                "kinesis:ListStreams", 
                "kms:ListAliases", 
                "lambda:Get*", 
                "lambda:List*", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:DescribeMetricFilters", 
                "logs:GetLogEvents", 
                "s3:Get*", 
                "s3:List*", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sqs:ListQueues", 
                "tag:GetResources"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAccountUsageReportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-portal:ViewUsage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTOTAUpdate
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "iot:CreateJob", 
            "signer:DescribeSigningJob"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AmazonMQFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mq:*", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:DetachNetworkInterface", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceGetEntitlements
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:GetEntitlements"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceforEC2Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:CreateCluster", 
                "ecs:DeregisterContainerInstance", 
                "ecs:DiscoverPollEndpoint", 
                "ecs:Poll", 
                "ecs:RegisterContainerInstance", 
                "ecs:StartTelemetrySession", 
                "ecs:UpdateContainerInstancesState", 
                "ecs:Submit*", 
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:BatchGetImage", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAppStreamFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:ListRoles", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/service-role/ApplicationAutoScalingForAmazonAppStreamAccess", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "application-autoscaling.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSIoTDataAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:Connect", 
                "iot:Publish", 
                "iot:Subscribe", 
                "iot:Receive", 
                "iot:GetThingShadow", 
                "iot:UpdateThingShadow", 
                "iot:DeleteThingShadow"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonTranscribeReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "transcribe:Get*", 
                "transcribe:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonESFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "es:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ServerMigrationServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:ModifySnapshotAttribute", 
                "ec2:CopySnapshot", 
                "ec2:CopyImage", 
                "ec2:Describe*", 
                "ec2:DeleteSnapshot", 
                "ec2:DeregisterImage", 
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSWAFFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "waf:*", 
                "waf-regional:*", 
                "elasticloadbalancing:SetWebACL"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSArtifactAccountSync
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "organizations:ListAccounts", 
                "organizations:DescribeOrganization"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisFirehoseFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "firehose:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "logs:Get*", 
                "logs:List*", 
                "logs:Describe*", 
                "logs:TestMetricFilter", 
                "sns:Get*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaBasicExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ResourceGroupsandTagEditorFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "tag:getResources", 
                "tag:getTagKeys", 
                "tag:getTagValues", 
                "tag:TagResources", 
                "tag:UntagResources", 
                "tag:AddResourceTags", 
                "tag:RemoveResourceTags"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSKeyManagementServicePowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:Describe*", 
                "kms:GenerateRandom", 
                "kms:Get*", 
                "kms:List*", 
                "kms:TagResource", 
                "kms:UntagResource", 
                "iam:ListGroups", 
                "iam:ListRoles", 
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingEC2SpotFleetRequestPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeSpotFleetRequests", 
                "ec2:ModifySpotFleetRequest", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSImportExportReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "importexport:ListJobs", 
                "importexport:GetStatus"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeVolumeStatus", 
                "ec2:DescribeVolumes", 
                "ec2:RebootInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:CreateSnapshot"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListBucket", 
                "s3:Put*", 
                "s3:Get*", 
                "s3:*MultipartUpload*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "1"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "2"
        }, 
        {
            "Action": [
                "s3:*Policy*", 
                "sns:*Permission*", 
                "sns:*Delete*", 
                "s3:*Delete*", 
                "sns:*Remove*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Deny", 
            "Sid": "3"
        }
    ]
}
Policy Name: AWSGlueConsoleFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glue:*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSubnetGroups", 
                "iam:ListRoles", 
                "iam:ListRolePolicies", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeInstances", 
                "rds:DescribeDBInstances", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:GetBucketAcl", 
                "s3:GetBucketLocation", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplateSummary", 
                "dynamodb:ListTables"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*/*", 
                "arn:aws:s3:::*/*aws-glue-*/*", 
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:/aws-glue/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack"
            ], 
            "Resource": "arn:aws:cloudformation:*:*:stack/aws-glue*/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:RunInstances"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*", 
                "arn:aws:ec2:*:*:key-pair/*", 
                "arn:aws:ec2:*:*:image/*", 
                "arn:aws:ec2:*:*:security-group/*", 
                "arn:aws:ec2:*:*:network-interface/*", 
                "arn:aws:ec2:*:*:subnet/*", 
                "arn:aws:ec2:*:*:volume/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances", 
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/aws-glue-*/*"
                }, 
                "StringEquals": {
                    "ec2:ResourceTag/aws:cloudformation:logical-id": "ZeppelinInstance"
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "arn:aws:iam::*:role/AWSGlueServiceRole*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "glue.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "arn:aws:iam::*:role/AWSGlueServiceNotebookRole*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/service-role/AWSGlueServiceRole*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "glue.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:Describe*", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DeregisterTargets", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:RegisterTargets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDeviceFarmFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "devicefarm:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:Describe*", 
                "ssm:Get*", 
                "ssm:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStepFunctionsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "states:ListStateMachines", 
                "states:ListActivities", 
                "states:DescribeStateMachine", 
                "states:DescribeStateMachineForExecution", 
                "states:ListExecutions", 
                "states:DescribeExecution", 
                "states:GetExecutionHistory", 
                "states:DescribeActivity"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceRead-only
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:ViewSubscriptions", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingDynamoDBTablePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:DescribeTable", 
                "dynamodb:UpdateTable", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:*", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "s3:CreateBucket", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:PutBucketPolicy", 
                "codecommit:ListBranches", 
                "codecommit:ListRepositories", 
                "codedeploy:GetApplication", 
                "codedeploy:GetDeploymentGroup", 
                "codedeploy:ListApplications", 
                "codedeploy:ListDeploymentGroups", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListFunctions", 
                "opsworks:DescribeApps", 
                "opsworks:DescribeLayers", 
                "opsworks:DescribeStacks", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListChangeSets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9User
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloud9:CreateEnvironment*", 
                "cloud9:ValidateEnvironmentName", 
                "cloud9:GetUserPublicKey", 
                "cloud9:UpdateUserSettings", 
                "cloud9:GetUserSettings", 
                "iam:GetUser", 
                "iam:ListUsers", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloud9:DescribeEnvironmentMemberships"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "Null": {
                    "cloud9:UserArn": "true", 
                    "cloud9:EnvironmentId": "true"
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "cloud9.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSGreengrassResourceAccessRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:DeleteThingShadow", 
                "iot:GetThingShadow", 
                "iot:UpdateThingShadow"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/GG_*", 
                "arn:aws:iot:*:*:thing/*-gcm", 
                "arn:aws:iot:*:*:thing/*-gda", 
                "arn:aws:iot:*:*:thing/*-gci"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToShadows"
        }, 
        {
            "Action": [
                "iot:DescribeThing"
            ], 
            "Resource": "arn:aws:iot:*:*:thing/*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToDescribeThings"
        }, 
        {
            "Action": [
                "iot:DescribeCertificate"
            ], 
            "Resource": "arn:aws:iot:*:*:cert/*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToDescribeCertificates"
        }, 
        {
            "Action": [
                "greengrass:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToCallGreengrassServices"
        }, 
        {
            "Action": [
                "lambda:GetFunction", 
                "lambda:GetFunctionConfiguration"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToGetLambdaFunctions"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::*Greengrass*", 
                "arn:aws:s3:::*GreenGrass*", 
                "arn:aws:s3:::*greengrass*", 
                "arn:aws:s3:::*Sagemaker*", 
                "arn:aws:s3:::*SageMaker*", 
                "arn:aws:s3:::*sagemaker*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToS3Objects"
        }, 
        {
            "Action": [
                "s3:GetBucketLocation"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToS3BucketLocation"
        }, 
        {
            "Action": [
                "sagemaker:DescribeTrainingJob"
            ], 
            "Resource": [
                "arn:aws:sagemaker:*:*:training-job/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToSageMakerTrainingJobs"
        }
    ]
}
Policy Name: NetworkAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "ec2:AllocateAddress", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssociateAddress", 
                "ec2:AssociateDhcpOptions", 
                "ec2:AssociateRouteTable", 
                "ec2:AttachInternetGateway", 
                "ec2:AttachNetworkInterface", 
                "ec2:AttachVpnGateway", 
                "ec2:CreateCustomerGateway", 
                "ec2:CreateDhcpOptions", 
                "ec2:CreateFlowLogs", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateNatGateway", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAclEntry", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:CreateVpcEndpoint", 
                "ec2:CreateVpnConnection", 
                "ec2:CreateVpnConnectionRoute", 
                "ec2:CreateVpnGateway", 
                "ec2:CreatePlacementGroup", 
                "ec2:DeletePlacementGroup", 
                "ec2:DescribePlacementGroups", 
                "ec2:DeleteFlowLogs", 
                "ec2:DeleteNatGateway", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteTags", 
                "ec2:DeleteVpc", 
                "ec2:DeleteVpcEndpoints", 
                "ec2:DeleteVpnConnection", 
                "ec2:DeleteVpnConnectionRoute", 
                "ec2:DeleteVpnGateway", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeVpcClassicLinkDnsSupport", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "ec2:DetachInternetGateway", 
                "ec2:DetachNetworkInterface", 
                "ec2:DetachVpnGateway", 
                "ec2:DisableVgwRoutePropagation", 
                "ec2:DisassociateAddress", 
                "ec2:DisassociateRouteTable", 
                "ec2:EnableVgwRoutePropagation", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:ModifySubnetAttribute", 
                "ec2:ModifyVpcAttribute", 
                "ec2:ModifyVpcEndpoint", 
                "ec2:MoveAddressToVpc", 
                "ec2:ReleaseAddress", 
                "ec2:ReplaceNetworkAclAssociation", 
                "ec2:ReplaceNetworkAclEntry", 
                "ec2:ReplaceRoute", 
                "ec2:ReplaceRouteTableAssociation", 
                "ec2:ResetNetworkInterfaceAttribute", 
                "ec2:RestoreAddressToClassic", 
                "ec2:UnassignPrivateIpAddresses", 
                "directconnect:*", 
                "route53:*", 
                "route53domains:*", 
                "cloudfront:ListDistributions", 
                "elasticloadbalancing:*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:RetrieveEnvironmentInfo", 
                "elasticbeanstalk:RequestEnvironmentInfo", 
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:CreateTopic", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AcceptVpcPeeringConnection", 
                "ec2:AttachClassicLinkVpc", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateVpcPeeringConnection", 
                "ec2:DeleteCustomerGateway", 
                "ec2:DeleteDhcpOptions", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteNetworkAcl", 
                "ec2:DeleteNetworkAclEntry", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteVolume", 
                "ec2:DeleteVpcPeeringConnection", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:DisableVpcClassicLink", 
                "ec2:EnableVpcClassicLink", 
                "ec2:GetConsoleScreenshot", 
                "ec2:RejectVpcPeeringConnection", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "s3:GetBucketWebsiteConfiguration"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:ListRoles", 
                "iam:PassRole"
            ], 
            "Resource": "arn:aws:iam::*:role/flow-logs-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonWorkSpacesApplicationManagerAdminAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "wam:AuthenticatePackager", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDRSVPCManagement
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRedshiftServiceLinkedRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeAddresses", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSXrayFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "xray:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkWorkerTier
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "MetricsAccess"
        }, 
        {
            "Action": [
                "xray:PutTraceSegments", 
                "xray:PutTelemetryRecords"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "XRayAccess"
        }, 
        {
            "Action": [
                "sqs:ChangeMessageVisibility", 
                "sqs:DeleteMessage", 
                "sqs:ReceiveMessage", 
                "sqs:SendMessage"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "QueueAccess"
        }, 
        {
            "Action": [
                "s3:Get*", 
                "s3:List*", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "BucketAccess"
        }, 
        {
            "Action": [
                "dynamodb:BatchGetItem", 
                "dynamodb:BatchWriteItem", 
                "dynamodb:DeleteItem", 
                "dynamodb:GetItem", 
                "dynamodb:PutItem", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "dynamodb:UpdateItem"
            ], 
            "Resource": [
                "arn:aws:dynamodb:*:*:table/*-stack-AWSEBWorkerCronLeaderRegistry*"
            ], 
            "Effect": "Allow", 
            "Sid": "DynamoPeriodicTasks"
        }, 
        {
            "Action": [
                "logs:PutLogEvents", 
                "logs:CreateLogStream"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudWatchLogsAccess"
        }
    ]
}
Policy Name: AWSDirectConnectFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "directconnect:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeBuildAdminAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codebuild:*", 
                "codecommit:GetBranch", 
                "codecommit:GetCommit", 
                "codecommit:GetRepository", 
                "codecommit:ListBranches", 
                "codecommit:ListRepositories", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "s3:GetBucketLocation", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:PutParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisAnalyticsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "kinesisanalytics:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesis:CreateStream", 
                "kinesis:DeleteStream", 
                "kinesis:DescribeStream", 
                "kinesis:ListStreams", 
                "kinesis:PutRecord", 
                "kinesis:PutRecords"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "firehose:DescribeDeliveryStream", 
                "firehose:ListDeliveryStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "logs:GetLogEvents", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListPolicyVersions", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/service-role/kinesis-analytics*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: APIGatewayServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticloadbalancing:AddListenerCertificates", 
                "elasticloadbalancing:RemoveListenerCertificates", 
                "elasticloadbalancing:ModifyListener"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAccountActivityAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-portal:ViewBilling"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGlacierFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "glacier:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonWorkMailFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:AuthorizeApplication", 
                "ds:CheckAlias", 
                "ds:CreateAlias", 
                "ds:CreateDirectory", 
                "ds:CreateIdentityPoolDirectory", 
                "ds:CreateDomain", 
                "ds:DeleteAlias", 
                "ds:DeleteDirectory", 
                "ds:DescribeDirectories", 
                "ds:ExtendDirectory", 
                "ds:GetDirectoryLimits", 
                "ds:ListAuthorizedApplications", 
                "ds:UnauthorizeApplication", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteVpc", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeDomains", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "kms:DescribeKey", 
                "kms:ListAliases", 
                "ses:*", 
                "workmail:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DAXServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceManageSubscriptions
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:ViewSubscriptions", 
                "aws-marketplace:Subscribe", 
                "aws-marketplace:Unsubscribe"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkCustomPlatformforEC2Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CopyImage", 
                "ec2:CreateImage", 
                "ec2:CreateKeypair", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:DeleteKeypair", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteVolume", 
                "ec2:DeregisterImage", 
                "ec2:DescribeImageAttribute", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeRegions", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "ec2:GetPasswordData", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:ModifySnapshotAttribute", 
                "ec2:RegisterImage", 
                "ec2:RunInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "EC2Access"
        }, 
        {
            "Action": [
                "s3:Get*", 
                "s3:List*", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "BucketAccess"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/platform/*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchLogsAccess"
        }
    ]
}
Policy Name: AWSSupportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "support:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticMapReduceforAutoScalingRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "elasticmapreduce:ListInstanceGroups", 
                "elasticmapreduce:ModifyInstanceGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaInvocation-DynamoDB
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "dynamodb:DescribeStream", 
                "dynamodb:GetRecords", 
                "dynamodb:GetShardIterator", 
                "dynamodb:ListStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSServiceCatalogEndUserFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:SetStackPolicy", 
                "cloudformation:ValidateTemplate", 
                "cloudformation:UpdateStack", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:DescribeChangeSet", 
                "cloudformation:ExecuteChangeSet", 
                "cloudformation:ListChangeSets", 
                "cloudformation:DeleteChangeSet"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/SC-*", 
                "arn:aws:cloudformation:*:*:changeSet/SC-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:GetTemplateSummary", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:ProvisionProduct", 
                "servicecatalog:SearchProducts"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "servicecatalog:DescribeProvisionedProduct", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:ScanProvisionedProducts", 
                "servicecatalog:TerminateProvisionedProduct", 
                "servicecatalog:UpdateProvisionedProduct", 
                "servicecatalog:SearchProvisionedProducts", 
                "servicecatalog:CreateProvisionedProductPlan", 
                "servicecatalog:DescribeProvisionedProductPlan", 
                "servicecatalog:ExecuteProvisionedProductPlan", 
                "servicecatalog:DeleteProvisionedProductPlan", 
                "servicecatalog:ListProvisionedProductPlans"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "servicecatalog:userLevel": "self"
                }
            }
        }
    ]
}
Policy Name: IAMUserSSHKeys
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:DeleteSSHPublicKey", 
                "iam:GetSSHPublicKey", 
                "iam:ListSSHPublicKeys", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSageMakerReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sagemaker:DescribeEndpoint", 
                "sagemaker:DescribeEndpointConfig", 
                "sagemaker:DescribeModel", 
                "sagemaker:DescribeTrainingJob", 
                "sagemaker:DescribeNotebookInstance", 
                "sagemaker:ListEndpointConfigs", 
                "sagemaker:ListEndpoints", 
                "sagemaker:ListModels", 
                "sagemaker:ListTags", 
                "sagemaker:ListTrainingJobs", 
                "sagemaker:ListNotebookInstances", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:DescribeScheduledActions", 
                "cloudwatch:DescribeAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSQuickSightDescribeRDS
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigRulesExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::*/AWSLogs/*/Config/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "config:Put*", 
                "config:Get*", 
                "config:List*", 
                "config:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonESReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "es:Describe*", 
                "es:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployDeployerAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codedeploy:Batch*", 
                "codedeploy:CreateDeployment", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codedeploy:RegisterApplicationRevision"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonPollyFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "polly:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMMaintenanceWindowRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:GetAutomationExecution", 
                "ssm:GetParameters", 
                "ssm:ListCommands", 
                "ssm:SendCommand", 
                "ssm:StartAutomationExecution"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1477803259000"
        }, 
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:SSM*", 
                "arn:aws:lambda:*:*:function:*:SSM*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1477803259001"
        }, 
        {
            "Action": [
                "states:DescribeExecution", 
                "states:StartExecution"
            ], 
            "Resource": [
                "arn:aws:states:*:*:stateMachine:SSM*", 
                "arn:aws:states:*:*:execution:SSM*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1477803259002"
        }
    ]
}
Policy Name: AmazonRDSEnhancedMonitoringRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:PutRetentionPolicy"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:RDS*"
            ], 
            "Effect": "Allow", 
            "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogGroups"
        }, 
        {
            "Action": [
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:RDS*:log-stream:*"
            ], 
            "Effect": "Allow", 
            "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogStreams"
        }
    ]
}
Policy Name: AmazonLexFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "kms:DescribeKey", 
                "kms:ListAliases", 
                "lambda:GetPolicy", 
                "lambda:ListFunctions", 
                "lex:*", 
                "polly:DescribeVoices", 
                "polly:SynthesizeSpeech"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:AddPermission", 
                "lambda:RemovePermission"
            ], 
            "Resource": "arn:aws:lambda:*:*:function:AmazonLex*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "lambda:Principal": "lex.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:DeleteRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots", 
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "lex.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:DetachRolePolicy"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/AmazonLexBotPolicy"
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "channels.lex.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:DetachRolePolicy"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/LexChannelPolicy"
                }
            }
        }
    ]
}
Policy Name: AWSLambdaVPCAccessExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DeleteNetworkInterface"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMacieServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:Get*", 
                "s3:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonLexRunBotsOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lex:PostContent", 
                "lex:PostText"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSNSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSServiceCatalogAdminFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:SetStackPolicy", 
                "cloudformation:UpdateStack", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:DescribeChangeSet", 
                "cloudformation:ExecuteChangeSet", 
                "cloudformation:ListChangeSets", 
                "cloudformation:DeleteChangeSet", 
                "cloudformation:ListStackResources"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/SC-*", 
                "arn:aws:cloudformation:*:*:changeSet/SC-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:CreateUploadBucket", 
                "cloudformation:GetTemplateSummary", 
                "cloudformation:ValidateTemplate", 
                "iam:GetGroup", 
                "iam:GetRole", 
                "iam:GetUser", 
                "iam:ListGroups", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "servicecatalog:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": "servicecatalog.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: CloudSearchReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudsearch:Describe*", 
                "cloudsearch:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSGreengrassFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "greengrass:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudFormationReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:Describe*", 
                "cloudformation:EstimateTemplateCost", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:ValidateTemplate"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:*", 
                "route53domains:*", 
                "cloudfront:ListDistributions", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticbeanstalk:DescribeEnvironments", 
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "s3:GetBucketWebsite", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeRegions", 
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaENIManagementAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DeleteNetworkInterface"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksCloudWatchLogs
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAppStreamReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:Get*", 
                "appstream:List*", 
                "appstream:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStepFunctionsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "states:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonInspectorReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "inspector:Describe*", 
                "inspector:Get*", 
                "inspector:List*", 
                "inspector:LocalizeText", 
                "inspector:Preview*", 
                "ec2:DescribeInstances", 
                "ec2:DescribeTags", 
                "sns:ListTopics", 
                "events:DescribeRule", 
                "events:ListRuleNamesByTarget"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: TranslateReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "translate:TranslateText", 
                "comprehend:DetectDominantLanguage", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCertificateManagerFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: PowerUserAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "NotAction": [
                "iam:*", 
                "organizations:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole", 
                "iam:DeleteServiceLinkedRole", 
                "iam:ListRoles", 
                "organizations:DescribeOrganization"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSageMakerFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sagemaker:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:BatchGetImage", 
                "ecr:BatchCheckLayerAvailability", 
                "cloudwatch:PutMetricData", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeleteScheduledAction", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:DescribeScheduledActions", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:PutScheduledAction", 
                "application-autoscaling:RegisterScalableTarget", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject"
            ], 
            "Resource": [
                "arn:aws:s3:::*SageMaker*", 
                "arn:aws:s3:::*Sagemaker*", 
                "arn:aws:s3:::*sagemaker*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:GetBucketLocation", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEqualsIgnoreCase": {
                    "s3:ExistingObjectTag/SageMaker": "true"
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": "sagemaker.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSElementalMediaStoreFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mediastore:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "Bool": {
                    "aws:SecureTransport": "true"
                }
            }
        }
    ]
}
Policy Name: CloudWatchEventsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "events:*", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsFullAccess"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/AWS_Events_Invoke_Targets", 
            "Effect": "Allow", 
            "Sid": "IAMPassRoleForCloudWatchEvents"
        }
    ]
}
Policy Name: adp-sandbox-1-10-OpsManStack-I3HVH0WO6321-PcfIamPolicy-VFQR69G4ZWHS
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:Add*", 
                "iam:Attach*", 
                "iam:ChangePassword", 
                "iam:Create*", 
                "iam:DeactivateMFADevice", 
                "iam:Delete*", 
                "iam:Detach*", 
                "iam:EnableMFADevice", 
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:GetAccessKeyLastUsed", 
                "iam:GetAccountAuthorizationDetails", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetContextKeysForCustomPolicy", 
                "iam:GetContextKeysForPrincipalPolicy", 
                "iam:GetCredentialReport", 
                "iam:GetGroup", 
                "iam:GetGroupPolicy", 
                "iam:GetLoginProfile", 
                "iam:GetOpenIDConnectProvider", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:GetSAMLProvider", 
                "iam:GetSSHPublicKey", 
                "iam:GetServerCertificate", 
                "iam:GetServiceLastAccessedDetails", 
                "iam:GetUser", 
                "iam:GetUserPolicy", 
                "iam:List*", 
                "iam:Put*", 
                "iam:RemoveClientIDFromOpenIDConnectProvider", 
                "iam:RemoveRoleFromInstanceProfile", 
                "iam:RemoveUserFromGroup", 
                "iam:ResyncMFADevice", 
                "iam:SetDefaultPolicyVersion", 
                "iam:SimulateCustomPolicy", 
                "iam:SimulatePrincipalPolicy", 
                "iam:Update*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Deny"
        }, 
        {
            "Action": [
                "iam:GetInstanceProfile"
            ], 
            "Resource": [
                "arn:aws:iam::966497653753:instance-profile/adp-sandbox-1-10-OpsManStack-I3HVH0WO6321-PcfIamInstanceProfile-J8BJ9QWR024G"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowToGetInfoAboutCurrentInstanceProfile"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::966497653753:role/adp-sandbox-1-10-OpsManStack-I3HVH0WO63-PcfIamRole-4X23TX47GY86"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowToCreateInstanceWithCurrentInstanceProfile"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::adp-sandbox-1-10-opsmanstac-pcfopsmanagers3bucket-3m3y2g49rjbv", 
                "arn:aws:s3:::adp-sandbox-1-10-opsmanstac-pcfopsmanagers3bucket-3m3y2g49rjbv/*"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerS3Permissions"
        }, 
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:RunInstances", 
                "ec2:RebootInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeKeypairs", 
                "ec2:DescribeRegions", 
                "ec2:DescribeSnapshots", 
                "ec2:CreateSnapshot", 
                "ec2:DeleteSnapshot", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:CreateTags", 
                "ec2:DescribeVolumes", 
                "ec2:CreateVolume", 
                "ec2:AttachVolume", 
                "ec2:DeleteVolume", 
                "ec2:DetachVolume"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerEc2Permissions"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerElbPermissions"
        }
    ]
}
Policy Name: ADPMaintenance
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:*", 
                "cloudformation:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListStackResources", 
                "cloudformation:UpdateStack", 
                "cloudwatch:*", 
                "cloudwatch:Describe*", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "ec2:AssociateAddress", 
                "ec2:AssociateSubnetCidrBlock", 
                "ec2:Attach*", 
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CopyImage", 
                "ec2:CreateFpgaImage", 
                "ec2:CreateImage", 
                "ec2:CreateKeyPair", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSecurityGroupEgress", 
                "ec2:CreateSecurityGroupIngress", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:CreateInternetGateway", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteKeyPair", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteVolume", 
                "ec2:DeregisterImage", 
                "ec2:Describe*", 
                "ec2:DescribeKeyPairs", 
                "ec2:Detach*", 
                "ec2:DetachVolume", 
                "ec2:DetachInternetGateway", 
                "ec2:DisassociateSubnetCidrBlock", 
                "ec2:Get*", 
                "ec2:ImportKeyPair", 
                "ec2:InstanceType", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:ModifyVolume", 
                "ec2:ModifyVolumeAttribute", 
                "ec2:RebootInstances", 
                "ec2:RegisterImage", 
                "ec2:ReplaceNetworkAclAssociation", 
                "ec2:ReplaceNetworkAclEntry", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:UpdateSecurityGroupRuleDescriptionsEgress", 
                "ec2:UpdateSecurityGroupRuleDescriptionsIngress", 
                "elasticfilesystem:ModifyMountTargetSecurityGroups", 
                "elasticloadbalancing:ConfigureHealthCheck", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:ModifyLoadBalancerAttributes", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:SetLoadBalancerPoliciesOfListener", 
                "events:DeleteRule", 
                "events:DescribeRule", 
                "events:DescribeRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "iam:AddRoleToInstanceProfile", 
                "iam:AttachRolePolicy", 
                "iam:AttachUserPolicy", 
                "iam:CreateAccessKey", 
                "iam:CreateInstanceProfile", 
                "iam:CreateRole", 
                "iam:CreateUser", 
                "iam:DeleteAccessKey", 
                "iam:DeleteInstanceProfile", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DeleteUser", 
                "iam:DeleteUserPolicy", 
                "iam:DetachRolePolicy", 
                "iam:GetInstanceProfile", 
                "iam:GetRole", 
                "iam:GetSSHPublicKey", 
                "iam:GetUser", 
                "iam:ListAccessKeys", 
                "iam:ListRolePolicies", 
                "iam:ListRoles", 
                "iam:ListSSHPublicKeys ", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:PutUserPolicy", 
                "iam:RemoveRoleFromInstanceProfile", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey ", 
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:DeleteKey", 
                "kms:Decrypt", 
                "kms:Encrypt", 
                "kms:Get*", 
                "kms:ListAliases", 
                "kms:ListKeys", 
                "kms:Enable*", 
                "kms:Put*", 
                "kms:ScheduleKeyDeletion", 
                "kms:TagResource", 
                "lambda:*", 
                "lambda:AddPermission", 
                "lambda:CreateFunction", 
                "lambda:GetAccountSettings", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListAliases", 
                "lambda:ListFunctions", 
                "lambda:ListTags", 
                "lambda:TagResource", 
                "lambda:UntagResource", 
                "lambda:UpdateFunctionCode", 
                "lambda:UpdateFunctionConfiguration", 
                "logs:Describe*", 
                "logs:FilterLogEvents", 
                "logs:GetLogEvents", 
                "logs:TestMetricFilter", 
                "rds:*", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateRecordSet", 
                "route53:DeleteRecordSet", 
                "route53:GetChange", 
                "route53:GetHostedZone", 
                "route53:ListHostedZones", 
                "route53:ListResourceRecordSets", 
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteObject", 
                "s3:DeleteObjectVersion", 
                "s3:GetBucketAcl", 
                "s3:GetBucketLocation", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:GetObjectAcl", 
                "s3:GetObjectVersion", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:ListBucketVersions", 
                "s3:PutBucketAcl", 
                "s3:PutBucketPolicy", 
                "s3:PutObject", 
                "s3:PutObjectAcl", 
                "sns:ListTopics", 
                "sns:GetTopicAttributes", 
                "sns:ConfirmSubscription", 
                "sns:CreateTopic", 
                "sns:Publish*", 
                "sns:SetTopicAttributes", 
                "sns:Subscribe", 
                "sts:DecodeAuthorizationMessage", 
                "sts:DecodeAuthorizationMessage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudFormationFullAccessAllianz
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AZD-compliance-reports
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "artifact:Get"
            ], 
            "Resource": [
                "arn:aws:artifact:::report-package/Certifications and Attestations/SOC/*", 
                "arn:aws:artifact:::report-package/Certifications and Attestations/PCI/*", 
                "arn:aws:artifact:::report-package/Certifications and Attestations/ISO/*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: bosh-policy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AssociateAddress", 
                "ec2:AttachVolume", 
                "ec2:CreateVolume", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteVolume", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeRegions", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:TerminateInstances", 
                "ec2:RegisterImage", 
                "ec2:DeregisterImage", 
                "ec2:ResetInstanceAttribute"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudFormsPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:ListCertificates", 
                "athena:List*", 
                "aws-marketplace:ViewSubscriptions", 
                "autoscaling:Describe*", 
                "batch:ListJobs", 
                "clouddirectory:ListAppliedSchemaArns", 
                "clouddirectory:ListDevelopmentSchemaArns", 
                "clouddirectory:ListDirectories", 
                "clouddirectory:ListPublishedSchemaArns", 
                "cloudformation:List*", 
                "cloudformation:DescribeStacks", 
                "cloudfront:List*", 
                "cloudhsm:ListAvailableZones", 
                "cloudhsm:ListLunaClients", 
                "cloudhsm:ListHapgs", 
                "cloudhsm:ListHsms", 
                "cloudsearch:List*", 
                "cloudsearch:DescribeDomains", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:LookupEvents", 
                "cloudwatch:List*", 
                "cloudformation:GetTemplate", 
                "cloudwatch:GetMetricData", 
                "codebuild:ListBuilds*", 
                "codebuild:ListProjects", 
                "codecommit:List*", 
                "codedeploy:List*", 
                "codedeploy:Get*", 
                "codepipeline:ListPipelines", 
                "codestar:List*", 
                "codestar:Verify*", 
                "cognito-idp:List*", 
                "cognito-identity:ListIdentities", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:ListDatasets", 
                "connect:List*", 
                "config:List*", 
                "config:Describe*", 
                "datapipeline:ListPipelines", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetAccountLimits", 
                "devicefarm:List*", 
                "directconnect:Describe*", 
                "discovery:List*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListTables", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeBundleTasks", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeHost*", 
                "ec2:DescribeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeImage*", 
                "ec2:DescribeImport*", 
                "ec2:DescribeInstance*", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetwork*", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeReserved*", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshot*", 
                "ec2:DescribeSpot*", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolume*", 
                "ec2:DescribeVpc*", 
                "ec2:DescribeVpnGateways", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:DescribeApplicationVersions", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticbeanstalk:ListAvailableSolutionStacks", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "es:DescribeElasticsearchDomain", 
                "es:DescribeElasticsearchDomains", 
                "es:ListDomainNames", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "firehose:List*", 
                "firehose:DescribeDeliveryStream", 
                "gamelift:List*", 
                "glacier:List*", 
                "iam:List*", 
                "iam:GetAccountSummary", 
                "iam:GetLoginProfile", 
                "importexport:ListJobs", 
                "inspector:List*", 
                "iot:List*", 
                "kinesis:ListStreams", 
                "kinesisanalytics:ListApplications", 
                "kms:ListKeys", 
                "lambda:List*", 
                "lex:GetBotAliases", 
                "lex:GetBotChannelAssociations", 
                "lex:GetBots", 
                "lex:GetBotVersions", 
                "lex:GetIntents", 
                "lex:GetIntentVersions", 
                "lex:GetSlotTypes", 
                "lex:GetSlotTypeVersions", 
                "lex:GetUtterancesView", 
                "lightsail:GetBlueprints", 
                "lightsail:GetBundles", 
                "lightsail:GetInstances", 
                "lightsail:GetInstanceSnapshots", 
                "lightsail:GetKeyPair", 
                "lightsail:GetRegions", 
                "lightsail:GetStaticIps", 
                "lightsail:IsVpcPeered", 
                "logs:Describe*", 
                "machinelearning:Describe*", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "opsworks:Describe*", 
                "opsworks-cm:Describe*", 
                "organizations:List*", 
                "mobiletargeting:GetApplicationSettings", 
                "mobiletargeting:GetCampaigns", 
                "mobiletargeting:GetImportJobs", 
                "mobiletargeting:GetSegments", 
                "polly:Describe*", 
                "polly:List*", 
                "rds:Describe*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeEvents", 
                "redshift:ViewQueriesInConsole", 
                "route53:List*", 
                "route53:Get*", 
                "route53domains:List*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "sdb:List*", 
                "servicecatalog:List*", 
                "ses:List*", 
                "shield:List*", 
                "states:ListActivities", 
                "states:ListStateMachines", 
                "sns:List*", 
                "sqs:ListQueues", 
                "ssm:ListAssociations", 
                "ssm:ListDocuments", 
                "storagegateway:ListGateways", 
                "storagegateway:ListLocalDisks", 
                "storagegateway:ListVolumeRecoveryPoints", 
                "storagegateway:ListVolumes", 
                "swf:List*", 
                "trustedadvisor:Describe*", 
                "waf:List*", 
                "waf-regional:List*", 
                "workdocs:DescribeAvailableDirectories", 
                "workdocs:DescribeInstances", 
                "workmail:Describe*", 
                "workspaces:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: COOperatorBasePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sts:AssumeRoleWithSAML", 
                "sts:DecodeAuthorizationMessage", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:LookupEvents", 
                "cloudtrail:ListTags", 
                "cloudtrail:ListPublicKeys", 
                "cloudtrail:GetEventSelectors", 
                "events:*", 
                "cloudwatch:*", 
                "logs:*", 
                "application-autoscaling:*", 
                "autoscaling:*", 
                "elasticloadbalancing:*", 
                "health:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "Stmt1485445242699"
        }, 
        {
            "Action": "sns:*", 
            "Resource": [
                "arn:aws:sns:eu-central-1:966497653753:AZD-CO*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1485447940025"
        }, 
        {
            "Action": "sqs:*", 
            "Resource": [
                "arn:aws:sqs:eu-central-1:966497653753:AZD-CO*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1485447940027"
        }, 
        {
            "Action": "s3:*", 
            "Resource": [
                "arn:aws:s3:::AZD-${RoleName}*", 
                "arn:aws:s3:::AZD-${RoleName}*/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:Get*", 
                "iam:List*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreatePolicy", 
                "iam:CreatePolicyVersion", 
                "iam:DeletePolicy", 
                "iam:DeletePolicyVersion", 
                "iam:SimulateCustomPolicy"
            ], 
            "Resource": "arn:aws:iam::966497653753:policy/AZD-CO*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole", 
                "iam:GetRole*"
            ], 
            "Resource": "arn:aws:iam::966497653753:role/AZD-CO", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:Describe*", 
                "kms:List*", 
                "kms:Describe*", 
                "kms:GenerateRandom"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:*"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:966497653753:stack/AZD-CO*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:CreateChangeSet", 
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:ExecuteChangeSet", 
                "cloudformation:SetStackPolicy", 
                "cloudformation:UpdateStack"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:966497653753:stack/AZD-CO*"
            ], 
            "Effect": "Deny"
        }, 
        {
            "Action": [
                "ec2:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowToDescribeAll"
        }, 
        {
            "Action": "ec2:*", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEqualsIgnoreCase": {
                    "ec2:ResourceTag/Team": [
                        "CO"
                    ]
                }
            }, 
            "Sid": "AllowModifyInstances"
        }, 
        {
            "Action": "ec2:RunInstances", 
            "Resource": [
                "arn:aws:ec2:eu-central-1::image/*", 
                "arn:aws:ec2:eu-central-1:966497653753:subnet/*", 
                "arn:aws:ec2:eu-central-1:966497653753:network-interface/*", 
                "arn:aws:ec2:eu-central-1:966497653753:security-group/*", 
                "arn:aws:ec2:eu-central-1:966497653753:key-pair/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowRunInstances"
        }, 
        {
            "Action": [
                "ec2:CreateVolume", 
                "ec2:RunInstances"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:volume/*", 
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAnyValue:StringEquals": {
                    "aws:TagKeys": [
                        "Team"
                    ]
                }, 
                "StringEquals": {
                    "aws:RequestTag/Team": [
                        "CO"
                    ]
                }
            }, 
            "Sid": "AllowRunInstancesWithRestrictions"
        }, 
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:volume/*", 
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "ec2:CreateAction": "RunInstances"
                }
            }, 
            "Sid": "AllowCreateTagsOnlyLaunching"
        }
    ]
}
Policy Name: COOperatorCustomPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "PlaceholderStatement"
        }
    ]
}
Policy Name: CRPMaintenance
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListStackResources", 
                "cloudformation:UpdateStack", 
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSecurityGroupEgress", 
                "ec2:CreateSecurityGroupIngress", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteVolume", 
                "ec2:Describe*", 
                "ec2:DetachVolume", 
                "ec2:ModifyVolumeAttribute", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "elasticloadbalancing:ConfigureHealthCheck", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:ModifyLoadBalancerAttributes", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:SetLoadBalancerPoliciesOfListener", 
                "iam:AddRoleToInstanceProfile", 
                "iam:CreateAccessKey", 
                "iam:CreateInstanceProfile", 
                "iam:CreateRole", 
                "iam:CreateUser", 
                "iam:DeleteAccessKey", 
                "iam:DeleteInstanceProfile", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DeleteUser", 
                "iam:DeleteUserPolicy", 
                "iam:GetRole", 
                "iam:GetUser", 
                "iam:ListAccessKeys", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:PutUserPolicy", 
                "iam:RemoveRoleFromInstanceProfile", 
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:DeleteAlias", 
                "kms:DeleteKey", 
                "kms:ListAliases", 
                "kms:ListKeys", 
                "kms:ScheduleKeyDeletion", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateRecordSet", 
                "route53:DeleteRecordSet", 
                "route53:GetChange", 
                "route53:ListHostedZones", 
                "route53:ListResourceRecordSets", 
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "sts:DecodeAuthorizationMessage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DenyTagPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "NotAction": [
                "sns:Publish"
            ], 
            "Resource": "arn:aws:sns:eu-central-1:966497653753:AZD-CO*", 
            "Effect": "Deny", 
            "Sid": "Stmt1485447940026"
        }, 
        {
            "NotAction": [
                "sqs:SendMessage"
            ], 
            "Resource": [
                "arn:aws:sqs:eu-central-1:966497653753:AZD-CO*"
            ], 
            "Effect": "Deny", 
            "Sid": "Stmt1485447940028"
        }, 
        {
            "Action": [
                "cloudtrail:DeleteTrail", 
                "cloudtrail:StopLogging"
            ], 
            "Resource": "*", 
            "Effect": "Deny", 
            "Sid": "Stmt1485447940029"
        }, 
        {
            "Action": [
                "route53:AssociateVPCWithHostedZone", 
                "route53:CreateHostedZone", 
                "route53:DeleteHostedZone", 
                "route53:DisassociateVPCFromHostedZone"
            ], 
            "Resource": "*", 
            "Effect": "Deny", 
            "Sid": "Stmt1485447940030"
        }, 
        {
            "Action": [
                "route53domains:DeleteDomain", 
                "route53domains:DeleteTagsForDomain", 
                "route53domains:DisableDomainAutoRenew", 
                "route53domains:DisableDomainTransferLock", 
                "route53domains:EnableDomainAutoRenew", 
                "route53domains:EnableDomainTransferLock", 
                "route53domains:RegisterDomain", 
                "route53domains:RenewDomain", 
                "route53domains:ResendContactReachabilityEmail", 
                "route53domains:RetrieveDomainAuthCode", 
                "route53domains:TransferDomain", 
                "route53domains:UpdateDomainContact", 
                "route53domains:UpdateDomainContactPrivacy", 
                "route53domains:UpdateDomainNameservers", 
                "route53domains:UpdateTagsForDomain"
            ], 
            "Resource": "*", 
            "Effect": "Deny", 
            "Sid": "Stmt1485447940031"
        }, 
        {
            "Action": [
                "ec2:DeleteTags"
            ], 
            "Resource": [
                "arn:aws:ec2:eu-central-1:966497653753:*/*"
            ], 
            "Effect": "Deny", 
            "Condition": {
                "ForAnyValue:StringEquals": {
                    "aws:TagKeys": [
                        "Team"
                    ]
                }
            }
        }
    ]
}
Policy Name: IAMCfnAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:List*", 
                "iam:Get*", 
                "iam:CreateAccessKey", 
                "iam:CreateRole", 
                "iam:DeleteAccessKey", 
                "iam:PassRole", 
                "iam:AttachRolePolicy", 
                "iam:CreatePolicy", 
                "iam:CreatePolicyVersion", 
                "iam:PutRolePolicy", 
                "iam:UpdateAssumeRolePolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: Manage_Snapshots_Policy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:*"
            ], 
            "Resource": "arn:aws:logs:*:*:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "ec2:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateSnapshot", 
                "ec2:DeleteSnapshot", 
                "ec2:CreateTags", 
                "ec2:ModifySnapshotAttribute", 
                "ec2:ResetSnapshotAttribute"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: NetworkServicePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:List*", 
                "dynamodb:Get*", 
                "dynamodb:Describe*", 
                "s3:List*", 
                "s3:Get*", 
                "s3:Describe*", 
                "ec2:AllocateAddress", 
                "ec2:AssociateAddress", 
                "ec2:DescribeAddresses", 
                "ec2:DisassociateAddress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: OMSS3Policy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:PutObject", 
                "s3:GetObject", 
                "s3:DeleteObject", 
                "s3:ListObjects"
            ], 
            "Resource": [
                "arn:aws:s3:::azd-s3-oms-poc*"
            ], 
            "Effect": "Allow", 
            "Sid": "s3access"
        }
    ]
}
Policy Name: service-role-config_AWSConfigDeliveryPermissions_eu-central-1
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:PutObject*"
            ], 
            "Resource": [
                "arn:aws:s3:::config-966497653753/AWSLogs/966497653753/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "s3:x-amz-acl": "bucket-owner-full-control"
                }
            }
        }, 
        {
            "Action": [
                "s3:GetBucketAcl"
            ], 
            "Resource": "arn:aws:s3:::config-966497653753", 
            "Effect": "Allow"
        }, 
        {
            "Action": "sns:Publish", 
            "Resource": "arn:aws:sns:eu-central-1:966497653753:config-topic", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: TagTestPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowToDescribeAll"
        }, 
        {
            "Action": "ec2:*", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEqualsIgnoreCase": {
                    "ec2:ResourceTag/ManagedBy": "Marx"
                }
            }, 
            "Sid": "AllowModifyInstances"
        }, 
        {
            "Action": "ec2:RunInstances", 
            "Resource": [
                "arn:aws:ec2:*::image/*", 
                "arn:aws:ec2:*::snapshot/*", 
                "arn:aws:ec2:*:*:subnet/*", 
                "arn:aws:ec2:*:*:network-interface/*", 
                "arn:aws:ec2:*:*:security-group/*", 
                "arn:aws:ec2:*:*:key-pair/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowRunInstances"
        }, 
        {
            "Action": [
                "ec2:CreateVolume", 
                "ec2:RunInstances"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:volume/*", 
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAnyValue:StringEquals": {
                    "aws:TagKeys": [
                        "ManagedBy"
                    ]
                }, 
                "StringEquals": {
                    "aws:RequestTag/ManagedBy": "Marx"
                }
            }, 
            "Sid": "AllowRunInstancesWithRestrictions"
        }, 
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:volume/*", 
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "ec2:CreateAction": "RunInstances"
                }
            }, 
            "Sid": "AllowCreateTagsOnlyLaunching"
        }
    ]
}
Policy Name: TestPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ViewOnlyPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "connect:List*", 
                "config:List*", 
                "config:Describe*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListTables", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeBundleTasks", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeHost*", 
                "ec2:DescribeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeImage*", 
                "ec2:DescribeImport*", 
                "ec2:DescribeInstance*", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetwork*", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeReserved*", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshot*", 
                "ec2:DescribeSpot*", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolume*", 
                "ec2:DescribeVpc*", 
                "ec2:DescribeVpnGateways", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:DescribeApplicationVersions", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticbeanstalk:ListAvailableSolutionStacks", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "iam:List*", 
                "iam:GetAccountSummary", 
                "iam:GetLoginProfile", 
                "importexport:ListJobs", 
                "inspector:List*", 
                "kms:ListKeys", 
                "lambda:List*", 
                "logs:Describe*", 
                "organizations:List*", 
                "rds:Describe*", 
                "route53:List*", 
                "route53:Get*", 
                "route53domains:List*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:Get*", 
                "sdb:List*", 
                "servicecatalog:List*", 
                "ses:List*", 
                "sns:List*", 
                "sqs:ListQueues", 
                "ssm:ListAssociations", 
                "ssm:ListDocuments", 
                "swf:List*", 
                "trustedadvisor:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDirectConnectReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "directconnect:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGlacierReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glacier:DescribeJob", 
                "glacier:DescribeVault", 
                "glacier:GetDataRetrievalPolicy", 
                "glacier:GetJobOutput", 
                "glacier:GetVaultAccessPolicy", 
                "glacier:GetVaultLock", 
                "glacier:GetVaultNotifications", 
                "glacier:ListJobs", 
                "glacier:ListMultipartUploads", 
                "glacier:ListParts", 
                "glacier:ListTagsForVault", 
                "glacier:ListVaults"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackResource", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:List*", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcs", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingConsoleReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:ListMetrics", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:ListSubscriptions", 
                "sns:ListTopics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDMSRedshiftS3Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:ListBucket", 
                "s3:DeleteBucket", 
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject", 
                "s3:GetObjectVersion", 
                "s3:GetBucketPolicy", 
                "s3:PutBucketPolicy", 
                "s3:DeleteBucketPolicy"
            ], 
            "Resource": "arn:aws:s3:::dms-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSQuickSightListIAM
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSHealthFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "health:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessGatewayExecution
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:Send*", 
                "a4b:Get*"
            ], 
            "Resource": "arn:aws:a4b:*:*:gateway/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sqs:ReceiveMessage", 
                "sqs:DeleteMessage"
            ], 
            "Resource": [
                "arn:aws:sqs:*:*:dd-*", 
                "arn:aws:sqs:*:*:sd-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "a4b:List*", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogGroups", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRDSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:*", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DeleteAlarms", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "sns:ListSubscriptions", 
                "sns:ListTopics", 
                "sns:Publish", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "pi:*", 
            "Resource": "arn:aws:pi:*:*:metrics/rds/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "rds.amazonaws.com", 
                        "rds.application-autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: SupportUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "support:*", 
                "acm:DescribeCertificate", 
                "acm:GetCertificate", 
                "acm:List*", 
                "apigateway:GET", 
                "appstream:Get*", 
                "autoscaling:Describe*", 
                "aws-marketplace:ViewSubscriptions", 
                "cloudformation:Describe*", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:EstimateTemplateCost", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "cloudsearch:Describe*", 
                "cloudsearch:List*", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:LookupEvents", 
                "cloudtrail:ListTags", 
                "cloudtrail:ListPublicKeys", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "codecommit:BatchGetRepositories", 
                "codecommit:Get*", 
                "codecommit:List*", 
                "codedeploy:Batch*", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codepipeline:AcknowledgeJob", 
                "codepipeline:AcknowledgeThirdPartyJob", 
                "codepipeline:ListActionTypes", 
                "codepipeline:ListPipelines", 
                "codepipeline:PollForJobs", 
                "codepipeline:PollForThirdPartyJobs", 
                "codepipeline:GetPipelineState", 
                "codepipeline:GetPipeline", 
                "cognito-identity:List*", 
                "cognito-identity:LookupDeveloperIdentity", 
                "cognito-identity:Describe*", 
                "cognito-idp:Describe*", 
                "cognito-sync:Describe*", 
                "cognito-sync:GetBulkPublishDetails", 
                "cognito-sync:GetCognitoEvents", 
                "cognito-sync:GetIdentityPoolConfiguration", 
                "cognito-sync:List*", 
                "config:DescribeConfigurationRecorders", 
                "config:DescribeConfigurationRecorderStatus", 
                "config:DescribeConfigRuleEvaluationStatus", 
                "config:DescribeConfigRules", 
                "config:DescribeDeliveryChannels", 
                "config:DescribeDeliveryChannelStatus", 
                "config:GetResourceConfigHistory", 
                "config:ListDiscoveredResources", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:QueryObjects", 
                "datapipeline:ReportTaskProgress", 
                "datapipeline:ReportTaskRunnerHeartbeat", 
                "devicefarm:List*", 
                "devicefarm:Get*", 
                "directconnect:Describe*", 
                "discovery:Describe*", 
                "discovery:ListConfigurations", 
                "dms:Describe*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "ds:DescribeSnapshots", 
                "ds:GetDirectoryLimits", 
                "ds:GetSnapshotLimits", 
                "ds:ListAuthorizedApplications", 
                "dynamodb:DescribeLimits", 
                "dynamodb:DescribeTable", 
                "dynamodb:ListTables", 
                "ec2:Describe*", 
                "ec2:DescribeHosts", 
                "ec2:describeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeReservedInstancesModifications", 
                "ec2:DescribeTags", 
                "ec2:GetFlowLogsCount", 
                "ecr:GetRepositoryPolicy", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:Describe*", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticache:List*", 
                "elasticbeanstalk:Check*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:RequestEnvironmentInfo", 
                "elasticbeanstalk:RetrieveEnvironmentInfo", 
                "elasticbeanstalk:ValidateConfigurationSettings", 
                "elasticfilesystem:Describe*", 
                "elasticloadbalancing:Describe*", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "elastictranscoder:ReadJob", 
                "elasticfilesystem:DescribeFileSystems", 
                "es:Describe*", 
                "es:List*", 
                "es:ESHttpGet", 
                "es:ESHttpHead", 
                "events:DescribeRule", 
                "events:List*", 
                "events:TestEventPattern", 
                "firehose:Describe*", 
                "firehose:List*", 
                "gamelift:List*", 
                "gamelift:Describe*", 
                "glacier:ListVaults", 
                "glacier:DescribeVault", 
                "glacier:DescribeJob", 
                "glacier:Get*", 
                "glacier:List*", 
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:Get*", 
                "iam:List*", 
                "importexport:GetStatus", 
                "importexport:ListJobs", 
                "importexport:GetJobDetail", 
                "inspector:Describe*", 
                "inspector:List*", 
                "inspector:GetAssessmentTelemetry", 
                "inspector:LocalizeText", 
                "iot:Describe*", 
                "iot:Get*", 
                "iot:List*", 
                "kinesisanalytics:DescribeApplication", 
                "kinesisanalytics:DiscoverInputSchema", 
                "kinesisanalytics:GetApplicationState", 
                "kinesisanalytics:ListApplications", 
                "kinesis:Describe*", 
                "kinesis:Get*", 
                "kinesis:List*", 
                "kms:Describe*", 
                "kms:Get*", 
                "kms:List*", 
                "lambda:List*", 
                "lambda:Get*", 
                "logs:Describe*", 
                "logs:TestMetricFilter", 
                "machinelearning:Describe*", 
                "machinelearning:Get*", 
                "mobilehub:GetProject", 
                "mobilehub:List*", 
                "mobilehub:ValidateProject", 
                "mobilehub:VerifyServiceRole", 
                "opsworks:Describe*", 
                "rds:Describe*", 
                "rds:ListTagsForResource", 
                "redshift:Describe*", 
                "route53:Get*", 
                "route53:List*", 
                "route53domains:CheckDomainAvailability", 
                "route53domains:GetDomainDetail", 
                "route53domains:GetOperationDetail", 
                "route53domains:List*", 
                "s3:List*", 
                "sdb:GetAttributes", 
                "sdb:List*", 
                "sdb:Select*", 
                "servicecatalog:SearchProducts", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ScanProvisionedProducts", 
                "ses:Get*", 
                "ses:List*", 
                "sns:Get*", 
                "sns:List*", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "sqs:ListQueues", 
                "sqs:ReceiveMessage", 
                "ssm:List*", 
                "ssm:Describe*", 
                "storagegateway:Describe*", 
                "storagegateway:List*", 
                "swf:Count*", 
                "swf:Describe*", 
                "swf:Get*", 
                "swf:List*", 
                "waf:Get*", 
                "waf:List*", 
                "workspaces:Describe*", 
                "workdocs:Describe*", 
                "workmail:Describe*", 
                "workmail:Get*", 
                "workspaces:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "ec2:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "cloudwatch:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": [
                        "autoscaling.amazonaws.com", 
                        "ec2scheduled.amazonaws.com", 
                        "elasticloadbalancing.amazonaws.com", 
                        "spot.amazonaws.com", 
                        "spotfleet.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: SecretsManagerReadWrite
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "secretsmanager:*", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:DescribeChangeSet", 
                "cloudformation:DescribeStackResource", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ExecuteChangeSet", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "kms:DescribeKey", 
                "kms:ListAliases", 
                "kms:ListKeys", 
                "lambda:ListFunctions", 
                "rds:DescribeDBInstances", 
                "tag:GetResources"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:AddPermission", 
                "lambda:CreateFunction", 
                "lambda:GetFunction", 
                "lambda:InvokeFunction", 
                "lambda:UpdateFunctionConfiguration"
            ], 
            "Resource": "arn:aws:lambda:*:*:function:SecretsManager*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "serverlessrepo:CreateCloudFormationChangeSet"
            ], 
            "Resource": "arn:aws:serverlessrepo:*:*:applications/SecretsManager*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::awsserverlessrepo-changesets*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTThingsRegistration
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:AddThingToThingGroup", 
                "iot:AttachPrincipalPolicy", 
                "iot:AttachThingPrincipal", 
                "iot:CreateCertificateFromCsr", 
                "iot:CreatePolicy", 
                "iot:CreateThing", 
                "iot:DescribeCertificate", 
                "iot:DescribeThing", 
                "iot:DescribeThingGroup", 
                "iot:DescribeThingType", 
                "iot:DetachThingPrincipal", 
                "iot:GetPolicy", 
                "iot:ListPolicyPrincipals", 
                "iot:ListPrincipalPolicies", 
                "iot:ListPrincipalThings", 
                "iot:ListThingGroupsForThing", 
                "iot:ListThingPrincipals", 
                "iot:RegisterCertificate", 
                "iot:RegisterThing", 
                "iot:RemoveThingFromThingGroup", 
                "iot:UpdateCertificate", 
                "iot:UpdateThing", 
                "iot:UpdateThingGroupsForThing"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticbeanstalk:Check*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:RequestEnvironmentInfo", 
                "elasticbeanstalk:RetrieveEnvironmentInfo", 
                "ec2:Describe*", 
                "elasticloadbalancing:Describe*", 
                "autoscaling:Describe*", 
                "cloudwatch:Describe*", 
                "cloudwatch:List*", 
                "cloudwatch:Get*", 
                "s3:Get*", 
                "s3:List*", 
                "sns:Get*", 
                "sns:List*", 
                "cloudformation:Describe*", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:Validate*", 
                "cloudformation:Estimate*", 
                "rds:Describe*", 
                "sqs:Get*", 
                "sqs:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElementalMediaStoreReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mediastore:Get*", 
                "mediastore:List*", 
                "mediastore:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "Bool": {
                    "aws:SecureTransport": "true"
                }
            }
        }
    ]
}
Policy Name: AWSCertificateManagerReadOnly
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "acm:DescribeCertificate", 
            "acm:ListCertificates", 
            "acm:GetCertificate", 
            "acm:ListTagsForCertificate"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AWSQuicksightAthenaAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "athena:BatchGetQueryExecution", 
                "athena:CancelQueryExecution", 
                "athena:GetCatalogs", 
                "athena:GetExecutionEngine", 
                "athena:GetExecutionEngines", 
                "athena:GetNamespace", 
                "athena:GetNamespaces", 
                "athena:GetQueryExecution", 
                "athena:GetQueryExecutions", 
                "athena:GetQueryResults", 
                "athena:GetTable", 
                "athena:GetTables", 
                "athena:ListQueryExecutions", 
                "athena:RunQuery", 
                "athena:StartQueryExecution", 
                "athena:StopQueryExecution"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "glue:CreateDatabase", 
                "glue:DeleteDatabase", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:UpdateDatabase", 
                "glue:CreateTable", 
                "glue:DeleteTable", 
                "glue:BatchDeleteTable", 
                "glue:UpdateTable", 
                "glue:GetTable", 
                "glue:GetTables", 
                "glue:BatchCreatePartition", 
                "glue:CreatePartition", 
                "glue:DeletePartition", 
                "glue:BatchDeletePartition", 
                "glue:UpdatePartition", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:BatchGetPartition"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts", 
                "s3:AbortMultipartUpload", 
                "s3:CreateBucket", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-athena-query-results-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeCommitPowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codecommit:BatchGet*", 
                "codecommit:Get*", 
                "codecommit:List*", 
                "codecommit:Create*", 
                "codecommit:DeleteBranch", 
                "codecommit:Describe*", 
                "codecommit:Put*", 
                "codecommit:Post*", 
                "codecommit:Merge*", 
                "codecommit:Test*", 
                "codecommit:Update*", 
                "codecommit:GitPull", 
                "codecommit:GitPush"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "events:DeleteRule", 
                "events:DescribeRule", 
                "events:DisableRule", 
                "events:EnableRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "events:ListTargetsByRule"
            ], 
            "Resource": "arn:aws:events:*:*:rule/codecommit*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsCodeCommitRulesAccess"
        }, 
        {
            "Action": [
                "sns:Subscribe", 
                "sns:Unsubscribe"
            ], 
            "Resource": "arn:aws:sns:*:*:codecommit*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionAccess"
        }, 
        {
            "Action": [
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionReadAccess"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "LambdaReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListAccessKeys", 
                "iam:ListSSHPublicKeys", 
                "iam:ListServiceSpecificCredentials", 
                "iam:ListAccessKeys", 
                "iam:GetSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyConsoleAccess"
        }, 
        {
            "Action": [
                "iam:DeleteSSHPublicKey", 
                "iam:GetSSHPublicKey", 
                "iam:ListSSHPublicKeys", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMUserSSHKeys"
        }, 
        {
            "Action": [
                "iam:CreateServiceSpecificCredential", 
                "iam:UpdateServiceSpecificCredential", 
                "iam:DeleteServiceSpecificCredential", 
                "iam:ResetServiceSpecificCredential"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMSelfManageServiceSpecificCredentials"
        }
    ]
}
Policy Name: AWSCodeCommitFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codecommit:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "events:DeleteRule", 
                "events:DescribeRule", 
                "events:DisableRule", 
                "events:EnableRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "events:ListTargetsByRule"
            ], 
            "Resource": "arn:aws:events:*:*:rule/codecommit*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsCodeCommitRulesAccess"
        }, 
        {
            "Action": [
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sns:SetTopicAttributes"
            ], 
            "Resource": "arn:aws:sns:*:*:codecommit*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionAccess"
        }, 
        {
            "Action": [
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionReadAccess"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "LambdaReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListAccessKeys", 
                "iam:ListSSHPublicKeys", 
                "iam:ListServiceSpecificCredentials", 
                "iam:ListAccessKeys", 
                "iam:GetSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyConsoleAccess"
        }, 
        {
            "Action": [
                "iam:DeleteSSHPublicKey", 
                "iam:GetSSHPublicKey", 
                "iam:ListSSHPublicKeys", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMUserSSHKeys"
        }, 
        {
            "Action": [
                "iam:CreateServiceSpecificCredential", 
                "iam:UpdateServiceSpecificCredential", 
                "iam:DeleteServiceSpecificCredential", 
                "iam:ResetServiceSpecificCredential"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMSelfManageServiceSpecificCredentials"
        }
    ]
}
Policy Name: IAMSelfManageServiceSpecificCredentials
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:CreateServiceSpecificCredential", 
                "iam:ListServiceSpecificCredentials", 
                "iam:UpdateServiceSpecificCredential", 
                "iam:DeleteServiceSpecificCredential", 
                "iam:ResetServiceSpecificCredential"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEMRCleanupPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:TerminateInstances", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeVolumeStatus", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "ec2:DeleteVolume"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9EnvironmentMember
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloud9:GetUserSettings", 
                "cloud9:UpdateUserSettings", 
                "iam:GetUser", 
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloud9:DescribeEnvironmentMemberships"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "Null": {
                    "cloud9:UserArn": "true", 
                    "cloud9:EnvironmentId": "true"
                }
            }
        }
    ]
}
Policy Name: AWSApplicationAutoscalingSageMakerEndpointPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sagemaker:DescribeEndpoint", 
                "sagemaker:DescribeEndpointConfig", 
                "sagemaker:UpdateEndpointWeightsAndCapacities", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: FMSServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "waf:UpdateWebACL", 
                "waf:DeleteWebACL", 
                "waf:GetWebACL", 
                "waf-regional:UpdateWebACL", 
                "waf-regional:DeleteWebACL", 
                "waf-regional:GetWebACL", 
                "waf-regional:ListResourcesForWebACL", 
                "waf-regional:AssociateWebACL", 
                "waf-regional:DisassociateWebACL", 
                "elasticloadbalancing:SetWebACL"
            ], 
            "Resource": [
                "arn:aws:waf:*:*:webacl/*", 
                "arn:aws:waf-regional:*:*:webacl/*", 
                "arn:aws:waf:*:*:rulegroup/*", 
                "arn:aws:waf-regional:*:*:rulegroup/*", 
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "waf:CreateWebACL", 
                "waf-regional:CreateWebACL", 
                "waf:GetChangeToken", 
                "waf-regional:GetChangeToken"
            ], 
            "Resource": [
                "arn:aws:waf:*", 
                "arn:aws:waf-regional:*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "waf:PutPermissionPolicy", 
                "waf:GetPermissionPolicy", 
                "waf:DeletePermissionPolicy", 
                "waf-regional:PutPermissionPolicy", 
                "waf-regional:GetPermissionPolicy", 
                "waf-regional:DeletePermissionPolicy"
            ], 
            "Resource": [
                "arn:aws:waf:*:*:webacl/*", 
                "arn:aws:waf:*:*:rulegroup/*", 
                "arn:aws:waf-regional:*:*:webacl/*", 
                "arn:aws:waf-regional:*:*:rulegroup/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudfront:GetDistribution", 
                "cloudfront:UpdateDistribution", 
                "cloudfront:ListDistributionsByWebACLId"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "config:DescribeConfigurationRecorders", 
                "config:DescribeConfigurationRecorderStatus", 
                "config:PutConfigurationRecorder", 
                "config:StartConfigurationRecorder", 
                "config:PutDeliveryChannel", 
                "config:DescribeDeliveryChannels", 
                "config:DescribeDeliveryChannelStatus", 
                "config:DeleteConfigRule", 
                "config:DescribeComplianceByConfigRule", 
                "config:DescribeConfigRuleEvaluationStatus", 
                "config:DescribeConfigRules", 
                "config:GetComplianceDetailsByConfigRule", 
                "config:GetComplianceSummaryByConfigRule", 
                "config:GetDiscoveredResourceCounts", 
                "config:PutConfigRule", 
                "config:StartConfigRulesEvaluation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/fms.amazonaws.com/AWSServiceRoleForFMS"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "organizations:DescribeAccount", 
                "organizations:DescribeOrganization", 
                "organizations:ListAccounts"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSQSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sqs:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:Get*", 
                "a4b:List*", 
                "a4b:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeChangeSet", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStackResources", 
                "cloudwatch:*", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:GetCognitoEvents", 
                "cognito-sync:SetCognitoEvents", 
                "dynamodb:*", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "events:*", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListRolePolicies", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "iot:AttachPrincipalPolicy", 
                "iot:AttachThingPrincipal", 
                "iot:CreateKeysAndCertificate", 
                "iot:CreatePolicy", 
                "iot:CreateThing", 
                "iot:CreateTopicRule", 
                "iot:DescribeEndpoint", 
                "iot:GetTopicRule", 
                "iot:ListPolicies", 
                "iot:ListThings", 
                "iot:ListTopicRules", 
                "iot:ReplaceTopicRule", 
                "kinesis:DescribeStream", 
                "kinesis:ListStreams", 
                "kinesis:PutRecord", 
                "kms:ListAliases", 
                "lambda:*", 
                "logs:*", 
                "s3:*", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sns:Publish", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sqs:ListQueues", 
                "sqs:SendMessage", 
                "tag:GetResources", 
                "xray:PutTelemetryRecords", 
                "xray:PutTraceSegments"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTLogging
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:PutMetricFilter", 
                "logs:PutRetentionPolicy", 
                "logs:GetLogEvents", 
                "logs:DeleteLogStream"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2RoleforSSM
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:DescribeAssociation", 
                "ssm:GetDeployablePatchSnapshotForInstance", 
                "ssm:GetDocument", 
                "ssm:GetManifest", 
                "ssm:GetParameters", 
                "ssm:ListAssociations", 
                "ssm:ListInstanceAssociations", 
                "ssm:PutInventory", 
                "ssm:PutComplianceItems", 
                "ssm:PutConfigurePackageResult", 
                "ssm:UpdateAssociationStatus", 
                "ssm:UpdateInstanceAssociationStatus", 
                "ssm:UpdateInstanceInformation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2messages:AcknowledgeMessage", 
                "ec2messages:DeleteMessage", 
                "ec2messages:FailMessage", 
                "ec2messages:GetEndpoint", 
                "ec2messages:GetMessages", 
                "ec2messages:SendReply"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:PutMetricData"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeInstanceStatus"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ds:CreateComputer", 
                "ds:DescribeDirectories"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:GetObject", 
                "s3:AbortMultipartUpload", 
                "s3:ListMultipartUploadParts", 
                "s3:ListBucket", 
                "s3:ListBucketMultipartUploads"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudHSMRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:CreateTags", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DetachNetworkInterface"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSEnhancedClassicNetworkingMangementPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: IAMFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "iam:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonInspectorFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "inspector:*", 
                "ec2:DescribeInstances", 
                "ec2:DescribeTags", 
                "sns:ListTopics", 
                "events:DescribeRule", 
                "events:ListRuleNamesByTarget"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "inspector.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/inspector.amazonaws.com/AWSServiceRoleForAmazonInspector", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "inspector.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonElastiCacheFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "elasticache:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/elasticache.amazonaws.com/AWSServiceRoleForElastiCache", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "elasticache.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSAgentlessDiscoveryService
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "awsconnector:RegisterConnector", 
                "awsconnector:GetConnectorHealth"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:GetUser", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:ListBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::connector-platform-upgrade-info/*", 
                "arn:aws:s3:::connector-platform-upgrade-info", 
                "arn:aws:s3:::connector-platform-upgrade-bundles/*", 
                "arn:aws:s3:::connector-platform-upgrade-bundles", 
                "arn:aws:s3:::connector-platform-release-notes/*", 
                "arn:aws:s3:::connector-platform-release-notes", 
                "arn:aws:s3:::prod.agentless.discovery.connector.upgrade/*", 
                "arn:aws:s3:::prod.agentless.discovery.connector.upgrade"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:PutObjectAcl"
            ], 
            "Resource": [
                "arn:aws:s3:::import-to-ec2-connector-debug-logs/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "SNS:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "Discovery:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "Discovery"
        }, 
        {
            "Action": [
                "arsenal:RegisterOnPremisesAgent"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "arsenal"
        }
    ]
}
Policy Name: AWSXrayWriteOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "xray:PutTraceSegments", 
                "xray:PutTelemetryRecords"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSPriceListServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "pricing:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "autoscaling:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "autoscaling:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "cloudwatch:PutMetricAlarm", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeLaunchTemplateVersions", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcClassicLink"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "autoscaling.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonEC2RoleforAWSCodeDeploy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectVersion", 
                "s3:ListBucket"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMobileHub_ReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:DescribeTable", 
                "iam:ListSAMLProviders", 
                "lambda:ListFunctions", 
                "sns:ListTopics", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:GetBot", 
                "lex:GetBots", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases", 
                "mobilehub:ExportProject", 
                "mobilehub:GenerateProjectParameters", 
                "mobilehub:GetProject", 
                "mobilehub:GetProjectSnapshot", 
                "mobilehub:ListProjectSnapshots", 
                "mobilehub:ListAvailableConnectors", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "mobilehub:ValidateProject", 
                "mobilehub:VerifyServiceRole", 
                "mobilehub:DescribeBundle", 
                "mobilehub:ExportBundle", 
                "mobilehub:ListBundles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::*/aws-my-sample-app*.zip", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsBuiltInTargetExecutionAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:Describe*", 
                "ec2:RebootInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:CreateSnapshot"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsBuiltInTargetExecutionAccess"
        }
    ]
}
Policy Name: AutoScalingServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AttachClassicLinkVpc", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:Describe*", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RunInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "EC2InstanceManagement"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "ec2.amazonaws.com*"
                }
            }, 
            "Sid": "EC2InstanceProfileManagement"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "spot.amazonaws.com"
                }
            }, 
            "Sid": "EC2SpotManagement"
        }, 
        {
            "Action": [
                "elasticloadbalancing:Register*", 
                "elasticloadbalancing:Deregister*", 
                "elasticloadbalancing:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ELBManagement"
        }, 
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CWManagement"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSManagement"
        }
    ]
}
Policy Name: AmazonCloudDirectoryReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "clouddirectory:List*", 
                "clouddirectory:Get*", 
                "clouddirectory:LookupPolicy", 
                "clouddirectory:BatchRead"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchAgentAdminPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData", 
                "ec2:DescribeTags", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups", 
                "logs:CreateLogStream", 
                "logs:CreateLogGroup"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:GetParameter", 
                "ssm:PutParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "opsworks:*", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "iam:GetRolePolicy", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksCMInstanceProfileRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeStackResource", 
                "cloudformation:SignalResource"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:AbortMultipartUpload", 
                "s3:DeleteObject", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:ListMultipartUploadParts", 
                "s3:PutObject"
            ], 
            "Resource": "arn:aws:s3:::aws-opsworks-cm-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSBatchServiceEventTargetRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "batch:SubmitJob"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineApproverAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:GetPipeline", 
                "codepipeline:GetPipelineState", 
                "codepipeline:GetPipelineExecution", 
                "codepipeline:ListPipelineExecutions", 
                "codepipeline:ListPipelines", 
                "codepipeline:PutApprovalResult"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationDiscoveryAgentAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "arsenal:RegisterOnPremisesAgent"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ViewOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:ListCertificates", 
                "athena:List*", 
                "aws-marketplace:ViewSubscriptions", 
                "autoscaling:Describe*", 
                "batch:ListJobs", 
                "clouddirectory:ListAppliedSchemaArns", 
                "clouddirectory:ListDevelopmentSchemaArns", 
                "clouddirectory:ListDirectories", 
                "clouddirectory:ListPublishedSchemaArns", 
                "cloudformation:List*", 
                "cloudformation:DescribeStacks", 
                "cloudfront:List*", 
                "cloudhsm:ListAvailableZones", 
                "cloudhsm:ListLunaClients", 
                "cloudhsm:ListHapgs", 
                "cloudhsm:ListHsms", 
                "cloudsearch:List*", 
                "cloudsearch:DescribeDomains", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:LookupEvents", 
                "cloudwatch:List*", 
                "cloudwatch:GetMetricData", 
                "codebuild:ListBuilds*", 
                "codebuild:ListProjects", 
                "codecommit:List*", 
                "codedeploy:List*", 
                "codedeploy:Get*", 
                "codepipeline:ListPipelines", 
                "codestar:List*", 
                "codestar:Verify*", 
                "cognito-idp:List*", 
                "cognito-identity:ListIdentities", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:ListDatasets", 
                "connect:List*", 
                "config:List*", 
                "config:Describe*", 
                "datapipeline:ListPipelines", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetAccountLimits", 
                "devicefarm:List*", 
                "directconnect:Describe*", 
                "discovery:List*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListTables", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeBundleTasks", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeHost*", 
                "ec2:DescribeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeImage*", 
                "ec2:DescribeImport*", 
                "ec2:DescribeInstance*", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetwork*", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeReserved*", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshot*", 
                "ec2:DescribeSpot*", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolume*", 
                "ec2:DescribeVpc*", 
                "ec2:DescribeVpnGateways", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:List*", 
                "ecs:Describe*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:DescribeApplicationVersions", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticbeanstalk:ListAvailableSolutionStacks", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "es:DescribeElasticsearchDomain", 
                "es:DescribeElasticsearchDomains", 
                "es:ListDomainNames", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "firehose:List*", 
                "firehose:DescribeDeliveryStream", 
                "gamelift:List*", 
                "glacier:List*", 
                "iam:List*", 
                "iam:GetAccountSummary", 
                "iam:GetLoginProfile", 
                "importexport:ListJobs", 
                "inspector:List*", 
                "iot:List*", 
                "kinesis:ListStreams", 
                "kinesisanalytics:ListApplications", 
                "kms:ListKeys", 
                "lambda:List*", 
                "lex:GetBotAliases", 
                "lex:GetBotChannelAssociations", 
                "lex:GetBots", 
                "lex:GetBotVersions", 
                "lex:GetIntents", 
                "lex:GetIntentVersions", 
                "lex:GetSlotTypes", 
                "lex:GetSlotTypeVersions", 
                "lex:GetUtterancesView", 
                "lightsail:GetBlueprints", 
                "lightsail:GetBundles", 
                "lightsail:GetInstances", 
                "lightsail:GetInstanceSnapshots", 
                "lightsail:GetKeyPair", 
                "lightsail:GetRegions", 
                "lightsail:GetStaticIps", 
                "lightsail:IsVpcPeered", 
                "logs:Describe*", 
                "machinelearning:Describe*", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "opsworks:Describe*", 
                "opsworks-cm:Describe*", 
                "organizations:List*", 
                "mobiletargeting:GetApplicationSettings", 
                "mobiletargeting:GetCampaigns", 
                "mobiletargeting:GetImportJobs", 
                "mobiletargeting:GetSegments", 
                "polly:Describe*", 
                "polly:List*", 
                "rds:Describe*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeEvents", 
                "redshift:ViewQueriesInConsole", 
                "route53:List*", 
                "route53:Get*", 
                "route53domains:List*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "sdb:List*", 
                "servicecatalog:List*", 
                "ses:List*", 
                "shield:List*", 
                "states:ListActivities", 
                "states:ListStateMachines", 
                "sns:List*", 
                "sqs:ListQueues", 
                "ssm:ListAssociations", 
                "ssm:ListDocuments", 
                "storagegateway:ListGateways", 
                "storagegateway:ListLocalDisks", 
                "storagegateway:ListVolumeRecoveryPoints", 
                "storagegateway:ListVolumes", 
                "swf:List*", 
                "trustedadvisor:Describe*", 
                "waf:List*", 
                "waf-regional:List*", 
                "workdocs:DescribeAvailableDirectories", 
                "workdocs:DescribeInstances", 
                "workmail:Describe*", 
                "workspaces:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkCrowdReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "crowd:GetTask"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CrowdApiReadOnlyAccess"
        }
    ]
}
Policy Name: AmazonElasticMapReduceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteTags", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSpotPriceHistory", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcs", 
                "ec2:DetachNetworkInterface", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RunInstances", 
                "ec2:TerminateInstances", 
                "ec2:DeleteVolume", 
                "ec2:DescribeVolumeStatus", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListInstanceProfiles", 
                "iam:ListRolePolicies", 
                "iam:PassRole", 
                "s3:CreateBucket", 
                "s3:Get*", 
                "s3:List*", 
                "sdb:BatchPutAttributes", 
                "sdb:Select", 
                "sqs:CreateQueue", 
                "sqs:Delete*", 
                "sqs:GetQueue*", 
                "sqs:PurgeQueue", 
                "sqs:ReceiveMessage", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms", 
                "application-autoscaling:RegisterScalableTarget", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "spot.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonRoute53DomainsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53domains:Get*", 
                "route53domains:List*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMAutomationApproverAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:DescribeAutomationExecutions", 
                "ssm:GetAutomationExecution", 
                "ssm:SendAutomationSignal"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "iam:GetRolePolicy", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "iam:PassRole", 
                "opsworks:*", 
                "rds:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigRoleForOrganizations
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "organizations:ListAccounts", 
                "organizations:DescribeOrganization", 
                "organizations:ListAWSServiceAccessForOrganization"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ApplicationAutoScalingForAmazonAppStreamAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:UpdateFleet", 
                "appstream:DescribeFleets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DescribeAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerRegistryFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:*", 
                "cloudtrail:LookupEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: SimpleWorkflowFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "swf:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: GreengrassOTAUpdateArtifactAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::eu-central-1-greengrass-updates/*", 
                "arn:aws:s3:::us-east-1-greengrass-updates/*", 
                "arn:aws:s3:::ap-northeast-1-greengrass-updates/*", 
                "arn:aws:s3:::us-west-2-greengrass-updates/*", 
                "arn:aws:s3:::ap-southeast-2-greengrass-updates/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowsIotToAccessGreengrassOTAUpdateArtifacts"
        }
    ]
}
Policy Name: AmazonS3FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "s3:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStorageGatewayReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "storagegateway:List*", 
                "storagegateway:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeSnapshots"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: Billing
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-portal:*Billing", 
                "awsbillingconsole:*Billing", 
                "aws-portal:*Usage", 
                "awsbillingconsole:*Usage", 
                "aws-portal:*PaymentMethods", 
                "awsbillingconsole:*PaymentMethods", 
                "budgets:ViewBudget", 
                "budgets:ModifyBudget", 
                "cur:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: QuickSightAccessForS3StorageManagementAnalyticsReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectMetadata"
            ], 
            "Resource": [
                "arn:aws:s3:::s3-analytics-export-shared-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetAnalyticsConfiguration", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketLocation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerRegistryReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:GetRepositoryPolicy", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecr:DescribeImages", 
                "ecr:BatchGetImage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticMapReduceforEC2Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "dynamodb:*", 
                "ec2:Describe*", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:ListBootstrapActions", 
                "elasticmapreduce:ListClusters", 
                "elasticmapreduce:ListInstanceGroups", 
                "elasticmapreduce:ListInstances", 
                "elasticmapreduce:ListSteps", 
                "kinesis:CreateStream", 
                "kinesis:DeleteStream", 
                "kinesis:DescribeStream", 
                "kinesis:GetRecords", 
                "kinesis:GetShardIterator", 
                "kinesis:MergeShards", 
                "kinesis:PutRecord", 
                "kinesis:SplitShard", 
                "rds:Describe*", 
                "s3:*", 
                "sdb:*", 
                "sns:*", 
                "sqs:*", 
                "glue:CreateDatabase", 
                "glue:UpdateDatabase", 
                "glue:DeleteDatabase", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:CreateTable", 
                "glue:UpdateTable", 
                "glue:DeleteTable", 
                "glue:GetTable", 
                "glue:GetTables", 
                "glue:GetTableVersions", 
                "glue:CreatePartition", 
                "glue:BatchCreatePartition", 
                "glue:UpdatePartition", 
                "glue:DeletePartition", 
                "glue:BatchDeletePartition", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:BatchGetPartition", 
                "glue:CreateUserDefinedFunction", 
                "glue:UpdateUserDefinedFunction", 
                "glue:DeleteUserDefinedFunction", 
                "glue:GetUserDefinedFunction", 
                "glue:GetUserDefinedFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DatabaseAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:Describe*", 
                "cloudwatch:DisableAlarmActions", 
                "cloudwatch:EnableAlarmActions", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "cloudwatch:PutMetricAlarm", 
                "datapipeline:ActivatePipeline", 
                "datapipeline:CreatePipeline", 
                "datapipeline:DeletePipeline", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:PutPipelineDefinition", 
                "datapipeline:QueryObjects", 
                "dynamodb:*", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "elasticache:*", 
                "iam:ListRoles", 
                "iam:GetRole", 
                "kms:ListKeys", 
                "lambda:CreateEventSourceMapping", 
                "lambda:CreateFunction", 
                "lambda:DeleteEventSourceMapping", 
                "lambda:DeleteFunction", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListEventSourceMappings", 
                "lambda:ListFunctions", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:FilterLogEvents", 
                "logs:GetLogEvents", 
                "logs:Create*", 
                "logs:PutLogEvents", 
                "logs:PutMetricFilter", 
                "rds:*", 
                "redshift:*", 
                "s3:CreateBucket", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:Get*", 
                "sns:List*", 
                "sns:SetTopicAttributes", 
                "sns:Subscribe", 
                "sns:Unsubscribe"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:AbortMultipartUpload", 
                "s3:DeleteObject*", 
                "s3:Get*", 
                "s3:List*", 
                "s3:PutAccelerateConfiguration", 
                "s3:PutBucketTagging", 
                "s3:PutBucketVersioning", 
                "s3:PutBucketWebsite", 
                "s3:PutLifecycleConfiguration", 
                "s3:PutReplicationConfiguration", 
                "s3:PutObject*", 
                "s3:Replicate*", 
                "s3:RestoreObject"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/rds-monitoring-role", 
                "arn:aws:iam::*:role/rdbms-lambda-access", 
                "arn:aws:iam::*:role/lambda_exec_role", 
                "arn:aws:iam::*:role/lambda-dynamodb-*", 
                "arn:aws:iam::*:role/lambda-vpc-execution-role", 
                "arn:aws:iam::*:role/DataPipelineDefaultRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRedshiftReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "redshift:Describe*", 
                "redshift:ViewQueriesInConsole", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "sns:Get*", 
                "sns:List*", 
                "cloudwatch:Describe*", 
                "cloudwatch:List*", 
                "cloudwatch:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "ec2:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:ListMetrics", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchAgentServerPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData", 
                "ec2:DescribeTags", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups", 
                "logs:CreateLogStream", 
                "logs:CreateLogGroup"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:GetParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSXrayReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "xray:BatchGetTraces", 
                "xray:GetServiceGraph", 
                "xray:GetTraceGraph", 
                "xray:GetTraceSummaries"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkEnhancedHealth
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:GetConsoleOutput", 
                "ec2:AssociateAddress", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeSecurityGroups", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:DescribeNotificationConfigurations", 
                "sns:Publish"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:DescribeLogStreams", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*:log-stream:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticMapReduceReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:List*", 
                "elasticmapreduce:ViewEventsFromAllClustersInConsole", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "sdb:Select", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDirectoryServiceReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:Check*", 
                "ds:Describe*", 
                "ds:Get*", 
                "ds:List*", 
                "ds:Verify*", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "sns:ListTopics", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGuardDutyServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:DescribeImages"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonVPCReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeEgressOnlyInternetGateways", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroupReferences", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeStaleSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeVpcClassicLinkDnsSupport", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointConnectionNotifications", 
                "ec2:DescribeVpcEndpointConnections", 
                "ec2:DescribeVpcEndpointServiceConfigurations", 
                "ec2:DescribeVpcEndpointServicePermissions", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeStackResource", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awseb-*", 
                "arn:aws:cloudformation:*:*:stack/eb-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCloudformationReadOperationsOnElasticBeanstalkStacks"
        }, 
        {
            "Action": [
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:DescribeNotificationConfigurations", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:PutNotificationConfiguration", 
                "ec2:DescribeInstanceStatus", 
                "ec2:AssociateAddress", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "sns:Publish"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowOperations"
        }, 
        {
            "Action": [
                "logs:DescribeLogStreams", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*:log-stream:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "events:DescribeRule", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "events:TestEventPattern", 
                "events:DescribeEventBus"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsReadOnlyAccess"
        }
    ]
}
Policy Name: AWSLambdaReplicator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:DisableReplication"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:*"
            ], 
            "Effect": "Allow", 
            "Sid": "LambdaCreateDeletePermission"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLikeIfExists": {
                    "iam:PassedToService": "lambda.amazonaws.com"
                }
            }, 
            "Sid": "IamPassRolePermission"
        }, 
        {
            "Action": [
                "cloudfront:ListDistributionsByLambdaFunction"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudFrontListDistributions"
        }
    ]
}
Policy Name: AmazonAPIGatewayInvokeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "execute-api:Invoke"
            ], 
            "Resource": "arn:aws:execute-api:*:*:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSSSOServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:AttachRolePolicy", 
                "iam:CreateRole", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DetachRolePolicy", 
                "iam:GetRole", 
                "iam:ListRolePolicies", 
                "iam:PutRolePolicy", 
                "iam:ListAttachedRolePolicies"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListRoles"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "ListRolesInTheAccount"
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus", 
                "iam:DeleteRole", 
                "iam:GetRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDeletionOfServiceLinkedRoleForPeregrine"
        }, 
        {
            "Action": [
                "iam:CreateSAMLProvider", 
                "iam:GetSAMLProvider", 
                "iam:UpdateSAMLProvider", 
                "iam:DeleteSAMLProvider"
            ], 
            "Resource": [
                "arn:aws:iam::*:saml-provider/AWSSSO_*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "organizations:DescribeAccount", 
                "organizations:DescribeOrganization", 
                "organizations:ListAccounts"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisAnalyticsReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesisanalytics:Describe*", 
                "kinesisanalytics:Get*", 
                "kinesisanalytics:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesis:DescribeStream", 
                "kinesis:ListStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "firehose:DescribeDeliveryStream", 
                "firehose:ListDeliveryStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "logs:GetLogEvents", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListPolicyVersions", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "mobileanalytics:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMobileHub_FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "apigateway:GET", 
                "apigateway:GetRestApis", 
                "apigateway:GetResources", 
                "apigateway:POST", 
                "apigateway:TestInvokeMethod", 
                "cloudfront:GetDistribution", 
                "devicefarm:CreateProject", 
                "devicefarm:ListJobs", 
                "devicefarm:ListRuns", 
                "devicefarm:GetProject", 
                "devicefarm:GetRun", 
                "devicefarm:ListArtifacts", 
                "devicefarm:ListProjects", 
                "devicefarm:ScheduleRun", 
                "dynamodb:DescribeTable", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "iam:ListSAMLProviders", 
                "lambda:ListFunctions", 
                "sns:ListTopics", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:GetBot", 
                "lex:GetBots", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases", 
                "mobilehub:CreateProject", 
                "mobilehub:DeleteProject", 
                "mobilehub:UpdateProject", 
                "mobilehub:ExportProject", 
                "mobilehub:ImportProject", 
                "mobilehub:SynchronizeProject", 
                "mobilehub:GenerateProjectParameters", 
                "mobilehub:GetProject", 
                "mobilehub:GetProjectSnapshot", 
                "mobilehub:ListProjectSnapshots", 
                "mobilehub:DeleteProjectSnapshot", 
                "mobilehub:ListAvailableConnectors", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "mobilehub:ValidateProject", 
                "mobilehub:VerifyServiceRole", 
                "mobilehub:DescribeBundle", 
                "mobilehub:ExportBundle", 
                "mobilehub:ListBundles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::*/aws-my-sample-app*.zip", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject"
            ], 
            "Resource": "arn:aws:s3:::*-mobilehub-*/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:ListBucket"
            ], 
            "Resource": "arn:aws:s3:::*-mobilehub-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAPIGatewayPushToCloudWatchLogs
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:PutLogEvents", 
                "logs:GetLogEvents", 
                "logs:FilterLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDataPipelineRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "datapipeline:DescribeObjects", 
                "datapipeline:EvaluateExpression", 
                "dynamodb:BatchGetItem", 
                "dynamodb:DescribeTable", 
                "dynamodb:GetItem", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "dynamodb:UpdateTable", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:Describe*", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:DeleteSecurityGroup", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DetachNetworkInterface", 
                "elasticmapreduce:*", 
                "iam:GetInstanceProfile", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListRolePolicies", 
                "iam:ListInstanceProfiles", 
                "iam:PassRole", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "s3:CreateBucket", 
                "s3:DeleteObject", 
                "s3:Get*", 
                "s3:List*", 
                "s3:Put*", 
                "sdb:BatchPutAttributes", 
                "sdb:Select*", 
                "sns:GetTopicAttributes", 
                "sns:ListTopics", 
                "sns:Publish", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sqs:CreateQueue", 
                "sqs:Delete*", 
                "sqs:GetQueue*", 
                "sqs:PurgeQueue", 
                "sqs:ReceiveMessage"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "elasticmapreduce.amazonaws.com", 
                        "spot.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: CloudWatchFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "cloudwatch:*", 
                "logs:*", 
                "sns:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "events.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSDeepLensLambdaFunctionAccessPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListBucket", 
                "s3:GetObject", 
                "s3:ListObjects"
            ], 
            "Resource": [
                "arn:aws:s3:::deeplens*/*", 
                "arn:aws:s3:::deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensS3ObjectAccess"
        }, 
        {
            "Action": [
                "logs:CreateLogStream", 
                "logs:DescribeLogStreams", 
                "logs:PutLogEvents", 
                "logs:CreateLogGroup"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/greengrass/*", 
            "Effect": "Allow", 
            "Sid": "DeepLensGreenGrassCloudWatchAccess"
        }, 
        {
            "Action": [
                "deeplens:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAccess"
        }, 
        {
            "Action": [
                "acuity:CreateStream", 
                "acuity:DescribeStream", 
                "acuity:DeleteStream", 
                "acuity:PutMedia"
            ], 
            "Resource": [
                "arn:aws:acuity:*:*:stream/deeplens*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityStreamAccess"
        }, 
        {
            "Action": [
                "acuity:GetDataEndpoint"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityEndpointAccess"
        }
    ]
}
Policy Name: AmazonGuardDutyFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "guardduty:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "guardduty.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonRDSDirectoryServiceAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:DescribeDirectories", 
                "ds:AuthorizeApplication", 
                "ds:UnauthorizeApplication"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:GetPipeline", 
                "codepipeline:GetPipelineState", 
                "codepipeline:GetPipelineExecution", 
                "codepipeline:ListPipelineExecutions", 
                "codepipeline:ListActionTypes", 
                "codepipeline:ListPipelines", 
                "iam:ListRoles", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "codecommit:ListBranches", 
                "codecommit:ListRepositories", 
                "codedeploy:GetApplication", 
                "codedeploy:GetDeploymentGroup", 
                "codedeploy:ListApplications", 
                "codedeploy:ListDeploymentGroups", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListFunctions", 
                "opsworks:DescribeApps", 
                "opsworks:DescribeLayers", 
                "opsworks:DescribeStacks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:Describe*", 
                "acm:Get*", 
                "acm:List*", 
                "apigateway:GET", 
                "application-autoscaling:Describe*", 
                "autoscaling-plans:Describe*", 
                "appstream:Describe*", 
                "appstream:Get*", 
                "appstream:List*", 
                "athena:List*", 
                "athena:Batch*", 
                "athena:Get*", 
                "autoscaling:Describe*", 
                "batch:List*", 
                "batch:Describe*", 
                "cloud9:Describe*", 
                "cloud9:List*", 
                "clouddirectory:List*", 
                "clouddirectory:BatchRead", 
                "clouddirectory:Get*", 
                "clouddirectory:LookupPolicy", 
                "cloudformation:Describe*", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:Estimate*", 
                "cloudformation:Preview*", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "cloudhsm:List*", 
                "cloudhsm:Describe*", 
                "cloudhsm:Get*", 
                "cloudsearch:Describe*", 
                "cloudsearch:List*", 
                "cloudtrail:Describe*", 
                "cloudtrail:Get*", 
                "cloudtrail:List*", 
                "cloudtrail:LookupEvents", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "codebuild:BatchGet*", 
                "codebuild:List*", 
                "codecommit:BatchGet*", 
                "codecommit:Get*", 
                "codecommit:GitPull", 
                "codecommit:List*", 
                "codedeploy:BatchGet*", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codepipeline:List*", 
                "codepipeline:Get*", 
                "codestar:List*", 
                "codestar:Describe*", 
                "codestar:Get*", 
                "codestar:Verify*", 
                "cognito-identity:List*", 
                "cognito-identity:Describe*", 
                "cognito-identity:Lookup*", 
                "cognito-sync:List*", 
                "cognito-sync:Describe*", 
                "cognito-sync:Get*", 
                "cognito-sync:QueryRecords", 
                "cognito-idp:AdminList*", 
                "cognito-idp:List*", 
                "cognito-idp:Describe*", 
                "cognito-idp:Get*", 
                "config:Deliver*", 
                "config:Describe*", 
                "config:Get*", 
                "config:List*", 
                "connect:List*", 
                "connect:Describe*", 
                "connect:Get*", 
                "datapipeline:Describe*", 
                "datapipeline:EvaluateExpression", 
                "datapipeline:Get*", 
                "datapipeline:List*", 
                "datapipeline:QueryObjects", 
                "datapipeline:Validate*", 
                "directconnect:Describe*", 
                "devicefarm:List*", 
                "devicefarm:Get*", 
                "discovery:Describe*", 
                "discovery:List*", 
                "discovery:Get*", 
                "dms:Describe*", 
                "dms:List*", 
                "dms:Test*", 
                "ds:Check*", 
                "ds:Describe*", 
                "ds:Get*", 
                "ds:List*", 
                "ds:Verify*", 
                "dynamodb:BatchGet*", 
                "dynamodb:Describe*", 
                "dynamodb:Get*", 
                "dynamodb:List*", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "ec2:Describe*", 
                "ec2:Get*", 
                "ec2messages:Get*", 
                "ecr:BatchCheck*", 
                "ecr:BatchGet*", 
                "ecr:Describe*", 
                "ecr:Get*", 
                "ecr:List*", 
                "ecs:Describe*", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticache:List*", 
                "elasticbeanstalk:Check*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:Request*", 
                "elasticbeanstalk:Retrieve*", 
                "elasticbeanstalk:Validate*", 
                "elasticfilesystem:Describe*", 
                "elasticloadbalancing:Describe*", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:List*", 
                "elasticmapreduce:View*", 
                "elastictranscoder:List*", 
                "elastictranscoder:Read*", 
                "es:Describe*", 
                "es:List*", 
                "es:ESHttpGet", 
                "es:ESHttpHead", 
                "events:Describe*", 
                "events:List*", 
                "events:Test*", 
                "firehose:Describe*", 
                "firehose:List*", 
                "gamelift:List*", 
                "gamelift:Get*", 
                "gamelift:Describe*", 
                "gamelift:RequestUploadCredentials", 
                "gamelift:ResolveAlias", 
                "gamelift:Search*", 
                "glacier:List*", 
                "glacier:Describe*", 
                "glacier:Get*", 
                "guardduty:Get*", 
                "guardduty:List*", 
                "health:Describe*", 
                "health:Get*", 
                "health:List*", 
                "iam:Generate*", 
                "iam:Get*", 
                "iam:List*", 
                "iam:Simulate*", 
                "importexport:Get*", 
                "importexport:List*", 
                "inspector:Describe*", 
                "inspector:Get*", 
                "inspector:List*", 
                "inspector:Preview*", 
                "inspector:LocalizeText", 
                "iot:Describe*", 
                "iot:Get*", 
                "iot:List*", 
                "kinesisanalytics:Describe*", 
                "kinesisanalytics:Discover*", 
                "kinesisanalytics:Get*", 
                "kinesisanalytics:List*", 
                "kinesis:Describe*", 
                "kinesis:Get*", 
                "kinesis:List*", 
                "kms:Describe*", 
                "kms:Get*", 
                "kms:List*", 
                "lambda:List*", 
                "lambda:Get*", 
                "lex:Get*", 
                "lightsail:Get*", 
                "lightsail:Is*", 
                "lightsail:Download*", 
                "logs:Describe*", 
                "logs:Get*", 
                "logs:FilterLogEvents", 
                "logs:ListTagsLogGroup", 
                "logs:TestMetricFilter", 
                "machinelearning:Describe*", 
                "machinelearning:Get*", 
                "mobileanalytics:Get*", 
                "mobilehub:Describe*", 
                "mobilehub:Export*", 
                "mobilehub:Generate*", 
                "mobilehub:Get*", 
                "mobilehub:List*", 
                "mobilehub:Validate*", 
                "mobilehub:Verify*", 
                "mobiletargeting:Get*", 
                "opsworks:Describe*", 
                "opsworks:Get*", 
                "opsworks-cm:Describe*", 
                "organizations:Describe*", 
                "organizations:List*", 
                "polly:Describe*", 
                "polly:Get*", 
                "polly:List*", 
                "polly:SynthesizeSpeech", 
                "rekognition:CompareFaces", 
                "rekognition:Detect*", 
                "rekognition:List*", 
                "rekognition:Search*", 
                "rds:Describe*", 
                "rds:List*", 
                "rds:Download*", 
                "redshift:Describe*", 
                "redshift:View*", 
                "redshift:Get*", 
                "resource-groups:Describe*", 
                "resource-groups:Get*", 
                "resource-groups:List*", 
                "resource-groups:Search*", 
                "route53:Get*", 
                "route53:List*", 
                "route53:Test*", 
                "route53domains:Check*", 
                "route53domains:Get*", 
                "route53domains:List*", 
                "route53domains:View*", 
                "s3:Get*", 
                "s3:List*", 
                "s3:Head*", 
                "sdb:Get*", 
                "sdb:List*", 
                "sdb:Select*", 
                "servicecatalog:List*", 
                "servicecatalog:Scan*", 
                "servicecatalog:Search*", 
                "servicecatalog:Describe*", 
                "ses:Get*", 
                "ses:List*", 
                "ses:Describe*", 
                "ses:Verify*", 
                "shield:Describe*", 
                "shield:List*", 
                "snowball:Get*", 
                "snowball:Describe*", 
                "snowball:List*", 
                "sns:Get*", 
                "sns:List*", 
                "sns:Check*", 
                "sqs:Get*", 
                "sqs:List*", 
                "sqs:Receive*", 
                "ssm:Describe*", 
                "ssm:Get*", 
                "ssm:List*", 
                "states:List*", 
                "states:Describe*", 
                "states:GetExecutionHistory", 
                "storagegateway:Describe*", 
                "storagegateway:List*", 
                "sts:Get*", 
                "swf:Count*", 
                "swf:Describe*", 
                "swf:Get*", 
                "swf:List*", 
                "tag:Get*", 
                "trustedadvisor:Describe*", 
                "waf:Get*", 
                "waf:List*", 
                "waf-regional:List*", 
                "waf-regional:Get*", 
                "workdocs:Describe*", 
                "workdocs:Get*", 
                "workdocs:CheckAlias", 
                "workmail:Describe*", 
                "workmail:Get*", 
                "workmail:List*", 
                "workmail:Search*", 
                "workspaces:Describe*", 
                "xray:BatchGet*", 
                "xray:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncInvokeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appsync:GraphQL", 
                "appsync:GetGraphqlApi", 
                "appsync:ListGraphqlApis", 
                "appsync:ListApiKeys"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningBatchPredictionsAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:CreateBatchPrediction", 
                "machinelearning:DeleteBatchPrediction", 
                "machinelearning:DescribeBatchPredictions", 
                "machinelearning:GetBatchPrediction", 
                "machinelearning:UpdateBatchPrediction"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSEC2SpotFleetServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:RunInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*", 
                "arn:aws:ec2:*:*:spot-instances-request/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:ec2spot:fleet-request-id": "*"
                }
            }
        }
    ]
}
Policy Name: AmazonRekognitionReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rekognition:CompareFaces", 
                "rekognition:DetectFaces", 
                "rekognition:DetectLabels", 
                "rekognition:ListCollections", 
                "rekognition:ListFaces", 
                "rekognition:SearchFaces", 
                "rekognition:SearchFacesByImage", 
                "rekognition:DetectText", 
                "rekognition:GetCelebrityInfo", 
                "rekognition:RecognizeCelebrities", 
                "rekognition:DetectModerationLabels", 
                "rekognition:GetLabelDetection", 
                "rekognition:GetFaceDetection", 
                "rekognition:GetContentModeration", 
                "rekognition:GetPersonTracking", 
                "rekognition:GetCelebrityRecognition", 
                "rekognition:GetFaceSearch", 
                "rekognition:DescribeStreamProcessor", 
                "rekognition:ListStreamProcessors"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codedeploy:Batch*", 
                "codedeploy:Get*", 
                "codedeploy:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudSearchFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudsearch:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudHSMFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "cloudhsm:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2SpotFleetAutoscaleRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeSpotFleetRequests", 
                "ec2:ModifySpotFleetRequest"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticLoadBalancingServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAddresses", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:AttachNetworkInterface", 
                "ec2:DetachNetworkInterface", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssignIpv6Addresses", 
                "ec2:UnassignIpv6Addresses"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeBuildDeveloperAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codebuild:StartBuild", 
                "codebuild:StopBuild", 
                "codebuild:BatchGet*", 
                "codebuild:Get*", 
                "codebuild:List*", 
                "codecommit:GetBranch", 
                "codecommit:GetCommit", 
                "codecommit:GetRepository", 
                "codecommit:ListBranches", 
                "s3:GetBucketLocation", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:PutParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ElastiCacheServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSGlueServiceNotebookRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glue:CreateDatabase", 
                "glue:CreatePartition", 
                "glue:CreateTable", 
                "glue:DeleteDatabase", 
                "glue:DeletePartition", 
                "glue:DeleteTable", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:GetTable", 
                "glue:GetTableVersions", 
                "glue:GetTables", 
                "glue:UpdateDatabase", 
                "glue:UpdatePartition", 
                "glue:UpdateTable", 
                "glue:CreateBookmark", 
                "glue:GetBookmark", 
                "glue:UpdateBookmark", 
                "glue:GetMetric", 
                "glue:PutMetric", 
                "glue:CreateConnection", 
                "glue:CreateJob", 
                "glue:DeleteConnection", 
                "glue:DeleteJob", 
                "glue:GetConnection", 
                "glue:GetConnections", 
                "glue:GetDevEndpoint", 
                "glue:GetDevEndpoints", 
                "glue:GetJob", 
                "glue:GetJobs", 
                "glue:UpdateJob", 
                "glue:BatchDeleteConnection", 
                "glue:UpdateConnection", 
                "glue:GetUserDefinedFunction", 
                "glue:UpdateUserDefinedFunction", 
                "glue:GetUserDefinedFunctions", 
                "glue:DeleteUserDefinedFunction", 
                "glue:CreateUserDefinedFunction", 
                "glue:BatchGetPartition", 
                "glue:BatchDeletePartition", 
                "glue:BatchCreatePartition", 
                "glue:BatchDeleteTable", 
                "glue:UpdateDevEndpoint", 
                "s3:GetBucketLocation", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketAcl"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::crawler-public*", 
                "arn:aws:s3:::aws-glue*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:DeleteObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:network-interface/*", 
                "arn:aws:ec2:*:*:security-group/*", 
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringEquals": {
                    "aws:TagKeys": [
                        "aws-glue-service-resource"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonEC2SpotFleetRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeInstanceStatus", 
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterTargets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDataPipeline_PowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:List*", 
                "dynamodb:DescribeTable", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "sns:ListTopics", 
                "iam:ListRoles", 
                "iam:GetRolePolicy", 
                "iam:GetInstanceProfile", 
                "iam:ListInstanceProfiles", 
                "datapipeline:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultRole"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderJobsSubmitter
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elastictranscoder:Read*", 
                "elastictranscoder:List*", 
                "elastictranscoder:*Job", 
                "elastictranscoder:*Preset", 
                "s3:List*", 
                "iam:List*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeStarServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "events:PutTargets", 
                "events:RemoveTargets", 
                "events:PutRule", 
                "events:DeleteRule", 
                "events:DescribeRule"
            ], 
            "Resource": [
                "arn:aws:events:*:*:rule/awscodestar-*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectEventRules"
        }, 
        {
            "Action": [
                "cloudformation:*Stack*", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:ExecuteChangeSet", 
                "cloudformation:DeleteChangeSet", 
                "cloudformation:GetTemplate"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awscodestar-*", 
                "arn:aws:cloudformation:*:*:stack/awseb-*", 
                "arn:aws:cloudformation:*:*:stack/aws-cloud9-*", 
                "arn:aws:cloudformation:*:aws:transform/CodeStar*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectStack"
        }, 
        {
            "Action": [
                "cloudformation:GetTemplateSummary", 
                "cloudformation:DescribeChangeSet"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ProjectStackTemplate"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::awscodestar-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectQuickstarts"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-codestar-*", 
                "arn:aws:s3:::aws-codestar-*/*", 
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectS3Buckets"
        }, 
        {
            "Action": [
                "codestar:*", 
                "codecommit:*", 
                "codepipeline:*", 
                "codedeploy:*", 
                "codebuild:*", 
                "ec2:RunInstances", 
                "autoscaling:*", 
                "cloudwatch:Put*", 
                "ec2:*", 
                "elasticbeanstalk:*", 
                "elasticloadbalancing:*", 
                "iam:ListRoles", 
                "logs:*", 
                "sns:*", 
                "cloud9:CreateEnvironmentEC2", 
                "cloud9:DeleteEnvironment", 
                "cloud9:DescribeEnvironment*", 
                "cloud9:ListEnvironments"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ProjectServices"
        }, 
        {
            "Action": [
                "iam:AttachRolePolicy", 
                "iam:CreateRole", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DetachRolePolicy", 
                "iam:GetRole", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:SetDefaultPolicyVersion", 
                "iam:CreatePolicy", 
                "iam:DeletePolicy", 
                "iam:AddRoleToInstanceProfile", 
                "iam:CreateInstanceProfile", 
                "iam:DeleteInstanceProfile", 
                "iam:RemoveRoleFromInstanceProfile"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/CodeStarWorker*", 
                "arn:aws:iam::*:policy/CodeStarWorker*", 
                "arn:aws:iam::*:instance-profile/awscodestar-*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectWorkerRoles"
        }, 
        {
            "Action": [
                "iam:AttachUserPolicy", 
                "iam:DetachUserPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "ArnEquals": {
                    "iam:PolicyArn": [
                        "arn:aws:iam::*:policy/CodeStar_*"
                    ]
                }
            }, 
            "Sid": "ProjectTeamMembers"
        }, 
        {
            "Action": [
                "iam:CreatePolicy", 
                "iam:DeletePolicy", 
                "iam:CreatePolicyVersion", 
                "iam:DeletePolicyVersion", 
                "iam:ListEntitiesForPolicy", 
                "iam:ListPolicyVersions"
            ], 
            "Resource": [
                "arn:aws:iam::*:policy/CodeStar_*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectRoles"
        }, 
        {
            "Action": [
                "iam:ListAttachedRolePolicies"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-codestar-service-role", 
                "arn:aws:iam::*:role/service-role/aws-codestar-service-role"
            ], 
            "Effect": "Allow", 
            "Sid": "InspectServiceRole"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "cloud9.amazonaws.com"
                }
            }, 
            "Sid": "IAMLinkRole"
        }, 
        {
            "Action": [
                "config:DescribeConfigRules"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DescribeConfigRuleForARN"
        }
    ]
}
Policy Name: AmazonTranscribeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "transcribe:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::*transcribe*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDirectoryServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:*", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:SetTopicAttributes", 
                "sns:Subscribe", 
                "sns:Unsubscribe"
            ], 
            "Resource": "arn:aws:sns:*:*:DirectoryMonitoring*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDynamoDBFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:*", 
                "dax:*", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget", 
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarmHistory", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics", 
                "cloudwatch:PutMetricAlarm", 
                "datapipeline:ActivatePipeline", 
                "datapipeline:CreatePipeline", 
                "datapipeline:DeletePipeline", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:PutPipelineDefinition", 
                "datapipeline:QueryObjects", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "iam:GetRole", 
                "iam:ListRoles", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sns:SetTopicAttributes", 
                "lambda:CreateFunction", 
                "lambda:ListFunctions", 
                "lambda:ListEventSourceMappings", 
                "lambda:CreateEventSourceMapping", 
                "lambda:DeleteEventSourceMapping", 
                "lambda:GetFunctionConfiguration", 
                "lambda:DeleteFunction"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "application-autoscaling.amazonaws.com", 
                        "dax.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": [
                        "replication.dynamodb.amazonaws.com", 
                        "dax.amazonaws.com", 
                        "dynamodb.application-autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonSESReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ses:Get*", 
                "ses:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSWAFReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "waf:Get*", 
                "waf:List*", 
                "waf-regional:Get*", 
                "waf-regional:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingNotificationAccessRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sqs:SendMessage", 
                "sqs:GetQueueUrl", 
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mechanicalturk:Get*", 
                "mechanicalturk:Search*", 
                "mechanicalturk:List*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaReplicatorInternal
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:DisableReplication"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:*"
            ], 
            "Effect": "Allow", 
            "Sid": "LambdaCreateDeletePermission"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLikeIfExists": {
                    "iam:PassedToService": [
                        "lambda.amazonaws.com", 
                        "lambda.beta.amazonaws.com", 
                        "lambda.gamma.amazonaws.com"
                    ]
                }
            }, 
            "Sid": "IamPassRolePermission"
        }, 
        {
            "Action": [
                "cloudfront:ListDistributionsByLambdaFunction"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudFrontListDistributions"
        }
    ]
}
Policy Name: AmazonKinesisReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesis:Get*", 
                "kinesis:List*", 
                "kinesis:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "codedeploy:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchActionsEC2Access
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:Describe*", 
                "ec2:Describe*", 
                "ec2:RebootInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaDynamoDBExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:DescribeStream", 
                "dynamodb:GetRecords", 
                "dynamodb:GetShardIterator", 
                "dynamodb:ListStreams", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53DomainsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:CreateHostedZone", 
                "route53domains:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElastiCacheReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticache:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRDSServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/rds/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAthenaFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "athena:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "glue:CreateDatabase", 
                "glue:DeleteDatabase", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:UpdateDatabase", 
                "glue:CreateTable", 
                "glue:DeleteTable", 
                "glue:BatchDeleteTable", 
                "glue:UpdateTable", 
                "glue:GetTable", 
                "glue:GetTables", 
                "glue:BatchCreatePartition", 
                "glue:CreatePartition", 
                "glue:DeletePartition", 
                "glue:BatchDeletePartition", 
                "glue:UpdatePartition", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:BatchGetPartition"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts", 
                "s3:AbortMultipartUpload", 
                "s3:CreateBucket", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-athena-query-results-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::athena-examples*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkCrowdFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "crowd:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CrowdApiFullAccess"
        }
    ]
}
Policy Name: AmazonElasticFileSystemReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "elasticfilesystem:Describe*", 
                "kms:ListAliases"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudFrontFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "arn:aws:s3:::*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "acm:ListCertificates", 
                "cloudfront:*", 
                "iam:ListServerCertificates", 
                "waf:ListWebACLs", 
                "waf:GetWebACL"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9Administrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloud9:*", 
                "iam:GetUser", 
                "iam:ListUsers", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "cloud9.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonMachineLearningRoleforRedshiftDataSource
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:RevokeSecurityGroupIngress", 
                "redshift:AuthorizeClusterSecurityGroupIngress", 
                "redshift:CreateClusterSecurityGroup", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "redshift:ModifyCluster", 
                "redshift:RevokeClusterSecurityGroupIngress", 
                "s3:GetBucketLocation", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:PutBucketPolicy", 
                "s3:PutObject"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingEMRInstanceGroupPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticmapreduce:ListInstanceGroups", 
                "elasticmapreduce:ModifyInstanceGroups", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOrganizationsServiceTrustPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:DeleteRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/organizations.amazonaws.com/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDeletionOfServiceLinkedRoleForOrganizations"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowCreationOfServiceLinkedRoles"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsNon-financialReportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "mobileanalytics:GetReports", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudTrailFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:AddPermission", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListTopics", 
                "sns:SetTopicAttributes", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:ListAllMyBuckets", 
                "s3:PutBucketPolicy", 
                "s3:ListBucket", 
                "s3:GetObject", 
                "s3:GetBucketLocation", 
                "s3:GetBucketPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "cloudtrail:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole", 
                "iam:ListRoles", 
                "iam:GetRolePolicy", 
                "iam:GetUser"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kms:ListKeys", 
                "kms:ListAliases"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCognitoDeveloperAuthenticatedIdentities
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-identity:GetOpenIdTokenForDeveloperIdentity", 
                "cognito-identity:LookupDeveloperIdentity", 
                "cognito-identity:MergeDeveloperIdentities", 
                "cognito-identity:UnlinkDeveloperIdentity"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudtrail:DescribeTrails", 
                "ec2:Describe*", 
                "config:Put*", 
                "config:Get*", 
                "config:List*", 
                "config:Describe*", 
                "cloudtrail:GetTrailStatus", 
                "s3:GetObject", 
                "iam:GetAccountAuthorizationDetails", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetGroup", 
                "iam:GetGroupPolicy", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:GetUser", 
                "iam:GetUserPolicy", 
                "iam:ListAttachedGroupPolicies", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListAttachedUserPolicies", 
                "iam:ListEntitiesForPolicy", 
                "iam:ListGroupPolicies", 
                "iam:ListGroupsForUser", 
                "iam:ListInstanceProfilesForRole", 
                "iam:ListPolicyVersions", 
                "iam:ListRolePolicies", 
                "iam:ListUserPolicies", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeLoadBalancerAttributes", 
                "elasticloadbalancing:DescribeLoadBalancerPolicies", 
                "elasticloadbalancing:DescribeTags", 
                "acm:DescribeCertificate", 
                "acm:ListCertificates", 
                "acm:ListTagsForCertificate", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "rds:DescribeDBSnapshotAttributes", 
                "rds:DescribeDBSnapshots", 
                "rds:DescribeDBSubnetGroups", 
                "rds:DescribeEventSubscriptions", 
                "rds:ListTagsForResource", 
                "rds:DescribeDBClusters", 
                "s3:GetAccelerateConfiguration", 
                "s3:GetBucketAcl", 
                "s3:GetBucketCORS", 
                "s3:GetBucketLocation", 
                "s3:GetBucketLogging", 
                "s3:GetBucketNotification", 
                "s3:GetBucketPolicy", 
                "s3:GetBucketRequestPayment", 
                "s3:GetBucketTagging", 
                "s3:GetBucketVersioning", 
                "s3:GetBucketWebsite", 
                "s3:GetLifecycleConfiguration", 
                "s3:GetReplicationConfiguration", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "redshift:DescribeClusterParameterGroups", 
                "redshift:DescribeClusterParameters", 
                "redshift:DescribeClusterSecurityGroups", 
                "redshift:DescribeClusterSnapshots", 
                "redshift:DescribeClusterSubnetGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeEventSubscriptions", 
                "redshift:DescribeLoggingStatus", 
                "dynamodb:DescribeLimits", 
                "dynamodb:DescribeTable", 
                "dynamodb:ListTables", 
                "dynamodb:ListTagsOfResource", 
                "cloudwatch:DescribeAlarms", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingPolicies", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLaunchConfigurations", 
                "autoscaling:DescribeLifecycleHooks", 
                "autoscaling:DescribePolicies", 
                "autoscaling:DescribeScheduledActions", 
                "autoscaling:DescribeTags", 
                "lambda:GetFunction", 
                "lambda:GetPolicy", 
                "lambda:ListFunctions", 
                "lambda:GetAlias", 
                "lambda:ListAliases", 
                "waf-regional:GetWebACLForResource", 
                "waf-regional:GetWebACL", 
                "cloudfront:ListTagsForResource"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingAppStreamFleetPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:UpdateFleet", 
                "appstream:DescribeFleets", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSGlueServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glue:*", 
                "s3:GetBucketLocation", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketAcl", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeRouteTables", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "iam:ListRolePolicies", 
                "iam:GetRole", 
                "iam:GetRolePolicy"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*/*", 
                "arn:aws:s3:::*/*aws-glue-*/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::crawler-public*", 
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:/aws-glue/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:network-interface/*", 
                "arn:aws:ec2:*:*:security-group/*", 
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringEquals": {
                    "aws:TagKeys": [
                        "aws-glue-service-resource"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonAppStreamServiceAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeSubnets", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:ListBucket", 
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject", 
                "s3:GetObjectVersion", 
                "s3:DeleteObjectVersion", 
                "s3:PutBucketPolicy"
            ], 
            "Resource": "arn:aws:s3:::appstream2-36fb080bb8-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRedshiftFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "redshift:*", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "sns:CreateTopic", 
                "sns:Get*", 
                "sns:List*", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:EnableAlarmActions", 
                "cloudwatch:DisableAlarmActions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/redshift.amazonaws.com/AWSServiceRoleForRedshift", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "redshift.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonZocaloReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "zocalo:Describe*", 
                "ds:DescribeDirectories", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudHSMReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudhsm:Get*", 
                "cloudhsm:List*", 
                "cloudhsm:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ComprehendFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "comprehend:*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "iam:ListRoles", 
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: SystemAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:Describe*", 
                "acm:Get*", 
                "acm:List*", 
                "acm:Request*", 
                "acm:Resend*", 
                "autoscaling:*", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:ListPublicKeys", 
                "cloudtrail:ListTags", 
                "cloudtrail:LookupEvents", 
                "cloudtrail:StartLogging", 
                "cloudtrail:StopLogging", 
                "cloudwatch:*", 
                "codecommit:BatchGetRepositories", 
                "codecommit:CreateBranch", 
                "codecommit:CreateRepository", 
                "codecommit:Get*", 
                "codecommit:GitPull", 
                "codecommit:GitPush", 
                "codecommit:List*", 
                "codecommit:Put*", 
                "codecommit:Test*", 
                "codecommit:Update*", 
                "codedeploy:*", 
                "codepipeline:*", 
                "config:*", 
                "ds:*", 
                "ec2:Allocate*", 
                "ec2:AssignPrivateIpAddresses*", 
                "ec2:Associate*", 
                "ec2:Allocate*", 
                "ec2:AttachInternetGateway", 
                "ec2:AttachNetworkInterface", 
                "ec2:AttachVpnGateway", 
                "ec2:Bundle*", 
                "ec2:Cancel*", 
                "ec2:Copy*", 
                "ec2:CreateCustomerGateway", 
                "ec2:CreateDhcpOptions", 
                "ec2:CreateFlowLogs", 
                "ec2:CreateImage", 
                "ec2:CreateInstanceExportTask", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateKeyPair", 
                "ec2:CreateNatGateway", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreatePlacementGroup", 
                "ec2:CreateReservedInstancesListing", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSnapshot", 
                "ec2:CreateSpotDatafeedSubscription", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:CreateVpc", 
                "ec2:CreateVpcEndpoint", 
                "ec2:CreateVpnConnection", 
                "ec2:CreateVpnConnectionRoute", 
                "ec2:CreateVpnGateway", 
                "ec2:DeleteFlowLogs", 
                "ec2:DeleteKeyPair", 
                "ec2:DeleteNatGateway", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeletePlacementGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteSpotDatafeedSubscription", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteTags", 
                "ec2:DeleteVpc", 
                "ec2:DeleteVpcEndpoints", 
                "ec2:DeleteVpnConnection", 
                "ec2:DeleteVpnConnectionRoute", 
                "ec2:DeleteVpnGateway", 
                "ec2:DeregisterImage", 
                "ec2:Describe*", 
                "ec2:DetachInternetGateway", 
                "ec2:DetachNetworkInterface", 
                "ec2:DetachVpnGateway", 
                "ec2:DisableVgwRoutePropagation", 
                "ec2:DisableVpcClassicLinkDnsSupport", 
                "ec2:DisassociateAddress", 
                "ec2:DisassociateRouteTable", 
                "ec2:EnableVgwRoutePropagation", 
                "ec2:EnableVolumeIO", 
                "ec2:EnableVpcClassicLinkDnsSupport", 
                "ec2:GetConsoleOutput", 
                "ec2:GetHostReservationPurchasePreview", 
                "ec2:GetPasswordData", 
                "ec2:Import*", 
                "ec2:Modify*", 
                "ec2:MonitorInstances", 
                "ec2:MoveAddressToVpc", 
                "ec2:Purchase*", 
                "ec2:RegisterImage", 
                "ec2:Release*", 
                "ec2:Replace*", 
                "ec2:ReportInstanceStatus", 
                "ec2:Request*", 
                "ec2:Reset*", 
                "ec2:RestoreAddressToClassic", 
                "ec2:RunScheduledInstances", 
                "ec2:UnassignPrivateIpAddresses", 
                "ec2:UnmonitorInstances", 
                "elasticloadbalancing:*", 
                "events:*", 
                "iam:GetAccount*", 
                "iam:GetContextKeys*", 
                "iam:GetCredentialReport", 
                "iam:ListAccountAliases", 
                "iam:ListGroups", 
                "iam:ListOpenIDConnectProviders", 
                "iam:ListPolicies", 
                "iam:ListPoliciesGrantingServiceAccess", 
                "iam:ListRoles", 
                "iam:ListSAMLProviders", 
                "iam:ListServerCertificates", 
                "iam:Simulate*", 
                "iam:UpdateServerCertificate", 
                "iam:UpdateSigningCertificate", 
                "kinesis:ListStreams", 
                "kinesis:PutRecord", 
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:Describe*", 
                "kms:GenerateRandom", 
                "kms:Get*", 
                "kms:List*", 
                "kms:Encrypt", 
                "kms:ReEncrypt*", 
                "lambda:Create*", 
                "lambda:Delete*", 
                "lambda:Get*", 
                "lambda:InvokeFunction", 
                "lambda:List*", 
                "lambda:PublishVersion", 
                "lambda:Update*", 
                "logs:*", 
                "rds:Describe*", 
                "rds:ListTagsForResource", 
                "route53:*", 
                "route53domains:*", 
                "ses:*", 
                "sns:*", 
                "sqs:*", 
                "trustedadvisor:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AcceptVpcPeeringConnection", 
                "ec2:AttachClassicLinkVpc", 
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateVpcPeeringConnection", 
                "ec2:DeleteCustomerGateway", 
                "ec2:DeleteDhcpOptions", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteNetworkAcl*", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteVolume", 
                "ec2:DeleteVpcPeeringConnection", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:DetachVolume", 
                "ec2:DisableVpcClassicLink", 
                "ec2:EnableVpcClassicLink", 
                "ec2:GetConsoleScreenshot", 
                "ec2:RebootInstances", 
                "ec2:RejectVpcPeeringConnection", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "s3:*", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetAccessKeyLastUsed", 
                "iam:GetGroup*", 
                "iam:GetInstanceProfile", 
                "iam:GetLoginProfile", 
                "iam:GetOpenIDConnectProvider", 
                "iam:GetPolicy*", 
                "iam:GetRole*", 
                "iam:GetSAMLProvider", 
                "iam:GetSSHPublicKey", 
                "iam:GetServerCertificate", 
                "iam:GetServiceLastAccessed*", 
                "iam:GetUser*", 
                "iam:ListAccessKeys", 
                "iam:ListAttached*", 
                "iam:ListEntitiesForPolicy", 
                "iam:ListGroupPolicies", 
                "iam:ListGroupsForUser", 
                "iam:ListInstanceProfiles*", 
                "iam:ListMFADevices", 
                "iam:ListPolicyVersions", 
                "iam:ListRolePolicies", 
                "iam:ListSSHPublicKeys", 
                "iam:ListSigningCertificates", 
                "iam:ListUserPolicies", 
                "iam:Upload*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:ListRoles", 
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/rds-monitoring-role", 
                "arn:aws:iam::*:role/ec2-sysadmin-*", 
                "arn:aws:iam::*:role/ecr-sysadmin-*", 
                "arn:aws:iam::*:role/lamdba-sysadmin-*", 
                "arn:aws:iam::*:role/lambda-sysadmin-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceEventsRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:RunTask"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:Get*", 
                "route53:List*", 
                "route53:TestDNSAnswer"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMigrationHubDiscoveryAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "discovery:ListConfigurations", 
                "discovery:DescribeConfigurations"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ReportsAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "ec2-reports:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceAutoscaleRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:DescribeServices", 
                "ecs:UpdateService"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncSchemaAuthor
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appsync:GraphQL", 
                "appsync:CreateResolver", 
                "appsync:CreateType", 
                "appsync:DeleteResolver", 
                "appsync:DeleteType", 
                "appsync:GetResolver", 
                "appsync:GetType", 
                "appsync:GetDataSource", 
                "appsync:GetSchemaCreationStatus", 
                "appsync:GetIntrospectionSchema", 
                "appsync:GetGraphqlApi", 
                "appsync:ListTypes", 
                "appsync:ListApiKeys", 
                "appsync:ListResolvers", 
                "appsync:ListDataSources", 
                "appsync:ListGraphqlApis", 
                "appsync:StartSchemaCreation", 
                "appsync:UpdateResolver", 
                "appsync:UpdateType"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessDeviceSetup
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:RegisterDevice", 
                "a4b:CompleteRegistration", 
                "a4b:SearchDevices"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSBatchServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeImages", 
                "ec2:DescribeImageAttribute", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSpotFleetInstances", 
                "ec2:DescribeSpotFleetRequests", 
                "ec2:DescribeSpotPriceHistory", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:RequestSpotFleet", 
                "ec2:CancelSpotFleetRequests", 
                "ec2:ModifySpotFleetRequest", 
                "ec2:TerminateInstances", 
                "autoscaling:DescribeAccountLimits", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLaunchConfigurations", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:CreateLaunchConfiguration", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:UpdateAutoScalingGroup", 
                "autoscaling:SetDesiredCapacity", 
                "autoscaling:DeleteLaunchConfiguration", 
                "autoscaling:DeleteAutoScalingGroup", 
                "autoscaling:CreateOrUpdateTags", 
                "autoscaling:SuspendProcesses", 
                "autoscaling:PutNotificationConfiguration", 
                "autoscaling:TerminateInstanceInAutoScalingGroup", 
                "ecs:DescribeClusters", 
                "ecs:DescribeContainerInstances", 
                "ecs:DescribeTaskDefinition", 
                "ecs:DescribeTasks", 
                "ecs:ListClusters", 
                "ecs:ListContainerInstances", 
                "ecs:ListTaskDefinitionFamilies", 
                "ecs:ListTaskDefinitions", 
                "ecs:ListTasks", 
                "ecs:CreateCluster", 
                "ecs:DeleteCluster", 
                "ecs:RegisterTaskDefinition", 
                "ecs:DeregisterTaskDefinition", 
                "ecs:RunTask", 
                "ecs:StartTask", 
                "ecs:StopTask", 
                "ecs:UpdateContainerAgent", 
                "ecs:DeregisterContainerInstance", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogGroups", 
                "iam:GetInstanceProfile", 
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ecs-tasks.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": [
                        "spot.amazonaws.com", 
                        "spotfleet.amazonaws.com", 
                        "autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AWSElasticBeanstalkWebTier
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:Get*", 
                "s3:List*", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "BucketAccess"
        }, 
        {
            "Action": [
                "xray:PutTraceSegments", 
                "xray:PutTelemetryRecords"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "XRayAccess"
        }, 
        {
            "Action": [
                "logs:PutLogEvents", 
                "logs:CreateLogStream", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudWatchLogsAccess"
        }
    ]
}
Policy Name: AmazonSQSReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sqs:GetQueueAttributes", 
                "sqs:ListQueues"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMobileHub_ServiceUseOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateUploadBucket", 
                "cloudformation:ListStacks", 
                "cloudformation:ValidateTemplate", 
                "cloudfront:CreateDistribution", 
                "cloudfront:DeleteDistribution", 
                "cloudfront:GetDistribution", 
                "cloudfront:GetDistributionConfig", 
                "cloudfront:TagResource", 
                "cloudfront:UpdateDistribution", 
                "cognito-identity:CreateIdentityPool", 
                "cognito-identity:UpdateIdentityPool", 
                "cognito-identity:DeleteIdentityPool", 
                "cognito-identity:SetIdentityPoolRoles", 
                "cognito-idp:CreateUserPool", 
                "dynamodb:CreateTable", 
                "dynamodb:DeleteTable", 
                "dynamodb:DescribeTable", 
                "dynamodb:TagResource", 
                "dynamodb:UpdateTable", 
                "iam:AddClientIDToOpenIDConnectProvider", 
                "iam:CreateOpenIDConnectProvider", 
                "iam:GetOpenIDConnectProvider", 
                "iam:ListOpenIDConnectProviders", 
                "iam:CreateSAMLProvider", 
                "iam:GetSAMLProvider", 
                "iam:ListSAMLProvider", 
                "iam:UpdateSAMLProvider", 
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:GetFunction", 
                "mobileanalytics:CreateApp", 
                "mobileanalytics:DeleteApp", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListPlatformApplications", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "lex:PutIntent", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:PutSlotType", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:PutBot", 
                "lex:GetBot", 
                "lex:GetBots", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:CreatePlatformApplication", 
                "sns:DeletePlatformApplication", 
                "sns:GetPlatformApplicationAttributes", 
                "sns:SetPlatformApplicationAttributes"
            ], 
            "Resource": [
                "arn:aws:sns:*:*:app/*_MOBILEHUB_*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteBucketPolicy", 
                "s3:DeleteBucketWebsite", 
                "s3:ListBucket", 
                "s3:ListBucketVersions", 
                "s3:GetBucketLocation", 
                "s3:GetBucketVersioning", 
                "s3:PutBucketVersioning", 
                "s3:PutBucketWebsite", 
                "s3:PutBucketPolicy", 
                "s3:PutBucketTagging", 
                "s3:PutBucketCORS", 
                "s3:SetBucketCrossOriginConfiguration"
            ], 
            "Resource": [
                "arn:aws:s3:::*-userfiles-mobilehub-*", 
                "arn:aws:s3:::*-contentdelivery-mobilehub-*", 
                "arn:aws:s3:::*-hosting-mobilehub-*", 
                "arn:aws:s3:::*-deployments-mobilehub-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:DeleteObject", 
                "s3:DeleteVersion", 
                "s3:DeleteObjectVersion", 
                "s3:GetObject", 
                "s3:GetObjectVersion", 
                "s3:PutObject", 
                "s3:PutObjectAcl"
            ], 
            "Resource": [
                "arn:aws:s3:::*-userfiles-mobilehub-*/*", 
                "arn:aws:s3:::*-contentdelivery-mobilehub-*/*", 
                "arn:aws:s3:::*-hosting-mobilehub-*/*", 
                "arn:aws:s3:::*-deployments-mobilehub-*/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:AddPermission", 
                "lambda:CreateAlias", 
                "lambda:DeleteAlias", 
                "lambda:UpdateAlias", 
                "lambda:GetFunctionConfiguration", 
                "lambda:GetPolicy", 
                "lambda:RemovePermission", 
                "lambda:UpdateFunctionCode", 
                "lambda:UpdateFunctionConfiguration"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:*-mobilehub-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateRole", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListRolePolicies", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:UpdateAssumeRolePolicy", 
                "iam:AttachRolePolicy", 
                "iam:DetachRolePolicy"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/*_unauth_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_auth_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_consolepush_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_lambdaexecutionrole_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_smsverification_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_botexecutionrole_MOBILEHUB_*", 
                "arn:aws:iam::*:role/pinpoint-events", 
                "arn:aws:iam::*:role/service-role/pinpoint-events", 
                "arn:aws:iam::*:role/MOBILEHUB-*-lambdaexecution*", 
                "arn:aws:iam::*:role/MobileHub_Service_Role"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole", 
                "iam:GetRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/mobilehub/*:log-stream:*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListAttachedRolePolicies"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/MobileHub_Service_Role"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStacks", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStackResource", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStackResources", 
                "cloudformation:UpdateStack"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/MOBILEHUB-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "apigateway:DELETE", 
                "apigateway:GET", 
                "apigateway:HEAD", 
                "apigateway:OPTIONS", 
                "apigateway:PATCH", 
                "apigateway:POST", 
                "apigateway:PUT"
            ], 
            "Resource": [
                "arn:aws:apigateway:*::/restapis*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "apigateway:GET", 
                "apigateway:HEAD", 
                "apigateway:OPTIONS"
            ], 
            "Resource": [
                "arn:aws:apigateway:*::/domainnames*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cognito-idp:DeleteUserPool", 
                "cognito-idp:DescribeUserPool", 
                "cognito-idp:CreateUserPoolClient", 
                "cognito-idp:DescribeUserPoolClient", 
                "cognito-idp:DeleteUserPoolClient"
            ], 
            "Resource": [
                "arn:aws:cognito-idp:*:*:userpool/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mobiletargeting:UpdateApnsChannel", 
                "mobiletargeting:UpdateApnsSandboxChannel", 
                "mobiletargeting:UpdateEmailChannel", 
                "mobiletargeting:UpdateGcmChannel", 
                "mobiletargeting:UpdateSmsChannel", 
                "mobiletargeting:DeleteApnsChannel", 
                "mobiletargeting:DeleteApnsSandboxChannel", 
                "mobiletargeting:DeleteEmailChannel", 
                "mobiletargeting:DeleteGcmChannel", 
                "mobiletargeting:DeleteSmsChannel"
            ], 
            "Resource": [
                "arn:aws:mobiletargeting:*:*:apps/*/channels/*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonChimeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "chime:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticLoadBalancingClassicServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAddresses", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:AttachNetworkInterface", 
                "ec2:DetachNetworkInterface", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssignIpv6Addresses", 
                "ec2:UnassignIpv6Addresses"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMigrationHubDMSAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:CreateProgressUpdateStream"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:AssociateCreatedArtifact", 
                "mgh:DescribeMigrationTask", 
                "mgh:DisassociateCreatedArtifact", 
                "mgh:ImportMigrationTask", 
                "mgh:ListCreatedArtifacts", 
                "mgh:NotifyMigrationTaskState", 
                "mgh:PutResourceAttributes", 
                "mgh:NotifyApplicationState", 
                "mgh:DescribeApplicationState", 
                "mgh:AssociateDiscoveredResource", 
                "mgh:DisassociateDiscoveredResource", 
                "mgh:ListDiscoveredResources"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:ListMigrationTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "kinesis:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGuardDutyReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "guardduty:GetDetector", 
                "guardduty:ListDetectors", 
                "guardduty:GetIPSet", 
                "guardduty:ListIPSets", 
                "guardduty:GetThreatIntelSet", 
                "guardduty:ListThreatIntelSets", 
                "guardduty:GetFindings", 
                "guardduty:GetFindingsStatistics", 
                "guardduty:ListFindings", 
                "guardduty:GetMembers", 
                "guardduty:ListMembers", 
                "guardduty:GetMasterAccount", 
                "guardduty:ListInvitations", 
                "guardduty:GetInvitationsCount"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowAllUsersToViewAndManageThisGroup"
        }
    ]
}
Policy Name: AmazonECSServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AttachNetworkInterface", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:Describe*", 
                "ec2:DetachNetworkInterface", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DeregisterTargets", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:RegisterTargets", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateHealthCheck", 
                "route53:DeleteHealthCheck", 
                "route53:Get*", 
                "route53:List*", 
                "route53:UpdateHealthCheck", 
                "servicediscovery:DeregisterInstance", 
                "servicediscovery:Get*", 
                "servicediscovery:List*", 
                "servicediscovery:RegisterInstance", 
                "servicediscovery:UpdateInstanceCustomHealthStatus"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:Describe*", 
                "machinelearning:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRekognitionFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rekognition:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: RDSCloudHsmAuthorizationRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudhsm:CreateLunaClient", 
                "cloudhsm:GetClientConfiguration", 
                "cloudhsm:DeleteLunaClient", 
                "cloudhsm:DescribeLunaClient", 
                "cloudhsm:ModifyLunaClient", 
                "cloudhsm:DescribeHapg", 
                "cloudhsm:ModifyHapg", 
                "cloudhsm:GetConfig"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AdministratorAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningRealTimePredictionOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:Predict"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncPushToCloudWatchLogs
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMigrationHubSMSAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:CreateProgressUpdateStream"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:AssociateCreatedArtifact", 
                "mgh:DescribeMigrationTask", 
                "mgh:DisassociateCreatedArtifact", 
                "mgh:ImportMigrationTask", 
                "mgh:ListCreatedArtifacts", 
                "mgh:NotifyMigrationTaskState", 
                "mgh:PutResourceAttributes", 
                "mgh:NotifyApplicationState", 
                "mgh:DescribeApplicationState", 
                "mgh:AssociateDiscoveredResource", 
                "mgh:DisassociateDiscoveredResource", 
                "mgh:ListDiscoveredResources"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:ListMigrationTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigUserAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "config:Get*", 
                "config:Describe*", 
                "config:Deliver*", 
                "config:List*", 
                "tag:GetResources", 
                "tag:GetTagKeys", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:LookupEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTConfigAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:AcceptCertificateTransfer", 
                "iot:AddThingToThingGroup", 
                "iot:AssociateTargetsWithJob", 
                "iot:AttachPolicy", 
                "iot:AttachPrincipalPolicy", 
                "iot:AttachThingPrincipal", 
                "iot:CancelCertificateTransfer", 
                "iot:CancelJob", 
                "iot:ClearDefaultAuthorizer", 
                "iot:CreateAuthorizer", 
                "iot:CreateCertificateFromCsr", 
                "iot:CreateJob", 
                "iot:CreateKeysAndCertificate", 
                "iot:CreateOTAUpdate", 
                "iot:CreatePolicy", 
                "iot:CreatePolicyVersion", 
                "iot:CreateRoleAlias", 
                "iot:CreateStream", 
                "iot:CreateThing", 
                "iot:CreateThingGroup", 
                "iot:CreateThingType", 
                "iot:CreateTopicRule", 
                "iot:DeleteAuthorizer", 
                "iot:DeleteCACertificate", 
                "iot:DeleteCertificate", 
                "iot:DeleteOTAUpdate", 
                "iot:DeletePolicy", 
                "iot:DeletePolicyVersion", 
                "iot:DeleteRegistrationCode", 
                "iot:DeleteRoleAlias", 
                "iot:DeleteStream", 
                "iot:DeleteThing", 
                "iot:DeleteThingGroup", 
                "iot:DeleteThingType", 
                "iot:DeleteTopicRule", 
                "iot:DeleteV2LoggingLevel", 
                "iot:DeprecateThingType", 
                "iot:DescribeAuthorizer", 
                "iot:DescribeCACertificate", 
                "iot:DescribeCertificate", 
                "iot:DescribeCertificateTag", 
                "iot:DescribeDefaultAuthorizer", 
                "iot:DescribeEndpoint", 
                "iot:DescribeEventConfigurations", 
                "iot:DescribeIndex", 
                "iot:DescribeJob", 
                "iot:DescribeJobExecution", 
                "iot:DescribeRoleAlias", 
                "iot:DescribeStream", 
                "iot:DescribeThing", 
                "iot:DescribeThingGroup", 
                "iot:DescribeThingRegistrationTask", 
                "iot:DescribeThingType", 
                "iot:DetachPolicy", 
                "iot:DetachPrincipalPolicy", 
                "iot:DetachThingPrincipal", 
                "iot:DisableTopicRule", 
                "iot:EnableTopicRule", 
                "iot:GetEffectivePolicies", 
                "iot:GetIndexingConfiguration", 
                "iot:GetJobDocument", 
                "iot:GetLoggingOptions", 
                "iot:GetOTAUpdate", 
                "iot:GetPolicy", 
                "iot:GetPolicyVersion", 
                "iot:GetRegistrationCode", 
                "iot:GetTopicRule", 
                "iot:GetV2LoggingOptions", 
                "iot:ListAttachedPolicies", 
                "iot:ListAuthorizers", 
                "iot:ListCACertificates", 
                "iot:ListCertificates", 
                "iot:ListCertificatesByCA", 
                "iot:ListIndices", 
                "iot:ListJobExecutionsForJob", 
                "iot:ListJobExecutionsForThing", 
                "iot:ListJobs", 
                "iot:ListOTAUpdates", 
                "iot:ListOutgoingCertificates", 
                "iot:ListPolicies", 
                "iot:ListPolicyPrincipals", 
                "iot:ListPolicyVersions", 
                "iot:ListPrincipalPolicies", 
                "iot:ListPrincipalThings", 
                "iot:ListRoleAliases", 
                "iot:ListStreams", 
                "iot:ListTargetsForPolicy", 
                "iot:ListThingGroups", 
                "iot:ListThingGroupsForThing", 
                "iot:ListThingPrincipals", 
                "iot:ListThingRegistrationTaskReports", 
                "iot:ListThingRegistrationTasks", 
                "iot:ListThings", 
                "iot:ListThingsInThingGroup", 
                "iot:ListThingTypes", 
                "iot:ListTopicRules", 
                "iot:ListV2LoggingLevels", 
                "iot:RegisterCACertificate", 
                "iot:RegisterCertificate", 
                "iot:RegisterThing", 
                "iot:RejectCertificateTransfer", 
                "iot:RemoveThingFromThingGroup", 
                "iot:ReplaceTopicRule", 
                "iot:SearchIndex", 
                "iot:SetDefaultAuthorizer", 
                "iot:SetDefaultPolicyVersion", 
                "iot:SetLoggingOptions", 
                "iot:SetV2LoggingLevel", 
                "iot:SetV2LoggingOptions", 
                "iot:StartThingRegistrationTask", 
                "iot:StopThingRegistrationTask", 
                "iot:TestAuthorization", 
                "iot:TestInvokeAuthorizer", 
                "iot:TransferCertificate", 
                "iot:UpdateAuthorizer", 
                "iot:UpdateCACertificate", 
                "iot:UpdateCertificate", 
                "iot:UpdateCertificateTag", 
                "iot:UpdateEventConfigurations", 
                "iot:UpdateIndexingConfiguration", 
                "iot:UpdateRoleAlias", 
                "iot:UpdateStream", 
                "iot:UpdateThing", 
                "iot:UpdateThingGroup", 
                "iot:UpdateThingGroupsForThing"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: SecurityAudit
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:DescribeCertificate", 
                "acm:ListCertificates", 
                "autoscaling:Describe*", 
                "batch:DescribeComputeEnvironments", 
                "batch:DescribeJobDefinitions", 
                "clouddirectory:ListDirectories", 
                "cloudformation:DescribeStack*", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStack*", 
                "cloudformation:GetStackPolicy", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "cloudhsm:ListHapgs", 
                "cloudhsm:ListHsms", 
                "cloudhsm:ListLunaClients", 
                "cloudsearch:DescribeDomains", 
                "cloudsearch:DescribeServiceAccessPolicies", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:ListTags", 
                "cloudwatch:Describe*", 
                "codebuild:ListProjects", 
                "codecommit:BatchGetRepositories", 
                "codecommit:GetBranch", 
                "codecommit:GetObjectIdentifier", 
                "codecommit:GetRepository", 
                "codecommit:List*", 
                "codedeploy:Batch*", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codepipeline:ListPipelines", 
                "cognito-identity:ListIdentityPools", 
                "cognito-idp:ListUserPools", 
                "config:Deliver*", 
                "config:Describe*", 
                "config:Get*", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:EvaluateExpression", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:QueryObjects", 
                "datapipeline:ValidatePipelineDefinition", 
                "directconnect:Describe*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListStreams", 
                "dynamodb:ListTables", 
                "ec2:Describe*", 
                "ecr:DescribeRepositories", 
                "ecr:GetRepositoryPolicy", 
                "ecs:Describe*", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:Describe*", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticloadbalancing:Describe*", 
                "elasticmapreduce:DescribeJobFlows", 
                "elasticmapreduce:ListClusters", 
                "elasticmapreduce:ListInstances", 
                "es:Describe*", 
                "es:ListDomainNames", 
                "events:DescribeEventBus", 
                "events:ListRules", 
                "firehose:Describe*", 
                "firehose:List*", 
                "gamelift:ListBuilds", 
                "gamelift:ListFleets", 
                "glacier:DescribeVault", 
                "glacier:GetVaultAccessPolicy", 
                "glacier:ListVaults", 
                "iam:GenerateCredentialReport", 
                "iam:Get*", 
                "iam:List*", 
                "iot:ListThings", 
                "kinesis:ListStreams", 
                "kinesisanalytics:ListApplications", 
                "kms:Describe*", 
                "kms:Get*", 
                "kms:List*", 
                "lambda:GetAccountSettings", 
                "lambda:GetPolicy", 
                "lambda:ListFunctions", 
                "logs:DescribeDestinations", 
                "logs:DescribeLogGroups", 
                "logs:DescribeMetricFilters", 
                "logs:DescribeResourcePolicies", 
                "machinelearning:DescribeMLModels", 
                "mediastore:GetContainerPolicy", 
                "mediastore:ListContainers", 
                "opsworks-cm:DescribeServers", 
                "rds:Describe*", 
                "rds:DownloadDBLogFilePortion", 
                "rds:ListTagsForResource", 
                "redshift:Describe*", 
                "route53:Get*", 
                "route53:List*", 
                "route53domains:GetDomainDetail", 
                "route53domains:GetOperationDetail", 
                "route53domains:ListDomains", 
                "route53domains:ListOperations", 
                "route53domains:ListTagsForDomain", 
                "s3:GetAccelerateConfiguration", 
                "s3:GetAnalyticsConfiguration", 
                "s3:GetBucket*", 
                "s3:GetEncryptionConfiguration", 
                "s3:GetInventoryConfiguration", 
                "s3:GetLifecycleConfiguration", 
                "s3:GetMetricsConfiguration", 
                "s3:GetObjectAcl", 
                "s3:GetObjectVersionAcl", 
                "s3:GetReplicationConfiguration", 
                "s3:ListAllMyBuckets", 
                "sdb:DomainMetadata", 
                "sdb:ListDomains", 
                "serverlessrepo:GetApplicationPolicy", 
                "serverlessrepo:ListApplications", 
                "ses:GetIdentityDkimAttributes", 
                "ses:GetIdentityVerificationAttributes", 
                "ses:ListIdentities", 
                "snowball:ListClusters", 
                "snowball:ListJobs", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sqs:GetQueueAttributes", 
                "sqs:ListQueues", 
                "ssm:DescribeDocumentPermission", 
                "ssm:ListDocuments", 
                "states:ListStateMachines", 
                "storagegateway:DescribeBandwidthRateLimit", 
                "storagegateway:DescribeCache", 
                "storagegateway:DescribeCachediSCSIVolumes", 
                "storagegateway:DescribeGatewayInformation", 
                "storagegateway:DescribeMaintenanceStartTime", 
                "storagegateway:DescribeNFSFileShares", 
                "storagegateway:DescribeSnapshotSchedule", 
                "storagegateway:DescribeStorediSCSIVolumes", 
                "storagegateway:DescribeTapeArchives", 
                "storagegateway:DescribeTapeRecoveryPoints", 
                "storagegateway:DescribeTapes", 
                "storagegateway:DescribeUploadBuffer", 
                "storagegateway:DescribeVTLDevices", 
                "storagegateway:DescribeWorkingStorage", 
                "storagegateway:List*", 
                "tag:GetResources", 
                "tag:GetTagKeys", 
                "trustedadvisor:Describe*", 
                "waf:ListWebACLs", 
                "waf-regional:ListWebACLs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSResourceGroupsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "resource-groups:Describe*", 
                "resource-groups:Get*", 
                "resource-groups:List*", 
                "resource-groups:Search*", 
                "tag:Get*", 
                "cloudformation:DescribeStacks", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeVolumes", 
                "ec2:DescribeVpcs", 
                "elasticache:DescribeCacheClusters", 
                "elasticache:DescribeSnapshots", 
                "elasticache:ListTagsForResource", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticmapreduce:DescribeCluster", 
                "elasticmapreduce:ListClusters", 
                "glacier:ListVaults", 
                "glacier:DescribeVault", 
                "glacier:ListTagsForVault", 
                "kinesis:ListStreams", 
                "kinesis:DescribeStream", 
                "kinesis:ListTagsForStream", 
                "opsworks:DescribeStacks", 
                "opsworks:ListTags", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSnapshots", 
                "rds:ListTagsForResource", 
                "redshift:DescribeClusters", 
                "redshift:DescribeTags", 
                "route53domains:ListDomains", 
                "route53:ListHealthChecks", 
                "route53:GetHealthCheck", 
                "route53:ListHostedZones", 
                "route53:GetHostedZone", 
                "route53:ListTagsForResource", 
                "storagegateway:ListGateways", 
                "storagegateway:DescribeGatewayInformation", 
                "storagegateway:ListTagsForResource", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketTagging", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTags", 
                "ssm:ListDocuments"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeStarFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codestar:*", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "cloud9:DescribeEnvironment*", 
                "cloud9:ValidateEnvironmentName"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CodeStarEC2"
        }, 
        {
            "Action": [
                "cloudformation:DescribeStack*", 
                "cloudformation:GetTemplateSummary"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awscodestar-*"
            ], 
            "Effect": "Allow", 
            "Sid": "CodeStarCF"
        }
    ]
}
Policy Name: AmazonSSMServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:CancelCommand", 
                "ssm:GetCommandInvocation", 
                "ssm:ListCommandInvocations", 
                "ssm:ListCommands", 
                "ssm:SendCommand"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "resource-groups:ListGroups", 
                "resource-groups:ListGroupResources"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "tag:GetResources"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDataPipeline_FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:List*", 
                "dynamodb:DescribeTable", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "sns:ListTopics", 
                "sns:Subscribe", 
                "iam:ListRoles", 
                "iam:GetRolePolicy", 
                "iam:GetInstanceProfile", 
                "iam:ListInstanceProfiles", 
                "datapipeline:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultRole"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDynamoDBReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "cloudwatch:DescribeAlarmHistory", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:QueryObjects", 
                "dynamodb:BatchGetItem", 
                "dynamodb:DescribeTable", 
                "dynamodb:GetItem", 
                "dynamodb:ListTables", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "dynamodb:DescribeReservedCapacity", 
                "dynamodb:DescribeReservedCapacityOfferings", 
                "dynamodb:ListTagsOfResource", 
                "dynamodb:DescribeTimeToLive", 
                "dynamodb:DescribeLimits", 
                "dynamodb:ListGlobalTables", 
                "dynamodb:DescribeGlobalTable", 
                "dynamodb:DescribeBackup", 
                "dynamodb:ListBackups", 
                "dynamodb:DescribeContinuousBackups", 
                "dax:Describe*", 
                "dax:List*", 
                "dax:GetItem", 
                "dax:BatchGetItem", 
                "dax:Query", 
                "dax:Scan", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "iam:GetRole", 
                "iam:ListRoles", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "lambda:ListFunctions", 
                "lambda:ListEventSourceMappings", 
                "lambda:GetFunctionConfiguration"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingConsoleFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateKeyPair", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeLaunchTemplateVersions", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:ImportKeyPair"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:ListMetrics", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:ListSubscriptions", 
                "sns:ListTopics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:ListRoles", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "autoscaling.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSElementalMediaPackageFullAccess
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": "mediapackage:*", 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AmazonKinesisVideoStreamsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "kinesisvideo:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSNSReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:GetTopicAttributes", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSEC2SpotServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonElasticMapReduceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackEvents", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateRoute", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DeleteRoute", 
                "ec2:DeleteTags", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSpotPriceHistory", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeNetworkAcls", 
                "ec2:CreateVpcEndpoint", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RunInstances", 
                "ec2:TerminateInstances", 
                "elasticmapreduce:*", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "kms:List*", 
                "s3:*", 
                "sdb:*", 
                "support:CreateCase", 
                "support:DescribeServices", 
                "support:DescribeSeverityLevels"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "elasticmapreduce.amazonaws.com", 
                        "elasticmapreduce.amazonaws.com.cn"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonS3ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:Get*", 
                "s3:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticbeanstalk:*", 
                "ec2:*", 
                "ecs:*", 
                "ecr:*", 
                "elasticloadbalancing:*", 
                "autoscaling:*", 
                "cloudwatch:*", 
                "s3:*", 
                "sns:*", 
                "cloudformation:*", 
                "dynamodb:*", 
                "rds:*", 
                "sqs:*", 
                "logs:*", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:PassRole", 
                "iam:ListRolePolicies", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:ListServerCertificates", 
                "acm:DescribeCertificate", 
                "acm:ListCertificates", 
                "codebuild:CreateProject", 
                "codebuild:DeleteProject", 
                "codebuild:BatchGetBuilds", 
                "codebuild:StartBuild"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:AddRoleToInstanceProfile", 
                "iam:CreateInstanceProfile", 
                "iam:CreateRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-elasticbeanstalk*", 
                "arn:aws:iam::*:instance-profile/aws-elasticbeanstalk*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "autoscaling.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "elasticbeanstalk.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:AttachRolePolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PolicyArn": [
                        "arn:aws:iam::aws:policy/AWSElasticBeanstalk*", 
                        "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalk*"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonWorkSpacesAdmin
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "workspaces:CreateWorkspaces", 
                "workspaces:DescribeWorkspaces", 
                "workspaces:RebootWorkspaces", 
                "workspaces:RebuildWorkspaces", 
                "workspaces:TerminateWorkspaces", 
                "workspaces:DescribeWorkspaceDirectories", 
                "workspaces:DescribeWorkspaceBundles", 
                "workspaces:ModifyWorkspaceProperties", 
                "workspaces:StopWorkspaces", 
                "workspaces:StartWorkspaces", 
                "workspaces:DescribeWorkspacesConnectionStatus", 
                "workspaces:CreateTags", 
                "workspaces:DeleteTags", 
                "workspaces:DescribeTags", 
                "kms:ListKeys", 
                "kms:ListAliases", 
                "kms:DescribeKey"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:CompleteLifecycleAction", 
                "autoscaling:DeleteLifecycleHook", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLifecycleHooks", 
                "autoscaling:PutLifecycleHook", 
                "autoscaling:RecordLifecycleActionHeartbeat", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:UpdateAutoScalingGroup", 
                "autoscaling:EnableMetricsCollection", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribePolicies", 
                "autoscaling:DescribeScheduledActions", 
                "autoscaling:DescribeNotificationConfigurations", 
                "autoscaling:DescribeLifecycleHooks", 
                "autoscaling:SuspendProcesses", 
                "autoscaling:ResumeProcesses", 
                "autoscaling:AttachLoadBalancers", 
                "autoscaling:PutScalingPolicy", 
                "autoscaling:PutScheduledUpdateGroupAction", 
                "autoscaling:PutNotificationConfiguration", 
                "autoscaling:PutLifecycleHook", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:DeleteAutoScalingGroup", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:TerminateInstances", 
                "tag:GetTags", 
                "tag:GetResources", 
                "sns:Publish", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticloadbalancing:RegisterTargets", 
                "elasticloadbalancing:DeregisterTargets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSESFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ses:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchLogsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:Describe*", 
                "logs:Get*", 
                "logs:List*", 
                "logs:TestMetricFilter", 
                "logs:FilterLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisFirehoseReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "firehose:Describe*", 
                "firehose:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksRegisterCLI
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "opsworks:AssignInstance", 
                "opsworks:CreateStack", 
                "opsworks:CreateLayer", 
                "opsworks:DeregisterInstance", 
                "opsworks:DescribeInstances", 
                "opsworks:DescribeStackProvisioningParameters", 
                "opsworks:DescribeStacks", 
                "opsworks:UnassignInstance"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:AddUserToGroup", 
                "iam:CreateAccessKey", 
                "iam:CreateGroup", 
                "iam:CreateUser", 
                "iam:ListInstanceProfiles", 
                "iam:PassRole", 
                "iam:PutUserPolicy"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDynamoDBFullAccesswithDataPipeline
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarmHistory", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics", 
                "cloudwatch:PutMetricAlarm", 
                "dynamodb:*", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sns:SetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "DDBConsole"
        }, 
        {
            "Action": [
                "lambda:*", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "DDBConsoleTriggers"
        }, 
        {
            "Action": [
                "datapipeline:*", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "DDBConsoleImportExport"
        }, 
        {
            "Action": [
                "iam:GetRolePolicy", 
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "IAMEDPRoles"
        }, 
        {
            "Action": [
                "ec2:CreateTags", 
                "ec2:DescribeInstances", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "elasticmapreduce:*", 
                "datapipeline:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "EMR"
        }, 
        {
            "Action": [
                "s3:DeleteObject", 
                "s3:Get*", 
                "s3:List*", 
                "s3:Put*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "S3"
        }
    ]
}
Policy Name: AmazonEC2RoleforDataPipelineRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "datapipeline:*", 
                "dynamodb:*", 
                "ec2:Describe*", 
                "elasticmapreduce:AddJobFlowSteps", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:ListInstance*", 
                "elasticmapreduce:ModifyInstanceGroups", 
                "rds:Describe*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "s3:*", 
                "sdb:*", 
                "sns:*", 
                "sqs:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchLogsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElementalMediaPackageReadOnly
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "mediapackage:List*", 
            "mediapackage:Describe*"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AWSElasticBeanstalkMulticontainerDocker
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:Poll", 
                "ecs:StartTask", 
                "ecs:StopTask", 
                "ecs:DiscoverPollEndpoint", 
                "ecs:StartTelemetrySession", 
                "ecs:RegisterContainerInstance", 
                "ecs:DeregisterContainerInstance", 
                "ecs:DescribeContainerInstances", 
                "ecs:Submit*", 
                "ecs:DescribeTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ECSAccess"
        }
    ]
}
Policy Name: AWSMigrationHubFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:*", 
                "discovery:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elastictranscoder:*", 
                "cloudfront:*", 
                "s3:List*", 
                "s3:Put*", 
                "s3:Get*", 
                "s3:*MultipartUpload*", 
                "iam:CreateRole", 
                "iam:GetRolePolicy", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:List*", 
                "sns:CreateTopic", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: IAMUserChangePassword
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:ChangePassword"
            ], 
            "Resource": [
                "arn:aws:iam::*:user/${aws:username}"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetAccountPasswordPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAPIGatewayAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "apigateway:*"
            ], 
            "Resource": "arn:aws:apigateway:*::/*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonVPCCrossAccountNetworkInterfaceOperations
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeRouteTables", 
                "ec2:CreateRoute", 
                "ec2:DeleteRoute", 
                "ec2:ReplaceRoute"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeNetworkInterfaces", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AssignPrivateIpAddresses", 
                "ec2:UnassignPrivateIpAddresses"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ServiceCatalogEndUserAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "catalog-user:*", 
                "s3:GetObject", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:SearchProducts"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:DescribeProvisionedProduct", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ScanProvisionedProducts"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "servicecatalog:userLevel": "self"
                }
            }
        }
    ]
}
Policy Name: AmazonMacieSetupRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetEventSelectors", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:ListTags", 
                "cloudtrail:LookupEvents", 
                "iam:ListAccountAliases", 
                "s3:GetBucket*", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudtrail:CreateTrail", 
                "cloudtrail:StartLogging", 
                "cloudtrail:StopLogging", 
                "cloudtrail:UpdateTrail", 
                "cloudtrail:DeleteTrail", 
                "cloudtrail:PutEventSelectors"
            ], 
            "Resource": "arn:aws:cloudtrail:*:*:trail/AWSMacieTrail-DO-NOT-EDIT", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteBucketPolicy", 
                "s3:DeleteBucketWebsite", 
                "s3:DeleteObject", 
                "s3:DeleteObjectTagging", 
                "s3:DeleteObjectVersion", 
                "s3:DeleteObjectVersionTagging", 
                "s3:DeleteReplicationConfiguration", 
                "s3:PutBucketPolicy"
            ], 
            "Resource": [
                "arn:aws:s3:::awsmacie-*", 
                "arn:aws:s3:::awsmacietrail-*", 
                "arn:aws:s3:::*-awsmacietrail-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonPollyReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "polly:DescribeVoices", 
                "polly:GetLexicon", 
                "polly:ListLexicons", 
                "polly:SynthesizeSpeech"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsWriteOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "mobileanalytics:PutEvents", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2SpotFleetTaggingRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:CreateTags"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterTargets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DataScientist
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:*", 
                "cloudwatch:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackEvents", 
                "datapipeline:Describe*", 
                "datapipeline:ListPipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:QueryObjects", 
                "dynamodb:*", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CancelSpotFleetRequests", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:Describe*", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:ModifySpotFleetRequest", 
                "ec2:RequestSpotInstances", 
                "ec2:RequestSpotFleet", 
                "elasticfilesystem:*", 
                "elasticmapreduce:*", 
                "es:*", 
                "firehose:*", 
                "iam:GetInstanceProfile", 
                "iam:GetRole", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:ListRoles", 
                "kinesis:*", 
                "kms:List*", 
                "lambda:Create*", 
                "lambda:Delete*", 
                "lambda:Get*", 
                "lambda:InvokeFunction", 
                "lambda:PublishVersion", 
                "lambda:Update*", 
                "lambda:List*", 
                "machinelearning:*", 
                "sdb:*", 
                "rds:*", 
                "sns:ListSubscriptions", 
                "sns:ListTopics", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents", 
                "redshift:*", 
                "s3:CreateBucket", 
                "sns:CreateTopic", 
                "sns:Get*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:Abort*", 
                "s3:DeleteObject", 
                "s3:Get*", 
                "s3:List*", 
                "s3:PutAccelerateConfiguration", 
                "s3:PutBucketLogging", 
                "s3:PutBucketNotification", 
                "s3:PutBucketTagging", 
                "s3:PutObject", 
                "s3:Replicate*", 
                "s3:RestoreObject"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:RunInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/DataPipelineDefaultRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole", 
                "arn:aws:iam::*:role/EMR_EC2_DefaultRole", 
                "arn:aws:iam::*:role/EMR_DefaultRole", 
                "arn:aws:iam::*:role/kinesis-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceMeteringFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:MeterUsage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksCMServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteObject", 
                "s3:DeleteBucket", 
                "s3:GetObject", 
                "s3:HeadBucket", 
                "s3:ListBucket", 
                "s3:ListObjects", 
                "s3:PutBucketPolicy"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:DescribeInstanceInformation", 
                "ssm:GetCommandInvocation", 
                "ssm:ListCommandInvocations", 
                "ssm:ListCommands"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:SendCommand"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ssm:resourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
                }
            }
        }, 
        {
            "Action": [
                "ssm:SendCommand"
            ], 
            "Resource": [
                "arn:aws:ssm:*::document/*", 
                "arn:aws:s3:::aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AllocateAddress", 
                "ec2:AssociateAddress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateImage", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeregisterImage", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DisassociateAddress", 
                "ec2:ReleaseAddress", 
                "ec2:RunInstances", 
                "ec2:StopInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
                }
            }
        }, 
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:UpdateStack"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-opsworks-cm-*", 
                "arn:aws:iam::*:role/service-role/aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConnector
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "iam:GetUser", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteObject", 
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:PutObject", 
                "s3:PutObjectAcl", 
                "s3:AbortMultipartUpload", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts"
            ], 
            "Resource": "arn:aws:s3:::import-to-ec2-*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CancelConversionTask", 
                "ec2:CancelExportTask", 
                "ec2:CreateImage", 
                "ec2:CreateInstanceExportTask", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:DeleteTags", 
                "ec2:DeleteVolume", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeRegions", 
                "ec2:DescribeTags", 
                "ec2:DetachVolume", 
                "ec2:ImportInstance", 
                "ec2:ImportVolume", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:ImportImage", 
                "ec2:DescribeImportImageTasks", 
                "ec2:DeregisterImage", 
                "ec2:DescribeSnapshots", 
                "ec2:DeleteSnapshot", 
                "ec2:CancelImportTask", 
                "ec2:ImportSnapshot", 
                "ec2:DescribeImportSnapshotTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "SNS:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSBatchFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "batch:*", 
                "cloudwatch:GetMetricStatistics", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeKeyPairs", 
                "ecs:DescribeClusters", 
                "ecs:Describe*", 
                "ecs:List*", 
                "logs:Describe*", 
                "logs:Get*", 
                "logs:TestMetricFilter", 
                "logs:FilterLogEvents", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/AWSBatchServiceRole", 
                "arn:aws:iam::*:role/service-role/AWSBatchServiceRole", 
                "arn:aws:iam::*:role/ecsInstanceRole", 
                "arn:aws:iam::*:role/iaws-ec2-spot-fleet-role", 
                "arn:aws:iam::*:role/aws-ec2-spot-fleet-role", 
                "arn:aws:iam::*:role/AWSBatchJobRole*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonECS_FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget", 
                "autoscaling:UpdateAutoScalingGroup", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:CreateLaunchConfiguration", 
                "autoscaling:DeleteAutoScalingGroup", 
                "autoscaling:DeleteLaunchConfiguration", 
                "autoscaling:Describe*", 
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStack*", 
                "cloudformation:UpdateStack", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm", 
                "ec2:AssociateRouteTable", 
                "ec2:AttachInternetGateway", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CancelSpotFleetRequests", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateVpc", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteVpc", 
                "ec2:Describe*", 
                "ec2:DetachInternetGateway", 
                "ec2:DisassociateRouteTable", 
                "ec2:ModifySubnetAttribute", 
                "ec2:ModifyVpcAttribute", 
                "ec2:RequestSpotFleet", 
                "elasticloadbalancing:CreateListener", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:CreateRule", 
                "elasticloadbalancing:CreateTargetGroup", 
                "elasticloadbalancing:DeleteListener", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:DeleteRule", 
                "elasticloadbalancing:DeleteTargetGroup", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeRules", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "ecs:*", 
                "events:DescribeRule", 
                "events:DeleteRule", 
                "events:ListRuleNamesByTarget", 
                "events:ListTargetsByRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "logs:CreateLogGroup", 
                "logs:DescribeLogGroups", 
                "logs:FilterLogEvents", 
                "route53:GetHostedZone", 
                "route53:ListHostedZonesByName", 
                "route53:CreateHostedZone", 
                "route53:DeleteHostedZone", 
                "route53:GetHealthCheck", 
                "servicediscovery:CreatePrivateDnsNamespace", 
                "servicediscovery:CreateService", 
                "servicediscovery:GetNamespace", 
                "servicediscovery:GetOperation", 
                "servicediscovery:GetService", 
                "servicediscovery:ListNamespaces", 
                "servicediscovery:ListServices", 
                "servicediscovery:UpdateService"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:GetParametersByPath", 
                "ssm:GetParameters", 
                "ssm:GetParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/aws/service/ecs*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-name": "EC2ContainerService-*"
                }
            }
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "ecs-tasks.amazonaws.com"
                }
            }
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/ecsInstanceRole*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/ecsAutoscaleRole*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "application-autoscaling.amazonaws.com", 
                        "application-autoscaling.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "ecs.amazonaws.com", 
                        "spot.amazonaws.com", 
                        "spotfleet.amazonaws.com", 
                        "ecs.application-autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: ServiceCatalogAdminReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "catalog-admin:DescribeConstraints", 
                "catalog-admin:DescribeListingForProduct", 
                "catalog-admin:DescribeListings", 
                "catalog-admin:DescribePortfolios", 
                "catalog-admin:DescribeProductVersions", 
                "catalog-admin:GetPortfolioCount", 
                "catalog-admin:GetPortfolios", 
                "catalog-admin:GetProductCounts", 
                "catalog-admin:ListAllPortfolioConstraints", 
                "catalog-admin:ListPortfolioConstraints", 
                "catalog-admin:ListPortfolios", 
                "catalog-admin:ListPrincipalConstraints", 
                "catalog-admin:ListProductConstraints", 
                "catalog-admin:ListResourceUsers", 
                "catalog-admin:ListTagsForResource", 
                "catalog-admin:SearchListings", 
                "catalog-user:*", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplateSummary", 
                "iam:GetGroup", 
                "iam:GetRole", 
                "iam:GetUser", 
                "iam:ListGroups", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "s3:GetObject", 
                "servicecatalog:DescribeTagOption", 
                "servicecatalog:GetTagOptionMigrationStatus", 
                "servicecatalog:ListResourcesForTagOption", 
                "servicecatalog:ListTagOptions", 
                "servicecatalog:AccountLevelDescribeRecord", 
                "servicecatalog:AccountLevelListRecordHistory", 
                "servicecatalog:AccountLevelScanProvisionedProducts", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:DescribeProvisionedProduct", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:ScanProvisionedProducts", 
                "servicecatalog:SearchProducts", 
                "servicecatalog:DescribeConstraint", 
                "servicecatalog:DescribeProductAsAdmin", 
                "servicecatalog:DescribePortfolio", 
                "servicecatalog:DescribeProvisioningArtifact", 
                "servicecatalog:ListAcceptedPortfolioShares", 
                "servicecatalog:ListConstraintsForPortfolio", 
                "servicecatalog:ListPortfolioAccess", 
                "servicecatalog:ListPortfolios", 
                "servicecatalog:ListPortfoliosForProduct", 
                "servicecatalog:ListPrincipalsForPortfolio", 
                "servicecatalog:ListProvisioningArtifacts", 
                "servicecatalog:SearchProductsAsAdmin"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingRDSClusterPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:AddTagsToResource", 
                "rds:CreateDBInstance", 
                "rds:DeleteDBInstance", 
                "rds:DescribeDBClusters", 
                "rds:DescribeDBInstances", 
                "rds:ModifyDBCluster", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSServiceRoleForEC2ScheduledInstances
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringEquals": {
                    "aws:TagKeys": [
                        "aws:ec2sri:scheduledInstanceId"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:ec2sri:scheduledInstanceId": "*"
                }
            }
        }
    ]
}
Policy Name: AWSCodeDeployRoleForLambda
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "lambda:UpdateAlias", 
                "lambda:GetAlias", 
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectVersion"
            ], 
            "Resource": "arn:aws:s3:::*/CodeDeploy/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectVersion"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "s3:ExistingObjectTag/UseWithCodeDeploy": "true"
                }
            }
        }, 
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": "arn:aws:lambda:*:*:function:CodeDeployHook_*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData", 
                "ds:CreateComputer", 
                "ds:DescribeDirectories", 
                "ec2:DescribeInstanceStatus", 
                "logs:*", 
                "ssm:*", 
                "ec2messages:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeCommitReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codecommit:BatchGet*", 
                "codecommit:Get*", 
                "codecommit:Describe*", 
                "codecommit:List*", 
                "codecommit:GitPull"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "events:DescribeRule", 
                "events:ListTargetsByRule"
            ], 
            "Resource": "arn:aws:events:*:*:rule/codecommit*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsCodeCommitRulesReadOnlyAccess"
        }, 
        {
            "Action": [
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSSubscriptionAccess"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "LambdaReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListAccessKeys", 
                "iam:ListSSHPublicKeys", 
                "iam:ListServiceSpecificCredentials", 
                "iam:ListAccessKeys", 
                "iam:GetSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyConsoleAccess"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "autoscaling:UpdateAutoScalingGroup", 
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStack*", 
                "cloudformation:UpdateStack", 
                "cloudwatch:GetMetricStatistics", 
                "ec2:Describe*", 
                "elasticloadbalancing:*", 
                "ecs:*", 
                "events:DescribeRule", 
                "events:DeleteRule", 
                "events:ListRuleNamesByTarget", 
                "events:ListTargetsByRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonFreeRTOSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "freertos:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCognitoReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-identity:Describe*", 
                "cognito-identity:Get*", 
                "cognito-identity:List*", 
                "cognito-idp:Describe*", 
                "cognito-idp:AdminGetUser", 
                "cognito-idp:List*", 
                "cognito-sync:Describe*", 
                "cognito-sync:Get*", 
                "cognito-sync:List*", 
                "iam:ListOpenIdConnectProviders", 
                "iam:ListRoles", 
                "sns:ListPlatformApplications"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDMSCloudWatchLogsRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:DescribeLogGroups"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDescribeOnAllLogGroups"
        }, 
        {
            "Action": [
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDescribeOfAllLogStreamsOnDmsTasksLogGroup"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCreationOfDmsTasksLogGroups"
        }, 
        {
            "Action": [
                "logs:CreateLogStream"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCreationOfDmsTaskLogStream"
        }, 
        {
            "Action": [
                "logs:PutLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowUploadOfLogEventsToDmsTaskLogStream"
        }
    ]
}
Policy Name: AWSApplicationDiscoveryServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:*", 
                "discovery:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53AutoNamingReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "servicediscovery:Get*", 
                "servicediscovery:List*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonVPCFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AcceptVpcPeeringConnection", 
                "ec2:AcceptVpcEndpointConnections", 
                "ec2:AllocateAddress", 
                "ec2:AssignIpv6Addresses", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssociateAddress", 
                "ec2:AssociateDhcpOptions", 
                "ec2:AssociateRouteTable", 
                "ec2:AssociateSubnetCidrBlock", 
                "ec2:AssociateVpcCidrBlock", 
                "ec2:AttachClassicLinkVpc", 
                "ec2:AttachInternetGateway", 
                "ec2:AttachNetworkInterface", 
                "ec2:AttachVpnGateway", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateCustomerGateway", 
                "ec2:CreateDefaultSubnet", 
                "ec2:CreateDefaultVpc", 
                "ec2:CreateDhcpOptions", 
                "ec2:CreateEgressOnlyInternetGateway", 
                "ec2:CreateFlowLogs", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateNatGateway", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAclEntry", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:CreateVpcEndpoint", 
                "ec2:CreateVpcEndpointConnectionNotification", 
                "ec2:CreateVpcEndpointServiceConfiguration", 
                "ec2:CreateVpcPeeringConnection", 
                "ec2:CreateVpnConnection", 
                "ec2:CreateVpnConnectionRoute", 
                "ec2:CreateVpnGateway", 
                "ec2:DeleteCustomerGateway", 
                "ec2:DeleteDhcpOptions", 
                "ec2:DeleteEgressOnlyInternetGateway", 
                "ec2:DeleteFlowLogs", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteNatGateway", 
                "ec2:DeleteNetworkAcl", 
                "ec2:DeleteNetworkAclEntry", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteTags", 
                "ec2:DeleteVpc", 
                "ec2:DeleteVpcEndpoints", 
                "ec2:DeleteVpcEndpointConnectionNotifications", 
                "ec2:DeleteVpcEndpointServiceConfigurations", 
                "ec2:DeleteVpcPeeringConnection", 
                "ec2:DeleteVpnConnection", 
                "ec2:DeleteVpnConnectionRoute", 
                "ec2:DeleteVpnGateway", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeEgressOnlyInternetGateways", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroupReferences", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeStaleSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeVpcClassicLinkDnsSupport", 
                "ec2:DescribeVpcEndpointConnectionNotifications", 
                "ec2:DescribeVpcEndpointConnections", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointServiceConfigurations", 
                "ec2:DescribeVpcEndpointServicePermissions", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:DetachInternetGateway", 
                "ec2:DetachNetworkInterface", 
                "ec2:DetachVpnGateway", 
                "ec2:DisableVgwRoutePropagation", 
                "ec2:DisableVpcClassicLink", 
                "ec2:DisableVpcClassicLinkDnsSupport", 
                "ec2:DisassociateAddress", 
                "ec2:DisassociateRouteTable", 
                "ec2:DisassociateSubnetCidrBlock", 
                "ec2:DisassociateVpcCidrBlock", 
                "ec2:EnableVgwRoutePropagation", 
                "ec2:EnableVpcClassicLink", 
                "ec2:EnableVpcClassicLinkDnsSupport", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:ModifySubnetAttribute", 
                "ec2:ModifyVpcAttribute", 
                "ec2:ModifyVpcEndpoint", 
                "ec2:ModifyVpcEndpointConnectionNotification", 
                "ec2:ModifyVpcEndpointServiceConfiguration", 
                "ec2:ModifyVpcEndpointServicePermissions", 
                "ec2:ModifyVpcPeeringConnectionOptions", 
                "ec2:ModifyVpcTenancy", 
                "ec2:MoveAddressToVpc", 
                "ec2:RejectVpcEndpointConnections", 
                "ec2:RejectVpcPeeringConnection", 
                "ec2:ReleaseAddress", 
                "ec2:ReplaceNetworkAclAssociation", 
                "ec2:ReplaceNetworkAclEntry", 
                "ec2:ReplaceRoute", 
                "ec2:ReplaceRouteTableAssociation", 
                "ec2:ResetNetworkInterfaceAttribute", 
                "ec2:RestoreAddressToClassic", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:UnassignIpv6Addresses", 
                "ec2:UnassignPrivateIpAddresses", 
                "ec2:UpdateSecurityGroupRuleDescriptionsEgress", 
                "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appsync:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "appsync.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AWSEC2FleetServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:RunInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*", 
                "arn:aws:ec2:*:*:spot-instances-request/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:ec2:fleet-id": "*"
                }
            }
        }
    ]
}
Policy Name: AmazonRoute53AutoNamingFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:GetHostedZone", 
                "route53:ListHostedZonesByName", 
                "route53:CreateHostedZone", 
                "route53:DeleteHostedZone", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateHealthCheck", 
                "route53:GetHealthCheck", 
                "route53:DeleteHealthCheck", 
                "route53:UpdateHealthCheck", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeRegions", 
                "servicediscovery:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSImportExportFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "importexport:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DynamoDBReplicationServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:GetItem", 
                "dynamodb:PutItem", 
                "dynamodb:UpdateItem", 
                "dynamodb:DeleteItem", 
                "dynamodb:DescribeTable", 
                "dynamodb:Scan", 
                "dynamodb:DescribeStream", 
                "dynamodb:GetRecords", 
                "dynamodb:GetShardIterator", 
                "dynamodb:DescribeTimeToLive", 
                "application-autoscaling:DescribeScalableTargets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mechanicalturk:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerRegistryPowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:GetRepositoryPolicy", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecr:DescribeImages", 
                "ecr:BatchGetImage", 
                "ecr:InitiateLayerUpload", 
                "ecr:UploadLayerPart", 
                "ecr:CompleteLayerUpload", 
                "ecr:PutImage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningCreateOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:Add*", 
                "machinelearning:Create*", 
                "machinelearning:Delete*", 
                "machinelearning:Describe*", 
                "machinelearning:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisVideoStreamsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesisvideo:Describe*", 
                "kinesisvideo:Get*", 
                "kinesisvideo:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudTrailReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetBucketLocation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:LookupEvents", 
                "cloudtrail:ListTags", 
                "cloudtrail:ListPublicKeys", 
                "cloudtrail:GetEventSelectors", 
                "s3:ListAllMyBuckets", 
                "kms:ListAliases", 
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaExecute
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:*"
            ], 
            "Resource": "arn:aws:logs:*:*:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject"
            ], 
            "Resource": "arn:aws:s3:::*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTRuleActions
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "dynamodb:PutItem", 
            "kinesis:PutRecord", 
            "iot:Publish", 
            "s3:PutObject", 
            "sns:Publish", 
            "sqs:SendMessage*", 
            "cloudwatch:SetAlarmState", 
            "cloudwatch:PutMetricData", 
            "es:ESHttpPut", 
            "firehose:PutRecord"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AWSQuickSightDescribeRedshift
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "redshift:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticsearchServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "Stmt1480452973134"
        }
    ]
}
Policy Name: AmazonMQReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mq:Describe*", 
                "mq:List*", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: VMImportExportRoleForAWSConnector
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::import-to-ec2-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:ModifySnapshotAttribute", 
                "ec2:CopySnapshot", 
                "ec2:RegisterImage", 
                "ec2:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineCustomActionAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:AcknowledgeJob", 
                "codepipeline:GetJobDetails", 
                "codepipeline:PollForJobs", 
                "codepipeline:PutJobFailureResult", 
                "codepipeline:PutJobSuccessResult"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9ServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:RunInstances", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeInstances", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStacks", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStackResources"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances", 
                "ec2:DeleteSecurityGroup", 
                "ec2:AuthorizeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:DeleteStack"
            ], 
            "Resource": "arn:aws:cloudformation:*:*:stack/aws-cloud9-*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": "arn:aws:ec2:*:*:instance/*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "aws:RequestTag/Name": "aws-cloud9-*"
                }
            }
        }, 
        {
            "Action": [
                "ec2:StartInstances", 
                "ec2:StopInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-cloud9-*"
                }
            }
        }
    ]
}
Policy Name: AWSApplicationAutoscalingECSServicePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:DescribeServices", 
                "ecs:UpdateService", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksInstanceRegistration
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "opsworks:DescribeStackProvisioningParameters", 
                "opsworks:DescribeStacks", 
                "opsworks:RegisterInstance"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCloudDirectoryFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "clouddirectory:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonECSTaskExecutionRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:BatchGetImage", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStorageGatewayFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "storagegateway:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeSnapshots", 
                "ec2:DeleteSnapshot"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonLexReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lex:GetBot", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases", 
                "lex:GetBots", 
                "lex:GetBotChannelAssociation", 
                "lex:GetBotChannelAssociations", 
                "lex:GetBotVersions", 
                "lex:GetBuiltinIntent", 
                "lex:GetBuiltinIntents", 
                "lex:GetBuiltinSlotTypes", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:GetIntentVersions", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:GetSlotTypeVersions", 
                "lex:GetUtterancesView"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonChimeUserManagement
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "chime:ListAccounts", 
                "chime:GetAccount", 
                "chime:GetAccountSettings", 
                "chime:UpdateAccountSettings", 
                "chime:ListUsers", 
                "chime:GetUser", 
                "chime:GetUserByEmail", 
                "chime:InviteUsers", 
                "chime:SuspendUsers", 
                "chime:ActivateUsers", 
                "chime:UpdateUserLicenses", 
                "chime:ResetPersonalPIN", 
                "chime:LogoutUser", 
                "chime:ListDomains", 
                "chime:GetDomain", 
                "chime:ListDirectories", 
                "chime:ListGroups", 
                "chime:SubmitSupportRequest", 
                "chime:ListDelegates", 
                "chime:ListAccountUsageReportData", 
                "chime:GetMeetingDetail", 
                "chime:ListMeetingEvents", 
                "chime:ListMeetingsReportData", 
                "chime:GetUserActivityReportData"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elastictranscoder:Read*", 
                "elastictranscoder:List*", 
                "s3:List*", 
                "iam:List*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSTrustedAdvisorServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:DescribeAccountLimits", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLaunchConfigurations", 
                "cloudformation:DescribeAccountLimits", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListStacks", 
                "cloudfront:ListDistributions", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "dynamodb:DescribeTable", 
                "dynamodb:ListTables", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeReservedInstances", 
                "ec2:DescribeInstances", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeImages", 
                "ec2:DescribeVolumes", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeReservedInstancesOfferings", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancerAttributes", 
                "elasticloadbalancing:DescribeLoadBalancerPolicies", 
                "elasticloadbalancing:DescribeLoadBalancerPolicyTypes", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "iam:GenerateCredentialReport", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetCredentialReport", 
                "iam:GetServerCertificate", 
                "iam:ListServerCertificates", 
                "kinesis:DescribeLimits", 
                "rds:DescribeAccountAttributes", 
                "rds:DescribeDBClusters", 
                "rds:DescribeDBEngineVersions", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBParameterGroups", 
                "rds:DescribeDBParameters", 
                "rds:DescribeDBSecurityGroups", 
                "rds:DescribeDBSnapshots", 
                "rds:DescribeDBSubnetGroups", 
                "rds:DescribeEngineDefaultParameters", 
                "rds:DescribeEvents", 
                "rds:DescribeOptionGroupOptions", 
                "rds:DescribeOptionGroups", 
                "rds:DescribeOrderableDBInstanceOptions", 
                "rds:DescribeReservedDBInstances", 
                "rds:DescribeReservedDBInstancesOfferings", 
                "rds:ListTagsForResource", 
                "redshift:DescribeClusters", 
                "redshift:DescribeReservedNodeOfferings", 
                "redshift:DescribeReservedNodes", 
                "route53:GetHealthCheck", 
                "route53:GetHostedZone", 
                "route53:ListHealthChecks", 
                "route53:ListHostedZones", 
                "route53:ListHostedZonesByName", 
                "route53:ListResourceRecordSets", 
                "s3:GetBucketAcl", 
                "s3:GetBucketPolicy", 
                "s3:GetBucketLocation", 
                "s3:GetBucketLogging", 
                "s3:GetBucketVersioning", 
                "s3:ListBucket", 
                "s3:ListObjects", 
                "s3:ListAllMyBuckets", 
                "ses:GetSendQuota", 
                "sqs:ListQueues", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTConfigReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:DescribeAuthorizer", 
                "iot:DescribeCACertificate", 
                "iot:DescribeCertificate", 
                "iot:DescribeCertificateTag", 
                "iot:DescribeDefaultAuthorizer", 
                "iot:DescribeEndpoint", 
                "iot:DescribeEventConfigurations", 
                "iot:DescribeIndex", 
                "iot:DescribeJob", 
                "iot:DescribeJobExecution", 
                "iot:DescribeRoleAlias", 
                "iot:DescribeStream", 
                "iot:DescribeThing", 
                "iot:DescribeThingGroup", 
                "iot:DescribeThingRegistrationTask", 
                "iot:DescribeThingType", 
                "iot:GetEffectivePolicies", 
                "iot:GetIndexingConfiguration", 
                "iot:GetJobDocument", 
                "iot:GetLoggingOptions", 
                "iot:GetOTAUpdate", 
                "iot:GetPolicy", 
                "iot:GetPolicyVersion", 
                "iot:GetRegistrationCode", 
                "iot:GetTopicRule", 
                "iot:GetV2LoggingOptions", 
                "iot:ListAttachedPolicies", 
                "iot:ListAuthorizers", 
                "iot:ListCACertificates", 
                "iot:ListCertificates", 
                "iot:ListCertificatesByCA", 
                "iot:ListIndices", 
                "iot:ListJobExecutionsForJob", 
                "iot:ListJobExecutionsForThing", 
                "iot:ListJobs", 
                "iot:ListOTAUpdates", 
                "iot:ListOutgoingCertificates", 
                "iot:ListPolicies", 
                "iot:ListPolicyPrincipals", 
                "iot:ListPolicyVersions", 
                "iot:ListPrincipalPolicies", 
                "iot:ListPrincipalThings", 
                "iot:ListRoleAliases", 
                "iot:ListStreams", 
                "iot:ListTargetsForPolicy", 
                "iot:ListThingGroups", 
                "iot:ListThingGroupsForThing", 
                "iot:ListThingPrincipals", 
                "iot:ListThingRegistrationTaskReports", 
                "iot:ListThingRegistrationTasks", 
                "iot:ListThings", 
                "iot:ListThingsInThingGroup", 
                "iot:ListThingTypes", 
                "iot:ListTopicRules", 
                "iot:ListV2LoggingLevels", 
                "iot:SearchIndex", 
                "iot:TestAuthorization", 
                "iot:TestInvokeAuthorizer"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonWorkMailReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ses:Describe*", 
                "ses:Get*", 
                "workmail:Describe*", 
                "workmail:Get*", 
                "workmail:List*", 
                "workmail:Search*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDMSVPCManagementRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaKinesisExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesis:DescribeStream", 
                "kinesis:GetRecords", 
                "kinesis:GetShardIterator", 
                "kinesis:ListStreams", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ResourceGroupsandTagEditorReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "tag:getResources", 
                "tag:getTagKeys", 
                "tag:getTagValues"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRekognitionServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:AmazonRekognition*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesis:PutRecord", 
                "kinesis:PutRecords"
            ], 
            "Resource": "arn:aws:kinesis:*:*:stream/AmazonRekognition*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesisvideo:GetDataEndpoint", 
                "kinesisvideo:GetMedia"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMAutomationRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:Automation*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateImage", 
                "ec2:CopyImage", 
                "ec2:DeregisterImage", 
                "ec2:DescribeImages", 
                "ec2:DeleteSnapshot", 
                "ec2:StartInstances", 
                "ec2:RunInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:DescribeTags", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:UpdateStack", 
                "cloudformation:DeleteStack"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": [
                "arn:aws:sns:*:*:Automation*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudHSMServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ComprehendReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "comprehend:DetectDominantLanguage", 
                "comprehend:BatchDetectDominantLanguage", 
                "comprehend:DetectEntities", 
                "comprehend:BatchDetectEntities", 
                "comprehend:DetectKeyPhrases", 
                "comprehend:BatchDetectKeyPhrases", 
                "comprehend:DetectSentiment", 
                "comprehend:BatchDetectSentiment", 
                "comprehend:DescribeTopicsDetectionJob", 
                "comprehend:ListTopicsDetectionJobs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStepFunctionsConsoleFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "states:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:ListRoles", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/service-role/StatesExecutionRole*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "lambda:ListFunctions", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSQuickSightIoTAnalyticsAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iotanalytics:ListDatasets", 
                "iotanalytics:DescribeDataset", 
                "iotanalytics:GetDatasetContent"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeBuildReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codebuild:BatchGet*", 
                "codebuild:Get*", 
                "codebuild:List*", 
                "codecommit:GetBranch", 
                "codecommit:GetCommit", 
                "codecommit:GetRepository"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: LexBotPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "polly:SynthesizeSpeech"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMacieFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "macie:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningManageRealTimeEndpointOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:CreateRealtimeEndpoint", 
                "machinelearning:DeleteRealtimeEndpoint"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsInvocationAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesis:PutRecord"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsInvocationAccess"
        }
    ]
}
Policy Name: CloudFrontReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:ListCertificates", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "iam:ListServerCertificates", 
                "route53:List*", 
                "waf:ListWebACLs", 
                "waf:GetWebACL"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDeepLensServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:CreateThing", 
                "iot:DeleteThing", 
                "iot:DeleteThingShadow", 
                "iot:DescribeThing", 
                "iot:GetThingShadow", 
                "iot:UpdateThing", 
                "iot:UpdateThingShadow"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTThingAccess"
        }, 
        {
            "Action": [
                "iot:AttachThingPrincipal", 
                "iot:DetachThingPrincipal"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*", 
                "arn:aws:iot:*:*:cert/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTCertificateAccess"
        }, 
        {
            "Action": [
                "iot:CreateKeysAndCertificate", 
                "iot:CreatePolicy", 
                "iot:CreatePolicyVersion"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTCreateCertificateAndPolicyAccess"
        }, 
        {
            "Action": [
                "iot:AttachPrincipalPolicy"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:policy/deeplens*", 
                "arn:aws:iot:*:*:cert/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTAttachCertificatePolicyAccess"
        }, 
        {
            "Action": [
                "iot:GetThingShadow", 
                "iot:UpdateThingShadow"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTDataAccess"
        }, 
        {
            "Action": [
                "iot:DescribeEndpoint"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTEndpointAccess"
        }, 
        {
            "Action": [
                "deeplens:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAccess"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::deeplens*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensS3ObjectAccess"
        }, 
        {
            "Action": [
                "s3:DeleteBucket", 
                "s3:ListBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensS3Buckets"
        }, 
        {
            "Action": [
                "s3:CreateBucket"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensCreateS3Buckets"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "greengrass.amazonaws.com", 
                        "sagemaker.amazonaws.com"
                    ]
                }
            }, 
            "Sid": "DeepLensIAMPassRoleAccess"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/AWSDeepLens*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEqualsIfExists": {
                    "iam:PassedToService": "lambda.amazonaws.com"
                }
            }, 
            "Sid": "DeepLensIAMLambdaPassRoleAccess"
        }, 
        {
            "Action": [
                "greengrass:AssociateRoleToGroup", 
                "greengrass:AssociateServiceRoleToAccount", 
                "greengrass:CreateResourceDefinition", 
                "greengrass:CreateResourceDefinitionVersion", 
                "greengrass:CreateCoreDefinition", 
                "greengrass:CreateCoreDefinitionVersion", 
                "greengrass:CreateDeployment", 
                "greengrass:CreateFunctionDefinition", 
                "greengrass:CreateFunctionDefinitionVersion", 
                "greengrass:CreateGroup", 
                "greengrass:CreateGroupCertificateAuthority", 
                "greengrass:CreateGroupVersion", 
                "greengrass:CreateLoggerDefinition", 
                "greengrass:CreateLoggerDefinitionVersion", 
                "greengrass:CreateSubscriptionDefinition", 
                "greengrass:CreateSubscriptionDefinitionVersion", 
                "greengrass:DeleteCoreDefinition", 
                "greengrass:DeleteFunctionDefinition", 
                "greengrass:DeleteGroup", 
                "greengrass:DeleteLoggerDefinition", 
                "greengrass:DeleteSubscriptionDefinition", 
                "greengrass:DisassociateRoleFromGroup", 
                "greengrass:DisassociateServiceRoleFromAccount", 
                "greengrass:GetAssociatedRole", 
                "greengrass:GetConnectivityInfo", 
                "greengrass:GetCoreDefinition", 
                "greengrass:GetCoreDefinitionVersion", 
                "greengrass:GetDeploymentStatus", 
                "greengrass:GetDeviceDefinition", 
                "greengrass:GetDeviceDefinitionVersion", 
                "greengrass:GetFunctionDefinition", 
                "greengrass:GetFunctionDefinitionVersion", 
                "greengrass:GetGroup", 
                "greengrass:GetGroupCertificateAuthority", 
                "greengrass:GetGroupCertificateConfiguration", 
                "greengrass:GetGroupVersion", 
                "greengrass:GetLoggerDefinition", 
                "greengrass:GetLoggerDefinitionVersion", 
                "greengrass:GetServiceRoleForAccount", 
                "greengrass:GetSubscriptionDefinition", 
                "greengrass:GetSubscriptionDefinitionVersion", 
                "greengrass:ListCoreDefinitionVersions", 
                "greengrass:ListCoreDefinitions", 
                "greengrass:ListDeployments", 
                "greengrass:ListDeviceDefinitionVersions", 
                "greengrass:ListDeviceDefinitions", 
                "greengrass:ListFunctionDefinitionVersions", 
                "greengrass:ListFunctionDefinitions", 
                "greengrass:ListGroupCertificateAuthorities", 
                "greengrass:ListGroupVersions", 
                "greengrass:ListGroups", 
                "greengrass:ListLoggerDefinitionVersions", 
                "greengrass:ListLoggerDefinitions", 
                "greengrass:ListSubscriptionDefinitionVersions", 
                "greengrass:ListSubscriptionDefinitions", 
                "greengrass:ResetDeployments", 
                "greengrass:UpdateConnectivityInfo", 
                "greengrass:UpdateCoreDefinition", 
                "greengrass:UpdateDeviceDefinition", 
                "greengrass:UpdateFunctionDefinition", 
                "greengrass:UpdateGroup", 
                "greengrass:UpdateGroupCertificateConfiguration", 
                "greengrass:UpdateLoggerDefinition", 
                "greengrass:UpdateSubscriptionDefinition"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensGreenGrassAccess"
        }, 
        {
            "Action": [
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:GetFunction", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListFunctions", 
                "lambda:ListVersionsByFunction", 
                "lambda:PublishVersion", 
                "lambda:UpdateFunctionCode", 
                "lambda:UpdateFunctionConfiguration"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensLambdaAdminFunctionAccess"
        }, 
        {
            "Action": [
                "sagemaker:CreateTrainingJob", 
                "sagemaker:DescribeTrainingJob", 
                "sagemaker:StopTrainingJob"
            ], 
            "Resource": [
                "arn:aws:sagemaker:*:*:training-job/deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensSageMakerAccess"
        }, 
        {
            "Action": [
                "acuity:CreateStream", 
                "acuity:DescribeStream", 
                "acuity:DeleteStream"
            ], 
            "Resource": [
                "arn:aws:acuity:*:*:stream/deeplens*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityStreamAccess"
        }, 
        {
            "Action": [
                "acuity:GetDataEndpoint"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityEndpointAccess"
        }
    ]
}
Policy Name: AmazonSNSRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:PutMetricFilter", 
                "logs:PutRetentionPolicy"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonInspectorServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeInstances", 
                "ec2:DescribeTags", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeLoadBalancerAttributes", 
                "elasticloadbalancing:DescribeRules", 
                "elasticloadbalancing:DescribeTags", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsFinancialReportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mobileanalytics:GetReports", 
                "mobileanalytics:GetFinancialReports"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkService
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:*"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awseb-*", 
                "arn:aws:cloudformation:*:*:stack/eb-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCloudformationOperationsOnElasticBeanstalkStacks"
        }, 
        {
            "Action": [
                "logs:DeleteLogGroup"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDeleteCloudwatchLogGroups"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowS3OperationsOnElasticBeanstalkBuckets"
        }, 
        {
            "Action": [
                "autoscaling:AttachInstances", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:CreateLaunchConfiguration", 
                "autoscaling:DeleteLaunchConfiguration", 
                "autoscaling:DeleteAutoScalingGroup", 
                "autoscaling:DeleteScheduledAction", 
                "autoscaling:DescribeAccountLimits", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:DescribeLaunchConfigurations", 
                "autoscaling:DescribeLoadBalancers", 
                "autoscaling:DescribeNotificationConfigurations", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:DescribeScheduledActions", 
                "autoscaling:DetachInstances", 
                "autoscaling:PutScheduledUpdateGroupAction", 
                "autoscaling:ResumeProcesses", 
                "autoscaling:SetDesiredCapacity", 
                "autoscaling:SuspendProcesses", 
                "autoscaling:TerminateInstanceInAutoScalingGroup", 
                "autoscaling:UpdateAutoScalingGroup", 
                "cloudwatch:PutMetricAlarm", 
                "ec2:AssociateAddress", 
                "ec2:AllocateAddress", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DisassociateAddress", 
                "ec2:ReleaseAddress", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:TerminateInstances", 
                "ecs:CreateCluster", 
                "ecs:DeleteCluster", 
                "ecs:DescribeClusters", 
                "ecs:RegisterTaskDefinition", 
                "elasticbeanstalk:*", 
                "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer", 
                "elasticloadbalancing:ConfigureHealthCheck", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:RegisterTargets", 
                "elasticloadbalancing:DeregisterTargets", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "logs:CreateLogGroup", 
                "logs:PutRetentionPolicy", 
                "rds:DescribeDBEngineVersions", 
                "rds:DescribeDBInstances", 
                "rds:DescribeOrderableDBInstanceOptions", 
                "s3:CopyObject", 
                "s3:GetObject", 
                "s3:GetObjectAcl", 
                "s3:GetObjectMetadata", 
                "s3:ListBucket", 
                "s3:listBuckets", 
                "s3:ListObjects", 
                "sns:CreateTopic", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptionsByTopic", 
                "sns:Subscribe", 
                "sns:SetTopicAttributes", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "codebuild:CreateProject", 
                "codebuild:DeleteProject", 
                "codebuild:BatchGetBuilds", 
                "codebuild:StartBuild"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowOperations"
        }
    ]
}
Policy Name: IAMReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:Get*", 
                "iam:List*", 
                "iam:SimulateCustomPolicy", 
                "iam:SimulatePrincipalPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRDSReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:Describe*", 
                "rds:ListTagsForResource", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCognitoPowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-identity:*", 
                "cognito-idp:*", 
                "cognito-sync:*", 
                "iam:ListRoles", 
                "iam:ListOpenIdConnectProviders", 
                "sns:ListPlatformApplications"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53AutoNamingRegistrantAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:GetHostedZone", 
                "route53:ListHostedZonesByName", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateHealthCheck", 
                "route53:GetHealthCheck", 
                "route53:DeleteHealthCheck", 
                "route53:UpdateHealthCheck", 
                "servicediscovery:Get*", 
                "servicediscovery:List*", 
                "servicediscovery:RegisterInstance", 
                "servicediscovery:DeregisterInstance"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticFileSystemFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "elasticfilesystem:*", 
                "kms:DescribeKey", 
                "kms:ListAliases"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: LexChannelPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lex:PostText"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ServerMigrationConnector
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "iam:GetUser", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sms:SendMessage", 
                "sms:GetMessages"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteObject", 
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:PutObject", 
                "s3:PutObjectAcl", 
                "s3:PutLifecycleConfiguration", 
                "s3:AbortMultipartUpload", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts"
            ], 
            "Resource": [
                "arn:aws:s3:::sms-b-*", 
                "arn:aws:s3:::import-to-ec2-*", 
                "arn:aws:s3:::server-migration-service-upgrade", 
                "arn:aws:s3:::server-migration-service-upgrade/*", 
                "arn:aws:s3:::connector-platform-upgrade-info/*", 
                "arn:aws:s3:::connector-platform-upgrade-info", 
                "arn:aws:s3:::connector-platform-upgrade-bundles/*", 
                "arn:aws:s3:::connector-platform-upgrade-bundles", 
                "arn:aws:s3:::connector-platform-release-notes/*", 
                "arn:aws:s3:::connector-platform-release-notes"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "awsconnector:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "SNS:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonESCognitoAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-idp:DescribeUserPool", 
                "cognito-idp:CreateUserPoolClient", 
                "cognito-idp:DeleteUserPoolClient", 
                "cognito-idp:DescribeUserPoolClient", 
                "cognito-idp:AdminInitiateAuth", 
                "cognito-idp:AdminUserGlobalSignOut", 
                "cognito-idp:ListUserPoolClients", 
                "cognito-identity:DescribeIdentityPool", 
                "cognito-identity:UpdateIdentityPool", 
                "cognito-identity:SetIdentityPoolRoles", 
                "cognito-identity:GetIdentityPoolRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "cognito-identity.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonChimeReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "chime:ListAccounts", 
                "chime:GetAccount", 
                "chime:GetAccountSettings", 
                "chime:ListUsers", 
                "chime:GetUser", 
                "chime:GetUserByEmail", 
                "chime:ListDomains", 
                "chime:GetDomain", 
                "chime:ListGroups", 
                "chime:ListDirectories", 
                "chime:ListCDRBucket", 
                "chime:GetCDRBucket", 
                "chime:ListDelegates", 
                "chime:GetAccountResource", 
                "chime:ValidateDelegate", 
                "chime:ListAccountUsageReportData", 
                "chime:GetUserActivityReportData"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonZocaloFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "zocalo:*", 
                "ds:*", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeChangeSet", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStackResources", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:GetCognitoEvents", 
                "dynamodb:BatchGetItem", 
                "dynamodb:DescribeStream", 
                "dynamodb:DescribeTable", 
                "dynamodb:GetItem", 
                "dynamodb:ListStreams", 
                "dynamodb:ListTables", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "events:Describe*", 
                "events:List*", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListRolePolicies", 
                "iam:ListRoles", 
                "iot:DescribeEndpoint", 
                "iot:GetTopicRules", 
                "iot:ListPolicies", 
                "iot:ListThings", 
                "iot:ListTopicRules", 
                "kinesis:DescribeStream", 
                "kinesis:ListStreams", 
                "kms:ListAliases", 
                "lambda:Get*", 
                "lambda:List*", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:DescribeMetricFilters", 
                "logs:GetLogEvents", 
                "s3:Get*", 
                "s3:List*", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sqs:ListQueues", 
                "tag:GetResources"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAccountUsageReportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-portal:ViewUsage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTOTAUpdate
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "iot:CreateJob", 
            "signer:DescribeSigningJob"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AmazonMQFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mq:*", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:DetachNetworkInterface", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceGetEntitlements
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:GetEntitlements"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceforEC2Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:CreateCluster", 
                "ecs:DeregisterContainerInstance", 
                "ecs:DiscoverPollEndpoint", 
                "ecs:Poll", 
                "ecs:RegisterContainerInstance", 
                "ecs:StartTelemetrySession", 
                "ecs:UpdateContainerInstancesState", 
                "ecs:Submit*", 
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:BatchGetImage", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAppStreamFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:ListRoles", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/service-role/ApplicationAutoScalingForAmazonAppStreamAccess", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "application-autoscaling.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSIoTDataAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:Connect", 
                "iot:Publish", 
                "iot:Subscribe", 
                "iot:Receive", 
                "iot:GetThingShadow", 
                "iot:UpdateThingShadow", 
                "iot:DeleteThingShadow"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonTranscribeReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "transcribe:Get*", 
                "transcribe:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonESFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "es:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ServerMigrationServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:ModifySnapshotAttribute", 
                "ec2:CopySnapshot", 
                "ec2:CopyImage", 
                "ec2:Describe*", 
                "ec2:DeleteSnapshot", 
                "ec2:DeregisterImage", 
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSWAFFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "waf:*", 
                "waf-regional:*", 
                "elasticloadbalancing:SetWebACL"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSArtifactAccountSync
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "organizations:ListAccounts", 
                "organizations:DescribeOrganization"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisFirehoseFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "firehose:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "logs:Get*", 
                "logs:List*", 
                "logs:Describe*", 
                "logs:TestMetricFilter", 
                "sns:Get*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaBasicExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ResourceGroupsandTagEditorFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "tag:getResources", 
                "tag:getTagKeys", 
                "tag:getTagValues", 
                "tag:TagResources", 
                "tag:UntagResources", 
                "tag:AddResourceTags", 
                "tag:RemoveResourceTags"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSKeyManagementServicePowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:Describe*", 
                "kms:GenerateRandom", 
                "kms:Get*", 
                "kms:List*", 
                "kms:TagResource", 
                "kms:UntagResource", 
                "iam:ListGroups", 
                "iam:ListRoles", 
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingEC2SpotFleetRequestPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeSpotFleetRequests", 
                "ec2:ModifySpotFleetRequest", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSImportExportReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "importexport:ListJobs", 
                "importexport:GetStatus"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeVolumeStatus", 
                "ec2:DescribeVolumes", 
                "ec2:RebootInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:CreateSnapshot"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListBucket", 
                "s3:Put*", 
                "s3:Get*", 
                "s3:*MultipartUpload*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "1"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "2"
        }, 
        {
            "Action": [
                "s3:*Policy*", 
                "sns:*Permission*", 
                "sns:*Delete*", 
                "s3:*Delete*", 
                "sns:*Remove*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Deny", 
            "Sid": "3"
        }
    ]
}
Policy Name: AWSGlueConsoleFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glue:*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSubnetGroups", 
                "iam:ListRoles", 
                "iam:ListRolePolicies", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeInstances", 
                "rds:DescribeDBInstances", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:GetBucketAcl", 
                "s3:GetBucketLocation", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplateSummary", 
                "dynamodb:ListTables"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*/*", 
                "arn:aws:s3:::*/*aws-glue-*/*", 
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:/aws-glue/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack"
            ], 
            "Resource": "arn:aws:cloudformation:*:*:stack/aws-glue*/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:RunInstances"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*", 
                "arn:aws:ec2:*:*:key-pair/*", 
                "arn:aws:ec2:*:*:image/*", 
                "arn:aws:ec2:*:*:security-group/*", 
                "arn:aws:ec2:*:*:network-interface/*", 
                "arn:aws:ec2:*:*:subnet/*", 
                "arn:aws:ec2:*:*:volume/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances", 
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/aws-glue-*/*"
                }, 
                "StringEquals": {
                    "ec2:ResourceTag/aws:cloudformation:logical-id": "ZeppelinInstance"
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "arn:aws:iam::*:role/AWSGlueServiceRole*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "glue.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "arn:aws:iam::*:role/AWSGlueServiceNotebookRole*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/service-role/AWSGlueServiceRole*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "glue.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:Describe*", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DeregisterTargets", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:RegisterTargets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDeviceFarmFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "devicefarm:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:Describe*", 
                "ssm:Get*", 
                "ssm:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStepFunctionsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "states:ListStateMachines", 
                "states:ListActivities", 
                "states:DescribeStateMachine", 
                "states:DescribeStateMachineForExecution", 
                "states:ListExecutions", 
                "states:DescribeExecution", 
                "states:GetExecutionHistory", 
                "states:DescribeActivity"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceRead-only
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:ViewSubscriptions", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingDynamoDBTablePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:DescribeTable", 
                "dynamodb:UpdateTable", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:*", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "s3:CreateBucket", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:PutBucketPolicy", 
                "codecommit:ListBranches", 
                "codecommit:ListRepositories", 
                "codedeploy:GetApplication", 
                "codedeploy:GetDeploymentGroup", 
                "codedeploy:ListApplications", 
                "codedeploy:ListDeploymentGroups", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListFunctions", 
                "opsworks:DescribeApps", 
                "opsworks:DescribeLayers", 
                "opsworks:DescribeStacks", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListChangeSets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9User
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloud9:CreateEnvironment*", 
                "cloud9:ValidateEnvironmentName", 
                "cloud9:GetUserPublicKey", 
                "cloud9:UpdateUserSettings", 
                "cloud9:GetUserSettings", 
                "iam:GetUser", 
                "iam:ListUsers", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloud9:DescribeEnvironmentMemberships"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "Null": {
                    "cloud9:UserArn": "true", 
                    "cloud9:EnvironmentId": "true"
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "cloud9.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSGreengrassResourceAccessRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:DeleteThingShadow", 
                "iot:GetThingShadow", 
                "iot:UpdateThingShadow"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/GG_*", 
                "arn:aws:iot:*:*:thing/*-gcm", 
                "arn:aws:iot:*:*:thing/*-gda", 
                "arn:aws:iot:*:*:thing/*-gci"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToShadows"
        }, 
        {
            "Action": [
                "iot:DescribeThing"
            ], 
            "Resource": "arn:aws:iot:*:*:thing/*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToDescribeThings"
        }, 
        {
            "Action": [
                "iot:DescribeCertificate"
            ], 
            "Resource": "arn:aws:iot:*:*:cert/*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToDescribeCertificates"
        }, 
        {
            "Action": [
                "greengrass:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToCallGreengrassServices"
        }, 
        {
            "Action": [
                "lambda:GetFunction", 
                "lambda:GetFunctionConfiguration"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToGetLambdaFunctions"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::*Greengrass*", 
                "arn:aws:s3:::*GreenGrass*", 
                "arn:aws:s3:::*greengrass*", 
                "arn:aws:s3:::*Sagemaker*", 
                "arn:aws:s3:::*SageMaker*", 
                "arn:aws:s3:::*sagemaker*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToS3Objects"
        }, 
        {
            "Action": [
                "s3:GetBucketLocation"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToS3BucketLocation"
        }, 
        {
            "Action": [
                "sagemaker:DescribeTrainingJob"
            ], 
            "Resource": [
                "arn:aws:sagemaker:*:*:training-job/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToSageMakerTrainingJobs"
        }
    ]
}
Policy Name: NetworkAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "ec2:AllocateAddress", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssociateAddress", 
                "ec2:AssociateDhcpOptions", 
                "ec2:AssociateRouteTable", 
                "ec2:AttachInternetGateway", 
                "ec2:AttachNetworkInterface", 
                "ec2:AttachVpnGateway", 
                "ec2:CreateCustomerGateway", 
                "ec2:CreateDhcpOptions", 
                "ec2:CreateFlowLogs", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateNatGateway", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAclEntry", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:CreateVpcEndpoint", 
                "ec2:CreateVpnConnection", 
                "ec2:CreateVpnConnectionRoute", 
                "ec2:CreateVpnGateway", 
                "ec2:CreatePlacementGroup", 
                "ec2:DeletePlacementGroup", 
                "ec2:DescribePlacementGroups", 
                "ec2:DeleteFlowLogs", 
                "ec2:DeleteNatGateway", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteTags", 
                "ec2:DeleteVpc", 
                "ec2:DeleteVpcEndpoints", 
                "ec2:DeleteVpnConnection", 
                "ec2:DeleteVpnConnectionRoute", 
                "ec2:DeleteVpnGateway", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeVpcClassicLinkDnsSupport", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "ec2:DetachInternetGateway", 
                "ec2:DetachNetworkInterface", 
                "ec2:DetachVpnGateway", 
                "ec2:DisableVgwRoutePropagation", 
                "ec2:DisassociateAddress", 
                "ec2:DisassociateRouteTable", 
                "ec2:EnableVgwRoutePropagation", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:ModifySubnetAttribute", 
                "ec2:ModifyVpcAttribute", 
                "ec2:ModifyVpcEndpoint", 
                "ec2:MoveAddressToVpc", 
                "ec2:ReleaseAddress", 
                "ec2:ReplaceNetworkAclAssociation", 
                "ec2:ReplaceNetworkAclEntry", 
                "ec2:ReplaceRoute", 
                "ec2:ReplaceRouteTableAssociation", 
                "ec2:ResetNetworkInterfaceAttribute", 
                "ec2:RestoreAddressToClassic", 
                "ec2:UnassignPrivateIpAddresses", 
                "directconnect:*", 
                "route53:*", 
                "route53domains:*", 
                "cloudfront:ListDistributions", 
                "elasticloadbalancing:*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:RetrieveEnvironmentInfo", 
                "elasticbeanstalk:RequestEnvironmentInfo", 
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:CreateTopic", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AcceptVpcPeeringConnection", 
                "ec2:AttachClassicLinkVpc", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateVpcPeeringConnection", 
                "ec2:DeleteCustomerGateway", 
                "ec2:DeleteDhcpOptions", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteNetworkAcl", 
                "ec2:DeleteNetworkAclEntry", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteVolume", 
                "ec2:DeleteVpcPeeringConnection", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:DisableVpcClassicLink", 
                "ec2:EnableVpcClassicLink", 
                "ec2:GetConsoleScreenshot", 
                "ec2:RejectVpcPeeringConnection", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "s3:GetBucketWebsiteConfiguration"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:ListRoles", 
                "iam:PassRole"
            ], 
            "Resource": "arn:aws:iam::*:role/flow-logs-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonWorkSpacesApplicationManagerAdminAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "wam:AuthenticatePackager", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDRSVPCManagement
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRedshiftServiceLinkedRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeAddresses", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSXrayFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "xray:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkWorkerTier
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "MetricsAccess"
        }, 
        {
            "Action": [
                "xray:PutTraceSegments", 
                "xray:PutTelemetryRecords"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "XRayAccess"
        }, 
        {
            "Action": [
                "sqs:ChangeMessageVisibility", 
                "sqs:DeleteMessage", 
                "sqs:ReceiveMessage", 
                "sqs:SendMessage"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "QueueAccess"
        }, 
        {
            "Action": [
                "s3:Get*", 
                "s3:List*", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "BucketAccess"
        }, 
        {
            "Action": [
                "dynamodb:BatchGetItem", 
                "dynamodb:BatchWriteItem", 
                "dynamodb:DeleteItem", 
                "dynamodb:GetItem", 
                "dynamodb:PutItem", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "dynamodb:UpdateItem"
            ], 
            "Resource": [
                "arn:aws:dynamodb:*:*:table/*-stack-AWSEBWorkerCronLeaderRegistry*"
            ], 
            "Effect": "Allow", 
            "Sid": "DynamoPeriodicTasks"
        }, 
        {
            "Action": [
                "logs:PutLogEvents", 
                "logs:CreateLogStream"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudWatchLogsAccess"
        }
    ]
}
Policy Name: AWSDirectConnectFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "directconnect:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeBuildAdminAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codebuild:*", 
                "codecommit:GetBranch", 
                "codecommit:GetCommit", 
                "codecommit:GetRepository", 
                "codecommit:ListBranches", 
                "codecommit:ListRepositories", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "s3:GetBucketLocation", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:PutParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisAnalyticsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "kinesisanalytics:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesis:CreateStream", 
                "kinesis:DeleteStream", 
                "kinesis:DescribeStream", 
                "kinesis:ListStreams", 
                "kinesis:PutRecord", 
                "kinesis:PutRecords"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "firehose:DescribeDeliveryStream", 
                "firehose:ListDeliveryStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "logs:GetLogEvents", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListPolicyVersions", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/service-role/kinesis-analytics*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: APIGatewayServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticloadbalancing:AddListenerCertificates", 
                "elasticloadbalancing:RemoveListenerCertificates", 
                "elasticloadbalancing:ModifyListener"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAccountActivityAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-portal:ViewBilling"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGlacierFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "glacier:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonWorkMailFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:AuthorizeApplication", 
                "ds:CheckAlias", 
                "ds:CreateAlias", 
                "ds:CreateDirectory", 
                "ds:CreateIdentityPoolDirectory", 
                "ds:CreateDomain", 
                "ds:DeleteAlias", 
                "ds:DeleteDirectory", 
                "ds:DescribeDirectories", 
                "ds:ExtendDirectory", 
                "ds:GetDirectoryLimits", 
                "ds:ListAuthorizedApplications", 
                "ds:UnauthorizeApplication", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteVpc", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeDomains", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "kms:DescribeKey", 
                "kms:ListAliases", 
                "ses:*", 
                "workmail:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DAXServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceManageSubscriptions
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:ViewSubscriptions", 
                "aws-marketplace:Subscribe", 
                "aws-marketplace:Unsubscribe"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkCustomPlatformforEC2Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CopyImage", 
                "ec2:CreateImage", 
                "ec2:CreateKeypair", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:DeleteKeypair", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteVolume", 
                "ec2:DeregisterImage", 
                "ec2:DescribeImageAttribute", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeRegions", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "ec2:GetPasswordData", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:ModifySnapshotAttribute", 
                "ec2:RegisterImage", 
                "ec2:RunInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "EC2Access"
        }, 
        {
            "Action": [
                "s3:Get*", 
                "s3:List*", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "BucketAccess"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/platform/*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchLogsAccess"
        }
    ]
}
Policy Name: AWSSupportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "support:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticMapReduceforAutoScalingRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "elasticmapreduce:ListInstanceGroups", 
                "elasticmapreduce:ModifyInstanceGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaInvocation-DynamoDB
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "dynamodb:DescribeStream", 
                "dynamodb:GetRecords", 
                "dynamodb:GetShardIterator", 
                "dynamodb:ListStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSServiceCatalogEndUserFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:SetStackPolicy", 
                "cloudformation:ValidateTemplate", 
                "cloudformation:UpdateStack", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:DescribeChangeSet", 
                "cloudformation:ExecuteChangeSet", 
                "cloudformation:ListChangeSets", 
                "cloudformation:DeleteChangeSet"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/SC-*", 
                "arn:aws:cloudformation:*:*:changeSet/SC-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:GetTemplateSummary", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:ProvisionProduct", 
                "servicecatalog:SearchProducts"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "servicecatalog:DescribeProvisionedProduct", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:ScanProvisionedProducts", 
                "servicecatalog:TerminateProvisionedProduct", 
                "servicecatalog:UpdateProvisionedProduct", 
                "servicecatalog:SearchProvisionedProducts", 
                "servicecatalog:CreateProvisionedProductPlan", 
                "servicecatalog:DescribeProvisionedProductPlan", 
                "servicecatalog:ExecuteProvisionedProductPlan", 
                "servicecatalog:DeleteProvisionedProductPlan", 
                "servicecatalog:ListProvisionedProductPlans"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "servicecatalog:userLevel": "self"
                }
            }
        }
    ]
}
Policy Name: IAMUserSSHKeys
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:DeleteSSHPublicKey", 
                "iam:GetSSHPublicKey", 
                "iam:ListSSHPublicKeys", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSageMakerReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sagemaker:DescribeEndpoint", 
                "sagemaker:DescribeEndpointConfig", 
                "sagemaker:DescribeModel", 
                "sagemaker:DescribeTrainingJob", 
                "sagemaker:DescribeNotebookInstance", 
                "sagemaker:ListEndpointConfigs", 
                "sagemaker:ListEndpoints", 
                "sagemaker:ListModels", 
                "sagemaker:ListTags", 
                "sagemaker:ListTrainingJobs", 
                "sagemaker:ListNotebookInstances", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:DescribeScheduledActions", 
                "cloudwatch:DescribeAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSQuickSightDescribeRDS
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigRulesExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::*/AWSLogs/*/Config/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "config:Put*", 
                "config:Get*", 
                "config:List*", 
                "config:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonESReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "es:Describe*", 
                "es:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployDeployerAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codedeploy:Batch*", 
                "codedeploy:CreateDeployment", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codedeploy:RegisterApplicationRevision"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonPollyFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "polly:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMMaintenanceWindowRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:GetAutomationExecution", 
                "ssm:GetParameters", 
                "ssm:ListCommands", 
                "ssm:SendCommand", 
                "ssm:StartAutomationExecution"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1477803259000"
        }, 
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:SSM*", 
                "arn:aws:lambda:*:*:function:*:SSM*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1477803259001"
        }, 
        {
            "Action": [
                "states:DescribeExecution", 
                "states:StartExecution"
            ], 
            "Resource": [
                "arn:aws:states:*:*:stateMachine:SSM*", 
                "arn:aws:states:*:*:execution:SSM*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1477803259002"
        }
    ]
}
Policy Name: AmazonRDSEnhancedMonitoringRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:PutRetentionPolicy"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:RDS*"
            ], 
            "Effect": "Allow", 
            "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogGroups"
        }, 
        {
            "Action": [
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:RDS*:log-stream:*"
            ], 
            "Effect": "Allow", 
            "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogStreams"
        }
    ]
}
Policy Name: AmazonLexFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "kms:DescribeKey", 
                "kms:ListAliases", 
                "lambda:GetPolicy", 
                "lambda:ListFunctions", 
                "lex:*", 
                "polly:DescribeVoices", 
                "polly:SynthesizeSpeech"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:AddPermission", 
                "lambda:RemovePermission"
            ], 
            "Resource": "arn:aws:lambda:*:*:function:AmazonLex*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "lambda:Principal": "lex.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:DeleteRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots", 
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "lex.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:DetachRolePolicy"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/AmazonLexBotPolicy"
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "channels.lex.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:DetachRolePolicy"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/LexChannelPolicy"
                }
            }
        }
    ]
}
Policy Name: AWSLambdaVPCAccessExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DeleteNetworkInterface"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMacieServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:Get*", 
                "s3:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonLexRunBotsOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lex:PostContent", 
                "lex:PostText"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSNSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSServiceCatalogAdminFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:SetStackPolicy", 
                "cloudformation:UpdateStack", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:DescribeChangeSet", 
                "cloudformation:ExecuteChangeSet", 
                "cloudformation:ListChangeSets", 
                "cloudformation:DeleteChangeSet", 
                "cloudformation:ListStackResources"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/SC-*", 
                "arn:aws:cloudformation:*:*:changeSet/SC-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:CreateUploadBucket", 
                "cloudformation:GetTemplateSummary", 
                "cloudformation:ValidateTemplate", 
                "iam:GetGroup", 
                "iam:GetRole", 
                "iam:GetUser", 
                "iam:ListGroups", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "servicecatalog:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": "servicecatalog.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: CloudSearchReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudsearch:Describe*", 
                "cloudsearch:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSGreengrassFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "greengrass:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudFormationReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:Describe*", 
                "cloudformation:EstimateTemplateCost", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:ValidateTemplate"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:*", 
                "route53domains:*", 
                "cloudfront:ListDistributions", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticbeanstalk:DescribeEnvironments", 
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "s3:GetBucketWebsite", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeRegions", 
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaENIManagementAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DeleteNetworkInterface"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksCloudWatchLogs
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAppStreamReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:Get*", 
                "appstream:List*", 
                "appstream:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStepFunctionsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "states:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonInspectorReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "inspector:Describe*", 
                "inspector:Get*", 
                "inspector:List*", 
                "inspector:LocalizeText", 
                "inspector:Preview*", 
                "ec2:DescribeInstances", 
                "ec2:DescribeTags", 
                "sns:ListTopics", 
                "events:DescribeRule", 
                "events:ListRuleNamesByTarget"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: TranslateReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "translate:TranslateText", 
                "comprehend:DetectDominantLanguage", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCertificateManagerFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: PowerUserAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "NotAction": [
                "iam:*", 
                "organizations:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole", 
                "iam:DeleteServiceLinkedRole", 
                "iam:ListRoles", 
                "organizations:DescribeOrganization"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSageMakerFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sagemaker:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:BatchGetImage", 
                "ecr:BatchCheckLayerAvailability", 
                "cloudwatch:PutMetricData", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeleteScheduledAction", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:DescribeScheduledActions", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:PutScheduledAction", 
                "application-autoscaling:RegisterScalableTarget", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject"
            ], 
            "Resource": [
                "arn:aws:s3:::*SageMaker*", 
                "arn:aws:s3:::*Sagemaker*", 
                "arn:aws:s3:::*sagemaker*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:GetBucketLocation", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEqualsIgnoreCase": {
                    "s3:ExistingObjectTag/SageMaker": "true"
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": "sagemaker.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSElementalMediaStoreFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mediastore:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "Bool": {
                    "aws:SecureTransport": "true"
                }
            }
        }
    ]
}
Policy Name: CloudWatchEventsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "events:*", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsFullAccess"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/AWS_Events_Invoke_Targets", 
            "Effect": "Allow", 
            "Sid": "IAMPassRoleForCloudWatchEvents"
        }
    ]
}
Policy Name: ADPMaintenance
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:*", 
                "cloudformation:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListStackResources", 
                "cloudformation:UpdateStack", 
                "cloudwatch:*", 
                "cloudwatch:Describe*", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "ec2:AssociateAddress", 
                "ec2:AssociateSubnetCidrBlock", 
                "ec2:Attach*", 
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CopyImage", 
                "ec2:CreateFpgaImage", 
                "ec2:CreateImage", 
                "ec2:CreateKeyPair", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSecurityGroupEgress", 
                "ec2:CreateSecurityGroupIngress", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:CreateInternetGateway", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteKeyPair", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteVolume", 
                "ec2:DeregisterImage", 
                "ec2:Describe*", 
                "ec2:DescribeKeyPairs", 
                "ec2:Detach*", 
                "ec2:DetachVolume", 
                "ec2:DetachInternetGateway", 
                "ec2:DisassociateSubnetCidrBlock", 
                "ec2:Get*", 
                "ec2:ImportKeyPair", 
                "ec2:InstanceType", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:ModifyVolume", 
                "ec2:ModifyVolumeAttribute", 
                "ec2:RebootInstances", 
                "ec2:RegisterImage", 
                "ec2:ReplaceNetworkAclAssociation", 
                "ec2:ReplaceNetworkAclEntry", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:UpdateSecurityGroupRuleDescriptionsEgress", 
                "ec2:UpdateSecurityGroupRuleDescriptionsIngress", 
                "elasticfilesystem:ModifyMountTargetSecurityGroups", 
                "elasticloadbalancing:ConfigureHealthCheck", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:ModifyLoadBalancerAttributes", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:SetLoadBalancerPoliciesOfListener", 
                "events:DeleteRule", 
                "events:DescribeRule", 
                "events:DescribeRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "iam:AddRoleToInstanceProfile", 
                "iam:AttachRolePolicy", 
                "iam:AttachUserPolicy", 
                "iam:CreateAccessKey", 
                "iam:CreateInstanceProfile", 
                "iam:CreateRole", 
                "iam:CreateUser", 
                "iam:DeleteAccessKey", 
                "iam:DeleteInstanceProfile", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DeleteUser", 
                "iam:DeleteUserPolicy", 
                "iam:DetachRolePolicy", 
                "iam:GetInstanceProfile", 
                "iam:GetRole", 
                "iam:GetSSHPublicKey", 
                "iam:GetUser", 
                "iam:ListAccessKeys", 
                "iam:ListRolePolicies", 
                "iam:ListRoles", 
                "iam:ListSSHPublicKeys ", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:PutUserPolicy", 
                "iam:RemoveRoleFromInstanceProfile", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey ", 
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:DeleteKey", 
                "kms:Decrypt", 
                "kms:Encrypt", 
                "kms:Get*", 
                "kms:ListAliases", 
                "kms:ListKeys", 
                "kms:Enable*", 
                "kms:Put*", 
                "kms:ScheduleKeyDeletion", 
                "kms:TagResource", 
                "lambda:*", 
                "lambda:AddPermission", 
                "lambda:CreateFunction", 
                "lambda:GetAccountSettings", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListAliases", 
                "lambda:ListFunctions", 
                "lambda:ListTags", 
                "lambda:TagResource", 
                "lambda:UntagResource", 
                "lambda:UpdateFunctionCode", 
                "lambda:UpdateFunctionConfiguration", 
                "logs:Describe*", 
                "logs:FilterLogEvents", 
                "logs:GetLogEvents", 
                "logs:TestMetricFilter", 
                "rds:*", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateRecordSet", 
                "route53:DeleteRecordSet", 
                "route53:GetChange", 
                "route53:GetHostedZone", 
                "route53:ListHostedZones", 
                "route53:ListResourceRecordSets", 
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteObject", 
                "s3:DeleteObjectVersion", 
                "s3:GetBucketAcl", 
                "s3:GetBucketLocation", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:GetObjectAcl", 
                "s3:GetObjectVersion", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:ListBucketVersions", 
                "s3:PutBucketAcl", 
                "s3:PutBucketPolicy", 
                "s3:PutObject", 
                "s3:PutObjectAcl", 
                "sns:ListTopics", 
                "sns:GetTopicAttributes", 
                "sns:ConfirmSubscription", 
                "sns:CreateTopic", 
                "sns:Publish*", 
                "sns:SetTopicAttributes", 
                "sns:Subscribe", 
                "sts:DecodeAuthorizationMessage", 
                "sts:DecodeAuthorizationMessage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudFormationFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: bbl-policy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:*", 
                "rds:*", 
                "s3:*", 
                "kms:*", 
                "logs:*", 
                "route53:*", 
                "ec2:*", 
                "cloudformation:*", 
                "elasticloadbalancing:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "VisualEditor0"
        }
    ]
}
Policy Name: CloudFormsPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:ListCertificates", 
                "athena:List*", 
                "aws-marketplace:ViewSubscriptions", 
                "autoscaling:Describe*", 
                "batch:ListJobs", 
                "clouddirectory:ListAppliedSchemaArns", 
                "clouddirectory:ListDevelopmentSchemaArns", 
                "clouddirectory:ListDirectories", 
                "clouddirectory:ListPublishedSchemaArns", 
                "cloudformation:List*", 
                "cloudformation:DescribeStacks", 
                "cloudfront:List*", 
                "cloudhsm:ListAvailableZones", 
                "cloudhsm:ListLunaClients", 
                "cloudhsm:ListHapgs", 
                "cloudhsm:ListHsms", 
                "cloudsearch:List*", 
                "cloudsearch:DescribeDomains", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:LookupEvents", 
                "cloudwatch:List*", 
                "cloudformation:GetTemplate", 
                "cloudwatch:GetMetricData", 
                "codebuild:ListBuilds*", 
                "codebuild:ListProjects", 
                "codecommit:List*", 
                "codedeploy:List*", 
                "codedeploy:Get*", 
                "codepipeline:ListPipelines", 
                "codestar:List*", 
                "codestar:Verify*", 
                "cognito-idp:List*", 
                "cognito-identity:ListIdentities", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:ListDatasets", 
                "connect:List*", 
                "config:List*", 
                "config:Describe*", 
                "datapipeline:ListPipelines", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetAccountLimits", 
                "devicefarm:List*", 
                "directconnect:Describe*", 
                "discovery:List*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListTables", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeBundleTasks", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeHost*", 
                "ec2:DescribeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeImage*", 
                "ec2:DescribeImport*", 
                "ec2:DescribeInstance*", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetwork*", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeReserved*", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshot*", 
                "ec2:DescribeSpot*", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolume*", 
                "ec2:DescribeVpc*", 
                "ec2:DescribeVpnGateways", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:DescribeApplicationVersions", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticbeanstalk:ListAvailableSolutionStacks", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "es:DescribeElasticsearchDomain", 
                "es:DescribeElasticsearchDomains", 
                "es:ListDomainNames", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "firehose:List*", 
                "firehose:DescribeDeliveryStream", 
                "gamelift:List*", 
                "glacier:List*", 
                "iam:List*", 
                "iam:GetAccountSummary", 
                "iam:GetLoginProfile", 
                "importexport:ListJobs", 
                "inspector:List*", 
                "iot:List*", 
                "kinesis:ListStreams", 
                "kinesisanalytics:ListApplications", 
                "kms:ListKeys", 
                "lambda:List*", 
                "lex:GetBotAliases", 
                "lex:GetBotChannelAssociations", 
                "lex:GetBots", 
                "lex:GetBotVersions", 
                "lex:GetIntents", 
                "lex:GetIntentVersions", 
                "lex:GetSlotTypes", 
                "lex:GetSlotTypeVersions", 
                "lex:GetUtterancesView", 
                "lightsail:GetBlueprints", 
                "lightsail:GetBundles", 
                "lightsail:GetInstances", 
                "lightsail:GetInstanceSnapshots", 
                "lightsail:GetKeyPair", 
                "lightsail:GetRegions", 
                "lightsail:GetStaticIps", 
                "lightsail:IsVpcPeered", 
                "logs:Describe*", 
                "machinelearning:Describe*", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "opsworks:Describe*", 
                "opsworks-cm:Describe*", 
                "organizations:List*", 
                "mobiletargeting:GetApplicationSettings", 
                "mobiletargeting:GetCampaigns", 
                "mobiletargeting:GetImportJobs", 
                "mobiletargeting:GetSegments", 
                "polly:Describe*", 
                "polly:List*", 
                "rds:Describe*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeEvents", 
                "redshift:ViewQueriesInConsole", 
                "route53:List*", 
                "route53:Get*", 
                "route53domains:List*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "sdb:List*", 
                "servicecatalog:List*", 
                "ses:List*", 
                "shield:List*", 
                "states:ListActivities", 
                "states:ListStateMachines", 
                "sns:List*", 
                "sqs:ListQueues", 
                "ssm:ListAssociations", 
                "ssm:ListDocuments", 
                "storagegateway:ListGateways", 
                "storagegateway:ListLocalDisks", 
                "storagegateway:ListVolumeRecoveryPoints", 
                "storagegateway:ListVolumes", 
                "swf:List*", 
                "trustedadvisor:Describe*", 
                "waf:List*", 
                "waf-regional:List*", 
                "workdocs:DescribeAvailableDirectories", 
                "workdocs:DescribeInstances", 
                "workmail:Describe*", 
                "workspaces:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: config-role-eu-central-1_AWSConfigDeliveryPermissions_eu-central-1
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:PutObject*"
            ], 
            "Resource": [
                "arn:aws:s3:::config-bucket-874233888769/AWSLogs/874233888769/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "s3:x-amz-acl": "bucket-owner-full-control"
                }
            }
        }, 
        {
            "Action": [
                "s3:GetBucketAcl"
            ], 
            "Resource": "arn:aws:s3:::config-bucket-874233888769", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CRPMaintenance
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListStackResources", 
                "cloudformation:UpdateStack", 
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSecurityGroupEgress", 
                "ec2:CreateSecurityGroupIngress", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteVolume", 
                "ec2:Describe*", 
                "ec2:DetachVolume", 
                "ec2:ModifyVolumeAttribute", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "elasticloadbalancing:ConfigureHealthCheck", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:ModifyLoadBalancerAttributes", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:SetLoadBalancerPoliciesOfListener", 
                "iam:AddRoleToInstanceProfile", 
                "iam:CreateAccessKey", 
                "iam:CreateInstanceProfile", 
                "iam:CreateRole", 
                "iam:CreateUser", 
                "iam:DeleteAccessKey", 
                "iam:DeleteInstanceProfile", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DeleteUser", 
                "iam:DeleteUserPolicy", 
                "iam:GetRole", 
                "iam:GetUser", 
                "iam:ListAccessKeys", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:PutUserPolicy", 
                "iam:RemoveRoleFromInstanceProfile", 
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:DeleteAlias", 
                "kms:DeleteKey", 
                "kms:ListAliases", 
                "kms:ListKeys", 
                "kms:ScheduleKeyDeletion", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateRecordSet", 
                "route53:DeleteRecordSet", 
                "route53:GetChange", 
                "route53:ListHostedZones", 
                "route53:ListResourceRecordSets", 
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "sts:DecodeAuthorizationMessage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: dynatrace-key-policy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "ec2:*", 
                "elasticloadbalancing:Describe*", 
                "rds:DescribeDBInstances", 
                "rds:DescribeEvents", 
                "rds:List*", 
                "dynamodb:DescribeTable", 
                "dynamodb:ListTables", 
                "lambda:ListFunctions", 
                "lambda:GetFunction", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticbeanstalk:DescribeEnvironmentResources", 
                "s3:List*", 
                "s3:Get*", 
                "cloudformation:*", 
                "iam:PassRole", 
                "iam:GetRole", 
                "iam:PassRole", 
                "iam:PutUserPolicy", 
                "iam:CreateRole", 
                "iam:PutRolePolicy", 
                "iam:GetUser", 
                "iam:AttachRolePolicy", 
                "iam:AddRoleToInstanceProfile", 
                "iam:CreateUser", 
                "iam:createInstanceProfile", 
                "sts:GetCallerIdentity", 
                "sts:AssumeRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: Dynatrace_Backup_Create_policy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:*"
            ], 
            "Resource": "arn:aws:logs:*:*:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "ec2:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateSnapshot", 
                "ec2:DeleteSnapshot", 
                "ec2:CreateTags", 
                "ec2:ModifySnapshotAttribute", 
                "ec2:ResetSnapshotAttribute"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: IAMCfnAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:List*", 
                "iam:Get*", 
                "iam:CreateAccessKey", 
                "iam:CreateRole", 
                "iam:DeleteAccessKey", 
                "iam:PassRole", 
                "iam:AttachRolePolicy", 
                "iam:CreatePolicy", 
                "iam:CreatePolicyVersion", 
                "iam:PutRolePolicy", 
                "iam:UpdateAssumeRolePolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: NetworkServicePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:List*", 
                "dynamodb:Get*", 
                "dynamodb:Describe*", 
                "s3:List*", 
                "s3:Get*", 
                "s3:Describe*", 
                "ec2:AllocateAddress", 
                "ec2:AssociateAddress", 
                "ec2:DescribeAddresses", 
                "ec2:DisassociateAddress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: sbx-adpsecrets-s3-repo
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:AbortMultipartUpload", 
                "s3:DeleteObject", 
                "s3:DeleteObjectVersion", 
                "s3:GetAccelerateConfiguration", 
                "s3:GetBucketAcl", 
                "s3:GetBucketCORS", 
                "s3:GetBucketLocation", 
                "s3:GetBucketLogging", 
                "s3:GetBucketNotification", 
                "s3:GetBucketPolicy", 
                "s3:GetBucketRequestPayment", 
                "s3:GetBucketTagging", 
                "s3:GetBucketVersioning", 
                "s3:GetBucketWebsite", 
                "s3:GetLifecycleConfiguration", 
                "s3:GetObject", 
                "s3:GetObjectAcl", 
                "s3:GetObjectTagging", 
                "s3:GetObjectTorrent", 
                "s3:GetObjectVersion", 
                "s3:GetObjectVersionAcl", 
                "s3:GetObjectVersionTagging", 
                "s3:GetObjectVersionTorrent", 
                "s3:GetReplicationConfiguration", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:ListObjects", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListBucketVersions", 
                "s3:ListMultipartUploadParts", 
                "s3:PutObject", 
                "s3:ReplicateObject"
            ], 
            "Resource": [
                "arn:aws:s3:::sbxadp-credential/*", 
                "arn:aws:s3:::sbxadp-credential"
            ], 
            "Effect": "Allow", 
            "Sid": "VisualEditor0"
        }
    ]
}
Policy Name: sbx-bosh
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AssociateAddress", 
                "ec2:AttachVolume", 
                "ec2:CreateVolume", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteVolume", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeRegions", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:TerminateInstances", 
                "ec2:RegisterImage", 
                "ec2:DeregisterImage", 
                "ec2:ResetInstanceAttribute"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:List*", 
                "iam:Get*", 
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:ListBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::adp-jumpbox-release-bucket"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::adp-jumpbox-release-bucket/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kms:CreateKey", 
                "kms:TagResource", 
                "kms:ListAliases", 
                "kms:CreateAlias", 
                "kms:Encrypt", 
                "kms:Decrypt", 
                "kms:DescribeKey", 
                "kms:GetKeyPolicy", 
                "kms:ListKeyPolicies", 
                "kms:ReEncryptFrom", 
                "kms:ReEncryptTo"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: sbxadpi-platform-OpsManagerIamPolicy-XP5RFDVV5ZRS
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:Add*", 
                "iam:Attach*", 
                "iam:ChangePassword", 
                "iam:Create*", 
                "iam:DeactivateMFADevice", 
                "iam:Delete*", 
                "iam:Detach*", 
                "iam:EnableMFADevice", 
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:GetAccessKeyLastUsed", 
                "iam:GetAccountAuthorizationDetails", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetContextKeysForCustomPolicy", 
                "iam:GetContextKeysForPrincipalPolicy", 
                "iam:GetCredentialReport", 
                "iam:GetGroup", 
                "iam:GetGroupPolicy", 
                "iam:GetLoginProfile", 
                "iam:GetOpenIDConnectProvider", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:GetSAMLProvider", 
                "iam:GetSSHPublicKey", 
                "iam:GetServerCertificate", 
                "iam:GetServiceLastAccessedDetails", 
                "iam:GetUser", 
                "iam:GetUserPolicy", 
                "iam:List*", 
                "iam:Put*", 
                "iam:RemoveClientIDFromOpenIDConnectProvider", 
                "iam:RemoveRoleFromInstanceProfile", 
                "iam:RemoveUserFromGroup", 
                "iam:ResyncMFADevice", 
                "iam:SetDefaultPolicyVersion", 
                "iam:SimulateCustomPolicy", 
                "iam:SimulatePrincipalPolicy", 
                "iam:Update*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Deny"
        }, 
        {
            "Action": [
                "iam:GetInstanceProfile"
            ], 
            "Resource": [
                "arn:aws:iam::874233888769:instance-profile/sbxadpi-platform-OpsManagerIamInstanceProfile-E75GMHD71H7"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowToGetInfoAboutCurrentInstanceProfile"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::874233888769:role/sbxadpi-platform-OpsManagerIamRole-8ZS30ILKHCVK"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowToCreateInstanceWithCurrentInstanceProfile"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::sbxadpi-platform-opsmanagers3bucket-fdam1noaw3xk", 
                "arn:aws:s3:::sbxadpi-platform-opsmanagers3bucket-fdam1noaw3xk/*"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerS3Permissions"
        }, 
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:RunInstances", 
                "ec2:RebootInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeKeypairs", 
                "ec2:DescribeRegions", 
                "ec2:DescribeSnapshots", 
                "ec2:CreateSnapshot", 
                "ec2:DeleteSnapshot", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:CreateTags", 
                "ec2:DescribeVolumes", 
                "ec2:CreateVolume", 
                "ec2:AttachVolume", 
                "ec2:DeleteVolume", 
                "ec2:DetachVolume", 
                "ec2:CopyImage", 
                "ec2:DeregisterImage"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringLike": {
                    "ec2:ResourceTag/director": [
                        "bosh-init", 
                        "p-bosh"
                    ]
                }
            }, 
            "Sid": "OpsManagerEc2Permissions"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "arn:aws:elasticloadbalancing:eu-central-1:874233888769:loadbalancer/sbxadpi-platform-pcf-elb", 
                "arn:aws:elasticloadbalancing:eu-central-1:874233888769:loadbalancer/sbxadpi-tcp-pcf-tcp-elb", 
                "arn:aws:elasticloadbalancing:eu-central-1:874233888769:loadbalancer/sbxadpi-ssh-elb"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerElbPermissions"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DescribeLoadBalancers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "OpsManagerAllElbPermissions"
        }
    ]
}
Policy Name: sbxadpo-platform-OpsManagerIamPolicy-106ROBBJ4DX7L
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:Add*", 
                "iam:Attach*", 
                "iam:ChangePassword", 
                "iam:Create*", 
                "iam:DeactivateMFADevice", 
                "iam:Delete*", 
                "iam:Detach*", 
                "iam:EnableMFADevice", 
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:GetAccessKeyLastUsed", 
                "iam:GetAccountAuthorizationDetails", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetContextKeysForCustomPolicy", 
                "iam:GetContextKeysForPrincipalPolicy", 
                "iam:GetCredentialReport", 
                "iam:GetGroup", 
                "iam:GetGroupPolicy", 
                "iam:GetLoginProfile", 
                "iam:GetOpenIDConnectProvider", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:GetSAMLProvider", 
                "iam:GetSSHPublicKey", 
                "iam:GetServerCertificate", 
                "iam:GetServiceLastAccessedDetails", 
                "iam:GetUser", 
                "iam:GetUserPolicy", 
                "iam:List*", 
                "iam:Put*", 
                "iam:RemoveClientIDFromOpenIDConnectProvider", 
                "iam:RemoveRoleFromInstanceProfile", 
                "iam:RemoveUserFromGroup", 
                "iam:ResyncMFADevice", 
                "iam:SetDefaultPolicyVersion", 
                "iam:SimulateCustomPolicy", 
                "iam:SimulatePrincipalPolicy", 
                "iam:Update*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Deny"
        }, 
        {
            "Action": [
                "iam:GetInstanceProfile"
            ], 
            "Resource": [
                "arn:aws:iam::874233888769:instance-profile/sbxadpo-platform-OpsManagerIamInstanceProfile-1WPSQZ8SZ57XR"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowToGetInfoAboutCurrentInstanceProfile"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::874233888769:role/sbxadpo-platform-OpsManagerIamRole-BG7EBPI6ZVNC"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowToCreateInstanceWithCurrentInstanceProfile"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::sbxadpo-platform-opsmanagers3bucket-14xh6bxbqcukm", 
                "arn:aws:s3:::sbxadpo-platform-opsmanagers3bucket-14xh6bxbqcukm/*"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerS3Permissions"
        }, 
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:RunInstances", 
                "ec2:RebootInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeKeypairs", 
                "ec2:DescribeRegions", 
                "ec2:DescribeSnapshots", 
                "ec2:CreateSnapshot", 
                "ec2:DeleteSnapshot", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:CreateTags", 
                "ec2:DescribeVolumes", 
                "ec2:CreateVolume", 
                "ec2:AttachVolume", 
                "ec2:DeleteVolume", 
                "ec2:DetachVolume", 
                "ec2:CopyImage", 
                "ec2:DeregisterImage"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringLike": {
                    "ec2:ResourceTag/director": [
                        "bosh-init", 
                        "p-bosh"
                    ]
                }
            }, 
            "Sid": "OpsManagerEc2Permissions"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "arn:aws:elasticloadbalancing:eu-central-1:874233888769:loadbalancer/sbxadpo-platform-pcf-elb-intra", 
                "arn:aws:elasticloadbalancing:eu-central-1:874233888769:loadbalancer/sbxadpo-platform-pcf-elb", 
                "arn:aws:elasticloadbalancing:eu-central-1:874233888769:loadbalancer/sbxadpo-tcp-pcf-tcp-elb", 
                "arn:aws:elasticloadbalancing:eu-central-1:874233888769:loadbalancer/sbxadpo-ssh-elb"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerElbPermissions"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DescribeLoadBalancers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "OpsManagerAllElbPermissions"
        }
    ]
}
Policy Name: sbxadpo-platform-OpsManagerIamPolicy-ISQ3U17D76Q2
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:Add*", 
                "iam:Attach*", 
                "iam:ChangePassword", 
                "iam:Create*", 
                "iam:DeactivateMFADevice", 
                "iam:Delete*", 
                "iam:Detach*", 
                "iam:EnableMFADevice", 
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:GetAccessKeyLastUsed", 
                "iam:GetAccountAuthorizationDetails", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetContextKeysForCustomPolicy", 
                "iam:GetContextKeysForPrincipalPolicy", 
                "iam:GetCredentialReport", 
                "iam:GetGroup", 
                "iam:GetGroupPolicy", 
                "iam:GetLoginProfile", 
                "iam:GetOpenIDConnectProvider", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:GetSAMLProvider", 
                "iam:GetSSHPublicKey", 
                "iam:GetServerCertificate", 
                "iam:GetServiceLastAccessedDetails", 
                "iam:GetUser", 
                "iam:GetUserPolicy", 
                "iam:List*", 
                "iam:Put*", 
                "iam:RemoveClientIDFromOpenIDConnectProvider", 
                "iam:RemoveRoleFromInstanceProfile", 
                "iam:RemoveUserFromGroup", 
                "iam:ResyncMFADevice", 
                "iam:SetDefaultPolicyVersion", 
                "iam:SimulateCustomPolicy", 
                "iam:SimulatePrincipalPolicy", 
                "iam:Update*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Deny"
        }, 
        {
            "Action": [
                "iam:GetInstanceProfile"
            ], 
            "Resource": [
                "arn:aws:iam::874233888769:instance-profile/sbxadpo-platform-OpsManagerIamInstanceProfile-7K3CW07L29JC"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowToGetInfoAboutCurrentInstanceProfile"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::874233888769:role/sbxadpo-platform-OpsManagerIamRole-190BX9MAYBTE6"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowToCreateInstanceWithCurrentInstanceProfile"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::sbxadpo-platform-opsmanagers3bucket-38xdx12lc9qj", 
                "arn:aws:s3:::sbxadpo-platform-opsmanagers3bucket-38xdx12lc9qj/*"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerS3Permissions"
        }, 
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:RunInstances", 
                "ec2:RebootInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeKeypairs", 
                "ec2:DescribeRegions", 
                "ec2:DescribeSnapshots", 
                "ec2:CreateSnapshot", 
                "ec2:DeleteSnapshot", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:CreateTags", 
                "ec2:DescribeVolumes", 
                "ec2:CreateVolume", 
                "ec2:AttachVolume", 
                "ec2:DeleteVolume", 
                "ec2:DetachVolume"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringLike": {
                    "ec2:ResourceTag/director": [
                        "bosh-init", 
                        "p-bosh"
                    ]
                }
            }, 
            "Sid": "OpsManagerEc2Permissions"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "arn:aws:elasticloadbalancing:eu-central-1:874233888769:sbxadpo-platform-pcf-elb", 
                "arn:aws:elasticloadbalancing:eu-central-1:874233888769:loadbalancer/dadpi-tcp-pcf-tcp-elb"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerElbPermissions"
        }
    ]
}
Policy Name: sbxdt_APiGateway
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "apigateway:*", 
            "Resource": "arn:aws:apigateway:*::*", 
            "Effect": "Allow", 
            "Sid": "VisualEditor0"
        }
    ]
}
Policy Name: ViewOnlyPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "connect:List*", 
                "config:List*", 
                "config:Describe*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListTables", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeBundleTasks", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeHost*", 
                "ec2:DescribeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeImage*", 
                "ec2:DescribeImport*", 
                "ec2:DescribeInstance*", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetwork*", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeReserved*", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshot*", 
                "ec2:DescribeSpot*", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolume*", 
                "ec2:DescribeVpc*", 
                "ec2:DescribeVpnGateways", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:DescribeApplicationVersions", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticbeanstalk:ListAvailableSolutionStacks", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "iam:List*", 
                "iam:GetAccountSummary", 
                "iam:GetLoginProfile", 
                "importexport:ListJobs", 
                "inspector:List*", 
                "kms:ListKeys", 
                "lambda:List*", 
                "logs:Describe*", 
                "organizations:List*", 
                "rds:Describe*", 
                "route53:List*", 
                "route53:Get*", 
                "route53domains:List*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:Get*", 
                "sdb:List*", 
                "servicecatalog:List*", 
                "ses:List*", 
                "sns:List*", 
                "sqs:ListQueues", 
                "ssm:ListAssociations", 
                "ssm:ListDocuments", 
                "swf:List*", 
                "trustedadvisor:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: vladi-bosh_bosh_policy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AssociateAddress", 
                "ec2:AttachVolume", 
                "ec2:CreateVolume", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteVolume", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeRegions", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RunInstances", 
                "ec2:TerminateInstances", 
                "ec2:RegisterImage", 
                "ec2:DeregisterImage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDirectConnectReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "directconnect:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGlacierReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glacier:DescribeJob", 
                "glacier:DescribeVault", 
                "glacier:GetDataRetrievalPolicy", 
                "glacier:GetJobOutput", 
                "glacier:GetVaultAccessPolicy", 
                "glacier:GetVaultLock", 
                "glacier:GetVaultNotifications", 
                "glacier:ListJobs", 
                "glacier:ListMultipartUploads", 
                "glacier:ListParts", 
                "glacier:ListTagsForVault", 
                "glacier:ListVaults"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackResource", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:List*", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcs", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingConsoleReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:ListMetrics", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:ListSubscriptions", 
                "sns:ListTopics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDMSRedshiftS3Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:ListBucket", 
                "s3:DeleteBucket", 
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject", 
                "s3:GetObjectVersion", 
                "s3:GetBucketPolicy", 
                "s3:PutBucketPolicy", 
                "s3:DeleteBucketPolicy"
            ], 
            "Resource": "arn:aws:s3:::dms-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSQuickSightListIAM
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSHealthFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "health:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessGatewayExecution
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:Send*", 
                "a4b:Get*"
            ], 
            "Resource": "arn:aws:a4b:*:*:gateway/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sqs:ReceiveMessage", 
                "sqs:DeleteMessage"
            ], 
            "Resource": [
                "arn:aws:sqs:*:*:dd-*", 
                "arn:aws:sqs:*:*:sd-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "a4b:List*", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogGroups", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRDSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:*", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DeleteAlarms", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "sns:ListSubscriptions", 
                "sns:ListTopics", 
                "sns:Publish", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "pi:*", 
            "Resource": "arn:aws:pi:*:*:metrics/rds/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "rds.amazonaws.com", 
                        "rds.application-autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: SupportUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "support:*", 
                "acm:DescribeCertificate", 
                "acm:GetCertificate", 
                "acm:List*", 
                "apigateway:GET", 
                "appstream:Get*", 
                "autoscaling:Describe*", 
                "aws-marketplace:ViewSubscriptions", 
                "cloudformation:Describe*", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:EstimateTemplateCost", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "cloudsearch:Describe*", 
                "cloudsearch:List*", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:LookupEvents", 
                "cloudtrail:ListTags", 
                "cloudtrail:ListPublicKeys", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "codecommit:BatchGetRepositories", 
                "codecommit:Get*", 
                "codecommit:List*", 
                "codedeploy:Batch*", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codepipeline:AcknowledgeJob", 
                "codepipeline:AcknowledgeThirdPartyJob", 
                "codepipeline:ListActionTypes", 
                "codepipeline:ListPipelines", 
                "codepipeline:PollForJobs", 
                "codepipeline:PollForThirdPartyJobs", 
                "codepipeline:GetPipelineState", 
                "codepipeline:GetPipeline", 
                "cognito-identity:List*", 
                "cognito-identity:LookupDeveloperIdentity", 
                "cognito-identity:Describe*", 
                "cognito-idp:Describe*", 
                "cognito-sync:Describe*", 
                "cognito-sync:GetBulkPublishDetails", 
                "cognito-sync:GetCognitoEvents", 
                "cognito-sync:GetIdentityPoolConfiguration", 
                "cognito-sync:List*", 
                "config:DescribeConfigurationRecorders", 
                "config:DescribeConfigurationRecorderStatus", 
                "config:DescribeConfigRuleEvaluationStatus", 
                "config:DescribeConfigRules", 
                "config:DescribeDeliveryChannels", 
                "config:DescribeDeliveryChannelStatus", 
                "config:GetResourceConfigHistory", 
                "config:ListDiscoveredResources", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:QueryObjects", 
                "datapipeline:ReportTaskProgress", 
                "datapipeline:ReportTaskRunnerHeartbeat", 
                "devicefarm:List*", 
                "devicefarm:Get*", 
                "directconnect:Describe*", 
                "discovery:Describe*", 
                "discovery:ListConfigurations", 
                "dms:Describe*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "ds:DescribeSnapshots", 
                "ds:GetDirectoryLimits", 
                "ds:GetSnapshotLimits", 
                "ds:ListAuthorizedApplications", 
                "dynamodb:DescribeLimits", 
                "dynamodb:DescribeTable", 
                "dynamodb:ListTables", 
                "ec2:Describe*", 
                "ec2:DescribeHosts", 
                "ec2:describeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeReservedInstancesModifications", 
                "ec2:DescribeTags", 
                "ec2:GetFlowLogsCount", 
                "ecr:GetRepositoryPolicy", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:Describe*", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticache:List*", 
                "elasticbeanstalk:Check*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:RequestEnvironmentInfo", 
                "elasticbeanstalk:RetrieveEnvironmentInfo", 
                "elasticbeanstalk:ValidateConfigurationSettings", 
                "elasticfilesystem:Describe*", 
                "elasticloadbalancing:Describe*", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "elastictranscoder:ReadJob", 
                "elasticfilesystem:DescribeFileSystems", 
                "es:Describe*", 
                "es:List*", 
                "es:ESHttpGet", 
                "es:ESHttpHead", 
                "events:DescribeRule", 
                "events:List*", 
                "events:TestEventPattern", 
                "firehose:Describe*", 
                "firehose:List*", 
                "gamelift:List*", 
                "gamelift:Describe*", 
                "glacier:ListVaults", 
                "glacier:DescribeVault", 
                "glacier:DescribeJob", 
                "glacier:Get*", 
                "glacier:List*", 
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:Get*", 
                "iam:List*", 
                "importexport:GetStatus", 
                "importexport:ListJobs", 
                "importexport:GetJobDetail", 
                "inspector:Describe*", 
                "inspector:List*", 
                "inspector:GetAssessmentTelemetry", 
                "inspector:LocalizeText", 
                "iot:Describe*", 
                "iot:Get*", 
                "iot:List*", 
                "kinesisanalytics:DescribeApplication", 
                "kinesisanalytics:DiscoverInputSchema", 
                "kinesisanalytics:GetApplicationState", 
                "kinesisanalytics:ListApplications", 
                "kinesis:Describe*", 
                "kinesis:Get*", 
                "kinesis:List*", 
                "kms:Describe*", 
                "kms:Get*", 
                "kms:List*", 
                "lambda:List*", 
                "lambda:Get*", 
                "logs:Describe*", 
                "logs:TestMetricFilter", 
                "machinelearning:Describe*", 
                "machinelearning:Get*", 
                "mobilehub:GetProject", 
                "mobilehub:List*", 
                "mobilehub:ValidateProject", 
                "mobilehub:VerifyServiceRole", 
                "opsworks:Describe*", 
                "rds:Describe*", 
                "rds:ListTagsForResource", 
                "redshift:Describe*", 
                "route53:Get*", 
                "route53:List*", 
                "route53domains:CheckDomainAvailability", 
                "route53domains:GetDomainDetail", 
                "route53domains:GetOperationDetail", 
                "route53domains:List*", 
                "s3:List*", 
                "sdb:GetAttributes", 
                "sdb:List*", 
                "sdb:Select*", 
                "servicecatalog:SearchProducts", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ScanProvisionedProducts", 
                "ses:Get*", 
                "ses:List*", 
                "sns:Get*", 
                "sns:List*", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "sqs:ListQueues", 
                "sqs:ReceiveMessage", 
                "ssm:List*", 
                "ssm:Describe*", 
                "storagegateway:Describe*", 
                "storagegateway:List*", 
                "swf:Count*", 
                "swf:Describe*", 
                "swf:Get*", 
                "swf:List*", 
                "waf:Get*", 
                "waf:List*", 
                "workspaces:Describe*", 
                "workdocs:Describe*", 
                "workmail:Describe*", 
                "workmail:Get*", 
                "workspaces:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "ec2:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "cloudwatch:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": [
                        "autoscaling.amazonaws.com", 
                        "ec2scheduled.amazonaws.com", 
                        "elasticloadbalancing.amazonaws.com", 
                        "spot.amazonaws.com", 
                        "spotfleet.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: SecretsManagerReadWrite
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "secretsmanager:*", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:DescribeChangeSet", 
                "cloudformation:DescribeStackResource", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ExecuteChangeSet", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "kms:DescribeKey", 
                "kms:ListAliases", 
                "kms:ListKeys", 
                "lambda:ListFunctions", 
                "rds:DescribeDBInstances", 
                "tag:GetResources"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:AddPermission", 
                "lambda:CreateFunction", 
                "lambda:GetFunction", 
                "lambda:InvokeFunction", 
                "lambda:UpdateFunctionConfiguration"
            ], 
            "Resource": "arn:aws:lambda:*:*:function:SecretsManager*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "serverlessrepo:CreateCloudFormationChangeSet"
            ], 
            "Resource": "arn:aws:serverlessrepo:*:*:applications/SecretsManager*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::awsserverlessrepo-changesets*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTThingsRegistration
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:AddThingToThingGroup", 
                "iot:AttachPrincipalPolicy", 
                "iot:AttachThingPrincipal", 
                "iot:CreateCertificateFromCsr", 
                "iot:CreatePolicy", 
                "iot:CreateThing", 
                "iot:DescribeCertificate", 
                "iot:DescribeThing", 
                "iot:DescribeThingGroup", 
                "iot:DescribeThingType", 
                "iot:DetachThingPrincipal", 
                "iot:GetPolicy", 
                "iot:ListPolicyPrincipals", 
                "iot:ListPrincipalPolicies", 
                "iot:ListPrincipalThings", 
                "iot:ListThingGroupsForThing", 
                "iot:ListThingPrincipals", 
                "iot:RegisterCertificate", 
                "iot:RegisterThing", 
                "iot:RemoveThingFromThingGroup", 
                "iot:UpdateCertificate", 
                "iot:UpdateThing", 
                "iot:UpdateThingGroupsForThing"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticbeanstalk:Check*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:RequestEnvironmentInfo", 
                "elasticbeanstalk:RetrieveEnvironmentInfo", 
                "ec2:Describe*", 
                "elasticloadbalancing:Describe*", 
                "autoscaling:Describe*", 
                "cloudwatch:Describe*", 
                "cloudwatch:List*", 
                "cloudwatch:Get*", 
                "s3:Get*", 
                "s3:List*", 
                "sns:Get*", 
                "sns:List*", 
                "cloudformation:Describe*", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:Validate*", 
                "cloudformation:Estimate*", 
                "rds:Describe*", 
                "sqs:Get*", 
                "sqs:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElementalMediaStoreReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mediastore:Get*", 
                "mediastore:List*", 
                "mediastore:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "Bool": {
                    "aws:SecureTransport": "true"
                }
            }
        }
    ]
}
Policy Name: AWSCertificateManagerReadOnly
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "acm:DescribeCertificate", 
            "acm:ListCertificates", 
            "acm:GetCertificate", 
            "acm:ListTagsForCertificate"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AWSQuicksightAthenaAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "athena:BatchGetQueryExecution", 
                "athena:CancelQueryExecution", 
                "athena:GetCatalogs", 
                "athena:GetExecutionEngine", 
                "athena:GetExecutionEngines", 
                "athena:GetNamespace", 
                "athena:GetNamespaces", 
                "athena:GetQueryExecution", 
                "athena:GetQueryExecutions", 
                "athena:GetQueryResults", 
                "athena:GetTable", 
                "athena:GetTables", 
                "athena:ListQueryExecutions", 
                "athena:RunQuery", 
                "athena:StartQueryExecution", 
                "athena:StopQueryExecution"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "glue:CreateDatabase", 
                "glue:DeleteDatabase", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:UpdateDatabase", 
                "glue:CreateTable", 
                "glue:DeleteTable", 
                "glue:BatchDeleteTable", 
                "glue:UpdateTable", 
                "glue:GetTable", 
                "glue:GetTables", 
                "glue:BatchCreatePartition", 
                "glue:CreatePartition", 
                "glue:DeletePartition", 
                "glue:BatchDeletePartition", 
                "glue:UpdatePartition", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:BatchGetPartition"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts", 
                "s3:AbortMultipartUpload", 
                "s3:CreateBucket", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-athena-query-results-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeCommitPowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codecommit:BatchGet*", 
                "codecommit:Get*", 
                "codecommit:List*", 
                "codecommit:Create*", 
                "codecommit:DeleteBranch", 
                "codecommit:Describe*", 
                "codecommit:Put*", 
                "codecommit:Post*", 
                "codecommit:Merge*", 
                "codecommit:Test*", 
                "codecommit:Update*", 
                "codecommit:GitPull", 
                "codecommit:GitPush"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "events:DeleteRule", 
                "events:DescribeRule", 
                "events:DisableRule", 
                "events:EnableRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "events:ListTargetsByRule"
            ], 
            "Resource": "arn:aws:events:*:*:rule/codecommit*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsCodeCommitRulesAccess"
        }, 
        {
            "Action": [
                "sns:Subscribe", 
                "sns:Unsubscribe"
            ], 
            "Resource": "arn:aws:sns:*:*:codecommit*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionAccess"
        }, 
        {
            "Action": [
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionReadAccess"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "LambdaReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListAccessKeys", 
                "iam:ListSSHPublicKeys", 
                "iam:ListServiceSpecificCredentials", 
                "iam:ListAccessKeys", 
                "iam:GetSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyConsoleAccess"
        }, 
        {
            "Action": [
                "iam:DeleteSSHPublicKey", 
                "iam:GetSSHPublicKey", 
                "iam:ListSSHPublicKeys", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMUserSSHKeys"
        }, 
        {
            "Action": [
                "iam:CreateServiceSpecificCredential", 
                "iam:UpdateServiceSpecificCredential", 
                "iam:DeleteServiceSpecificCredential", 
                "iam:ResetServiceSpecificCredential"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMSelfManageServiceSpecificCredentials"
        }
    ]
}
Policy Name: AWSCodeCommitFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codecommit:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "events:DeleteRule", 
                "events:DescribeRule", 
                "events:DisableRule", 
                "events:EnableRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "events:ListTargetsByRule"
            ], 
            "Resource": "arn:aws:events:*:*:rule/codecommit*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsCodeCommitRulesAccess"
        }, 
        {
            "Action": [
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sns:SetTopicAttributes"
            ], 
            "Resource": "arn:aws:sns:*:*:codecommit*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionAccess"
        }, 
        {
            "Action": [
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionReadAccess"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "LambdaReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListAccessKeys", 
                "iam:ListSSHPublicKeys", 
                "iam:ListServiceSpecificCredentials", 
                "iam:ListAccessKeys", 
                "iam:GetSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyConsoleAccess"
        }, 
        {
            "Action": [
                "iam:DeleteSSHPublicKey", 
                "iam:GetSSHPublicKey", 
                "iam:ListSSHPublicKeys", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMUserSSHKeys"
        }, 
        {
            "Action": [
                "iam:CreateServiceSpecificCredential", 
                "iam:UpdateServiceSpecificCredential", 
                "iam:DeleteServiceSpecificCredential", 
                "iam:ResetServiceSpecificCredential"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMSelfManageServiceSpecificCredentials"
        }
    ]
}
Policy Name: IAMSelfManageServiceSpecificCredentials
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:CreateServiceSpecificCredential", 
                "iam:ListServiceSpecificCredentials", 
                "iam:UpdateServiceSpecificCredential", 
                "iam:DeleteServiceSpecificCredential", 
                "iam:ResetServiceSpecificCredential"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEMRCleanupPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:TerminateInstances", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeVolumeStatus", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "ec2:DeleteVolume"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9EnvironmentMember
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloud9:GetUserSettings", 
                "cloud9:UpdateUserSettings", 
                "iam:GetUser", 
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloud9:DescribeEnvironmentMemberships"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "Null": {
                    "cloud9:UserArn": "true", 
                    "cloud9:EnvironmentId": "true"
                }
            }
        }
    ]
}
Policy Name: AWSApplicationAutoscalingSageMakerEndpointPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sagemaker:DescribeEndpoint", 
                "sagemaker:DescribeEndpointConfig", 
                "sagemaker:UpdateEndpointWeightsAndCapacities", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: FMSServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "waf:UpdateWebACL", 
                "waf:DeleteWebACL", 
                "waf:GetWebACL", 
                "waf-regional:UpdateWebACL", 
                "waf-regional:DeleteWebACL", 
                "waf-regional:GetWebACL", 
                "waf-regional:ListResourcesForWebACL", 
                "waf-regional:AssociateWebACL", 
                "waf-regional:DisassociateWebACL", 
                "elasticloadbalancing:SetWebACL"
            ], 
            "Resource": [
                "arn:aws:waf:*:*:webacl/*", 
                "arn:aws:waf-regional:*:*:webacl/*", 
                "arn:aws:waf:*:*:rulegroup/*", 
                "arn:aws:waf-regional:*:*:rulegroup/*", 
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "waf:CreateWebACL", 
                "waf-regional:CreateWebACL", 
                "waf:GetChangeToken", 
                "waf-regional:GetChangeToken"
            ], 
            "Resource": [
                "arn:aws:waf:*", 
                "arn:aws:waf-regional:*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "waf:PutPermissionPolicy", 
                "waf:GetPermissionPolicy", 
                "waf:DeletePermissionPolicy", 
                "waf-regional:PutPermissionPolicy", 
                "waf-regional:GetPermissionPolicy", 
                "waf-regional:DeletePermissionPolicy"
            ], 
            "Resource": [
                "arn:aws:waf:*:*:webacl/*", 
                "arn:aws:waf:*:*:rulegroup/*", 
                "arn:aws:waf-regional:*:*:webacl/*", 
                "arn:aws:waf-regional:*:*:rulegroup/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudfront:GetDistribution", 
                "cloudfront:UpdateDistribution", 
                "cloudfront:ListDistributionsByWebACLId"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "config:DescribeConfigurationRecorders", 
                "config:DescribeConfigurationRecorderStatus", 
                "config:PutConfigurationRecorder", 
                "config:StartConfigurationRecorder", 
                "config:PutDeliveryChannel", 
                "config:DescribeDeliveryChannels", 
                "config:DescribeDeliveryChannelStatus", 
                "config:DeleteConfigRule", 
                "config:DescribeComplianceByConfigRule", 
                "config:DescribeConfigRuleEvaluationStatus", 
                "config:DescribeConfigRules", 
                "config:GetComplianceDetailsByConfigRule", 
                "config:GetComplianceSummaryByConfigRule", 
                "config:GetDiscoveredResourceCounts", 
                "config:PutConfigRule", 
                "config:StartConfigRulesEvaluation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/fms.amazonaws.com/AWSServiceRoleForFMS"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "organizations:DescribeAccount", 
                "organizations:DescribeOrganization", 
                "organizations:ListAccounts"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSQSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sqs:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:Get*", 
                "a4b:List*", 
                "a4b:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeChangeSet", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStackResources", 
                "cloudwatch:*", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:GetCognitoEvents", 
                "cognito-sync:SetCognitoEvents", 
                "dynamodb:*", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "events:*", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListRolePolicies", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "iot:AttachPrincipalPolicy", 
                "iot:AttachThingPrincipal", 
                "iot:CreateKeysAndCertificate", 
                "iot:CreatePolicy", 
                "iot:CreateThing", 
                "iot:CreateTopicRule", 
                "iot:DescribeEndpoint", 
                "iot:GetTopicRule", 
                "iot:ListPolicies", 
                "iot:ListThings", 
                "iot:ListTopicRules", 
                "iot:ReplaceTopicRule", 
                "kinesis:DescribeStream", 
                "kinesis:ListStreams", 
                "kinesis:PutRecord", 
                "kms:ListAliases", 
                "lambda:*", 
                "logs:*", 
                "s3:*", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sns:Publish", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sqs:ListQueues", 
                "sqs:SendMessage", 
                "tag:GetResources", 
                "xray:PutTelemetryRecords", 
                "xray:PutTraceSegments"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTLogging
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:PutMetricFilter", 
                "logs:PutRetentionPolicy", 
                "logs:GetLogEvents", 
                "logs:DeleteLogStream"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2RoleforSSM
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:DescribeAssociation", 
                "ssm:GetDeployablePatchSnapshotForInstance", 
                "ssm:GetDocument", 
                "ssm:GetManifest", 
                "ssm:GetParameters", 
                "ssm:ListAssociations", 
                "ssm:ListInstanceAssociations", 
                "ssm:PutInventory", 
                "ssm:PutComplianceItems", 
                "ssm:PutConfigurePackageResult", 
                "ssm:UpdateAssociationStatus", 
                "ssm:UpdateInstanceAssociationStatus", 
                "ssm:UpdateInstanceInformation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2messages:AcknowledgeMessage", 
                "ec2messages:DeleteMessage", 
                "ec2messages:FailMessage", 
                "ec2messages:GetEndpoint", 
                "ec2messages:GetMessages", 
                "ec2messages:SendReply"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:PutMetricData"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeInstanceStatus"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ds:CreateComputer", 
                "ds:DescribeDirectories"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:GetObject", 
                "s3:AbortMultipartUpload", 
                "s3:ListMultipartUploadParts", 
                "s3:ListBucket", 
                "s3:ListBucketMultipartUploads"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudHSMRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:CreateTags", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DetachNetworkInterface"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSEnhancedClassicNetworkingMangementPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: IAMFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "iam:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonInspectorFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "inspector:*", 
                "ec2:DescribeInstances", 
                "ec2:DescribeTags", 
                "sns:ListTopics", 
                "events:DescribeRule", 
                "events:ListRuleNamesByTarget"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "inspector.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/inspector.amazonaws.com/AWSServiceRoleForAmazonInspector", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "inspector.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonElastiCacheFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "elasticache:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/elasticache.amazonaws.com/AWSServiceRoleForElastiCache", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "elasticache.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSAgentlessDiscoveryService
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "awsconnector:RegisterConnector", 
                "awsconnector:GetConnectorHealth"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:GetUser", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:ListBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::connector-platform-upgrade-info/*", 
                "arn:aws:s3:::connector-platform-upgrade-info", 
                "arn:aws:s3:::connector-platform-upgrade-bundles/*", 
                "arn:aws:s3:::connector-platform-upgrade-bundles", 
                "arn:aws:s3:::connector-platform-release-notes/*", 
                "arn:aws:s3:::connector-platform-release-notes", 
                "arn:aws:s3:::prod.agentless.discovery.connector.upgrade/*", 
                "arn:aws:s3:::prod.agentless.discovery.connector.upgrade"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:PutObjectAcl"
            ], 
            "Resource": [
                "arn:aws:s3:::import-to-ec2-connector-debug-logs/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "SNS:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "Discovery:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "Discovery"
        }, 
        {
            "Action": [
                "arsenal:RegisterOnPremisesAgent"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "arsenal"
        }
    ]
}
Policy Name: AWSXrayWriteOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "xray:PutTraceSegments", 
                "xray:PutTelemetryRecords"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSPriceListServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "pricing:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "autoscaling:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "autoscaling:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "cloudwatch:PutMetricAlarm", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeLaunchTemplateVersions", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcClassicLink"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "autoscaling.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonEC2RoleforAWSCodeDeploy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectVersion", 
                "s3:ListBucket"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMobileHub_ReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:DescribeTable", 
                "iam:ListSAMLProviders", 
                "lambda:ListFunctions", 
                "sns:ListTopics", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:GetBot", 
                "lex:GetBots", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases", 
                "mobilehub:ExportProject", 
                "mobilehub:GenerateProjectParameters", 
                "mobilehub:GetProject", 
                "mobilehub:GetProjectSnapshot", 
                "mobilehub:ListProjectSnapshots", 
                "mobilehub:ListAvailableConnectors", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "mobilehub:ValidateProject", 
                "mobilehub:VerifyServiceRole", 
                "mobilehub:DescribeBundle", 
                "mobilehub:ExportBundle", 
                "mobilehub:ListBundles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::*/aws-my-sample-app*.zip", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsBuiltInTargetExecutionAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:Describe*", 
                "ec2:RebootInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:CreateSnapshot"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsBuiltInTargetExecutionAccess"
        }
    ]
}
Policy Name: AutoScalingServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AttachClassicLinkVpc", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:Describe*", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RunInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "EC2InstanceManagement"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "ec2.amazonaws.com*"
                }
            }, 
            "Sid": "EC2InstanceProfileManagement"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "spot.amazonaws.com"
                }
            }, 
            "Sid": "EC2SpotManagement"
        }, 
        {
            "Action": [
                "elasticloadbalancing:Register*", 
                "elasticloadbalancing:Deregister*", 
                "elasticloadbalancing:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ELBManagement"
        }, 
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CWManagement"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSManagement"
        }
    ]
}
Policy Name: AmazonCloudDirectoryReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "clouddirectory:List*", 
                "clouddirectory:Get*", 
                "clouddirectory:LookupPolicy", 
                "clouddirectory:BatchRead"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchAgentAdminPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData", 
                "ec2:DescribeTags", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups", 
                "logs:CreateLogStream", 
                "logs:CreateLogGroup"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:GetParameter", 
                "ssm:PutParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "opsworks:*", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "iam:GetRolePolicy", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksCMInstanceProfileRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeStackResource", 
                "cloudformation:SignalResource"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:AbortMultipartUpload", 
                "s3:DeleteObject", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:ListMultipartUploadParts", 
                "s3:PutObject"
            ], 
            "Resource": "arn:aws:s3:::aws-opsworks-cm-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSBatchServiceEventTargetRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "batch:SubmitJob"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineApproverAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:GetPipeline", 
                "codepipeline:GetPipelineState", 
                "codepipeline:GetPipelineExecution", 
                "codepipeline:ListPipelineExecutions", 
                "codepipeline:ListPipelines", 
                "codepipeline:PutApprovalResult"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationDiscoveryAgentAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "arsenal:RegisterOnPremisesAgent"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ViewOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:ListCertificates", 
                "athena:List*", 
                "aws-marketplace:ViewSubscriptions", 
                "autoscaling:Describe*", 
                "batch:ListJobs", 
                "clouddirectory:ListAppliedSchemaArns", 
                "clouddirectory:ListDevelopmentSchemaArns", 
                "clouddirectory:ListDirectories", 
                "clouddirectory:ListPublishedSchemaArns", 
                "cloudformation:List*", 
                "cloudformation:DescribeStacks", 
                "cloudfront:List*", 
                "cloudhsm:ListAvailableZones", 
                "cloudhsm:ListLunaClients", 
                "cloudhsm:ListHapgs", 
                "cloudhsm:ListHsms", 
                "cloudsearch:List*", 
                "cloudsearch:DescribeDomains", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:LookupEvents", 
                "cloudwatch:List*", 
                "cloudwatch:GetMetricData", 
                "codebuild:ListBuilds*", 
                "codebuild:ListProjects", 
                "codecommit:List*", 
                "codedeploy:List*", 
                "codedeploy:Get*", 
                "codepipeline:ListPipelines", 
                "codestar:List*", 
                "codestar:Verify*", 
                "cognito-idp:List*", 
                "cognito-identity:ListIdentities", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:ListDatasets", 
                "connect:List*", 
                "config:List*", 
                "config:Describe*", 
                "datapipeline:ListPipelines", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetAccountLimits", 
                "devicefarm:List*", 
                "directconnect:Describe*", 
                "discovery:List*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListTables", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeBundleTasks", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeHost*", 
                "ec2:DescribeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeImage*", 
                "ec2:DescribeImport*", 
                "ec2:DescribeInstance*", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetwork*", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeReserved*", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshot*", 
                "ec2:DescribeSpot*", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolume*", 
                "ec2:DescribeVpc*", 
                "ec2:DescribeVpnGateways", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:List*", 
                "ecs:Describe*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:DescribeApplicationVersions", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticbeanstalk:ListAvailableSolutionStacks", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "es:DescribeElasticsearchDomain", 
                "es:DescribeElasticsearchDomains", 
                "es:ListDomainNames", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "firehose:List*", 
                "firehose:DescribeDeliveryStream", 
                "gamelift:List*", 
                "glacier:List*", 
                "iam:List*", 
                "iam:GetAccountSummary", 
                "iam:GetLoginProfile", 
                "importexport:ListJobs", 
                "inspector:List*", 
                "iot:List*", 
                "kinesis:ListStreams", 
                "kinesisanalytics:ListApplications", 
                "kms:ListKeys", 
                "lambda:List*", 
                "lex:GetBotAliases", 
                "lex:GetBotChannelAssociations", 
                "lex:GetBots", 
                "lex:GetBotVersions", 
                "lex:GetIntents", 
                "lex:GetIntentVersions", 
                "lex:GetSlotTypes", 
                "lex:GetSlotTypeVersions", 
                "lex:GetUtterancesView", 
                "lightsail:GetBlueprints", 
                "lightsail:GetBundles", 
                "lightsail:GetInstances", 
                "lightsail:GetInstanceSnapshots", 
                "lightsail:GetKeyPair", 
                "lightsail:GetRegions", 
                "lightsail:GetStaticIps", 
                "lightsail:IsVpcPeered", 
                "logs:Describe*", 
                "machinelearning:Describe*", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "opsworks:Describe*", 
                "opsworks-cm:Describe*", 
                "organizations:List*", 
                "mobiletargeting:GetApplicationSettings", 
                "mobiletargeting:GetCampaigns", 
                "mobiletargeting:GetImportJobs", 
                "mobiletargeting:GetSegments", 
                "polly:Describe*", 
                "polly:List*", 
                "rds:Describe*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeEvents", 
                "redshift:ViewQueriesInConsole", 
                "route53:List*", 
                "route53:Get*", 
                "route53domains:List*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "sdb:List*", 
                "servicecatalog:List*", 
                "ses:List*", 
                "shield:List*", 
                "states:ListActivities", 
                "states:ListStateMachines", 
                "sns:List*", 
                "sqs:ListQueues", 
                "ssm:ListAssociations", 
                "ssm:ListDocuments", 
                "storagegateway:ListGateways", 
                "storagegateway:ListLocalDisks", 
                "storagegateway:ListVolumeRecoveryPoints", 
                "storagegateway:ListVolumes", 
                "swf:List*", 
                "trustedadvisor:Describe*", 
                "waf:List*", 
                "waf-regional:List*", 
                "workdocs:DescribeAvailableDirectories", 
                "workdocs:DescribeInstances", 
                "workmail:Describe*", 
                "workspaces:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkCrowdReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "crowd:GetTask"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CrowdApiReadOnlyAccess"
        }
    ]
}
Policy Name: AmazonElasticMapReduceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteTags", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSpotPriceHistory", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcs", 
                "ec2:DetachNetworkInterface", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RunInstances", 
                "ec2:TerminateInstances", 
                "ec2:DeleteVolume", 
                "ec2:DescribeVolumeStatus", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListInstanceProfiles", 
                "iam:ListRolePolicies", 
                "iam:PassRole", 
                "s3:CreateBucket", 
                "s3:Get*", 
                "s3:List*", 
                "sdb:BatchPutAttributes", 
                "sdb:Select", 
                "sqs:CreateQueue", 
                "sqs:Delete*", 
                "sqs:GetQueue*", 
                "sqs:PurgeQueue", 
                "sqs:ReceiveMessage", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms", 
                "application-autoscaling:RegisterScalableTarget", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "spot.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonRoute53DomainsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53domains:Get*", 
                "route53domains:List*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMAutomationApproverAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:DescribeAutomationExecutions", 
                "ssm:GetAutomationExecution", 
                "ssm:SendAutomationSignal"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "iam:GetRolePolicy", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "iam:PassRole", 
                "opsworks:*", 
                "rds:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigRoleForOrganizations
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "organizations:ListAccounts", 
                "organizations:DescribeOrganization", 
                "organizations:ListAWSServiceAccessForOrganization"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ApplicationAutoScalingForAmazonAppStreamAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:UpdateFleet", 
                "appstream:DescribeFleets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DescribeAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerRegistryFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:*", 
                "cloudtrail:LookupEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: SimpleWorkflowFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "swf:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: GreengrassOTAUpdateArtifactAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::eu-central-1-greengrass-updates/*", 
                "arn:aws:s3:::us-east-1-greengrass-updates/*", 
                "arn:aws:s3:::ap-northeast-1-greengrass-updates/*", 
                "arn:aws:s3:::us-west-2-greengrass-updates/*", 
                "arn:aws:s3:::ap-southeast-2-greengrass-updates/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowsIotToAccessGreengrassOTAUpdateArtifacts"
        }
    ]
}
Policy Name: AmazonS3FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "s3:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStorageGatewayReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "storagegateway:List*", 
                "storagegateway:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeSnapshots"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: Billing
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-portal:*Billing", 
                "awsbillingconsole:*Billing", 
                "aws-portal:*Usage", 
                "awsbillingconsole:*Usage", 
                "aws-portal:*PaymentMethods", 
                "awsbillingconsole:*PaymentMethods", 
                "budgets:ViewBudget", 
                "budgets:ModifyBudget", 
                "cur:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: QuickSightAccessForS3StorageManagementAnalyticsReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectMetadata"
            ], 
            "Resource": [
                "arn:aws:s3:::s3-analytics-export-shared-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetAnalyticsConfiguration", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketLocation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerRegistryReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:GetRepositoryPolicy", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecr:DescribeImages", 
                "ecr:BatchGetImage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticMapReduceforEC2Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "dynamodb:*", 
                "ec2:Describe*", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:ListBootstrapActions", 
                "elasticmapreduce:ListClusters", 
                "elasticmapreduce:ListInstanceGroups", 
                "elasticmapreduce:ListInstances", 
                "elasticmapreduce:ListSteps", 
                "kinesis:CreateStream", 
                "kinesis:DeleteStream", 
                "kinesis:DescribeStream", 
                "kinesis:GetRecords", 
                "kinesis:GetShardIterator", 
                "kinesis:MergeShards", 
                "kinesis:PutRecord", 
                "kinesis:SplitShard", 
                "rds:Describe*", 
                "s3:*", 
                "sdb:*", 
                "sns:*", 
                "sqs:*", 
                "glue:CreateDatabase", 
                "glue:UpdateDatabase", 
                "glue:DeleteDatabase", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:CreateTable", 
                "glue:UpdateTable", 
                "glue:DeleteTable", 
                "glue:GetTable", 
                "glue:GetTables", 
                "glue:GetTableVersions", 
                "glue:CreatePartition", 
                "glue:BatchCreatePartition", 
                "glue:UpdatePartition", 
                "glue:DeletePartition", 
                "glue:BatchDeletePartition", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:BatchGetPartition", 
                "glue:CreateUserDefinedFunction", 
                "glue:UpdateUserDefinedFunction", 
                "glue:DeleteUserDefinedFunction", 
                "glue:GetUserDefinedFunction", 
                "glue:GetUserDefinedFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DatabaseAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:Describe*", 
                "cloudwatch:DisableAlarmActions", 
                "cloudwatch:EnableAlarmActions", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "cloudwatch:PutMetricAlarm", 
                "datapipeline:ActivatePipeline", 
                "datapipeline:CreatePipeline", 
                "datapipeline:DeletePipeline", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:PutPipelineDefinition", 
                "datapipeline:QueryObjects", 
                "dynamodb:*", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "elasticache:*", 
                "iam:ListRoles", 
                "iam:GetRole", 
                "kms:ListKeys", 
                "lambda:CreateEventSourceMapping", 
                "lambda:CreateFunction", 
                "lambda:DeleteEventSourceMapping", 
                "lambda:DeleteFunction", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListEventSourceMappings", 
                "lambda:ListFunctions", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:FilterLogEvents", 
                "logs:GetLogEvents", 
                "logs:Create*", 
                "logs:PutLogEvents", 
                "logs:PutMetricFilter", 
                "rds:*", 
                "redshift:*", 
                "s3:CreateBucket", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:Get*", 
                "sns:List*", 
                "sns:SetTopicAttributes", 
                "sns:Subscribe", 
                "sns:Unsubscribe"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:AbortMultipartUpload", 
                "s3:DeleteObject*", 
                "s3:Get*", 
                "s3:List*", 
                "s3:PutAccelerateConfiguration", 
                "s3:PutBucketTagging", 
                "s3:PutBucketVersioning", 
                "s3:PutBucketWebsite", 
                "s3:PutLifecycleConfiguration", 
                "s3:PutReplicationConfiguration", 
                "s3:PutObject*", 
                "s3:Replicate*", 
                "s3:RestoreObject"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/rds-monitoring-role", 
                "arn:aws:iam::*:role/rdbms-lambda-access", 
                "arn:aws:iam::*:role/lambda_exec_role", 
                "arn:aws:iam::*:role/lambda-dynamodb-*", 
                "arn:aws:iam::*:role/lambda-vpc-execution-role", 
                "arn:aws:iam::*:role/DataPipelineDefaultRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRedshiftReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "redshift:Describe*", 
                "redshift:ViewQueriesInConsole", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "sns:Get*", 
                "sns:List*", 
                "cloudwatch:Describe*", 
                "cloudwatch:List*", 
                "cloudwatch:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "ec2:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:ListMetrics", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchAgentServerPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData", 
                "ec2:DescribeTags", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups", 
                "logs:CreateLogStream", 
                "logs:CreateLogGroup"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:GetParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSXrayReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "xray:BatchGetTraces", 
                "xray:GetServiceGraph", 
                "xray:GetTraceGraph", 
                "xray:GetTraceSummaries"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkEnhancedHealth
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:GetConsoleOutput", 
                "ec2:AssociateAddress", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeSecurityGroups", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:DescribeNotificationConfigurations", 
                "sns:Publish"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:DescribeLogStreams", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*:log-stream:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticMapReduceReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:List*", 
                "elasticmapreduce:ViewEventsFromAllClustersInConsole", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "sdb:Select", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDirectoryServiceReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:Check*", 
                "ds:Describe*", 
                "ds:Get*", 
                "ds:List*", 
                "ds:Verify*", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "sns:ListTopics", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGuardDutyServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:DescribeImages"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonVPCReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeEgressOnlyInternetGateways", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroupReferences", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeStaleSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeVpcClassicLinkDnsSupport", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointConnectionNotifications", 
                "ec2:DescribeVpcEndpointConnections", 
                "ec2:DescribeVpcEndpointServiceConfigurations", 
                "ec2:DescribeVpcEndpointServicePermissions", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeStackResource", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awseb-*", 
                "arn:aws:cloudformation:*:*:stack/eb-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCloudformationReadOperationsOnElasticBeanstalkStacks"
        }, 
        {
            "Action": [
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:DescribeNotificationConfigurations", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:PutNotificationConfiguration", 
                "ec2:DescribeInstanceStatus", 
                "ec2:AssociateAddress", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "sns:Publish"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowOperations"
        }, 
        {
            "Action": [
                "logs:DescribeLogStreams", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*:log-stream:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "events:DescribeRule", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "events:TestEventPattern", 
                "events:DescribeEventBus"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsReadOnlyAccess"
        }
    ]
}
Policy Name: AWSLambdaReplicator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:DisableReplication"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:*"
            ], 
            "Effect": "Allow", 
            "Sid": "LambdaCreateDeletePermission"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLikeIfExists": {
                    "iam:PassedToService": "lambda.amazonaws.com"
                }
            }, 
            "Sid": "IamPassRolePermission"
        }, 
        {
            "Action": [
                "cloudfront:ListDistributionsByLambdaFunction"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudFrontListDistributions"
        }
    ]
}
Policy Name: AmazonAPIGatewayInvokeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "execute-api:Invoke"
            ], 
            "Resource": "arn:aws:execute-api:*:*:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSSSOServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:AttachRolePolicy", 
                "iam:CreateRole", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DetachRolePolicy", 
                "iam:GetRole", 
                "iam:ListRolePolicies", 
                "iam:PutRolePolicy", 
                "iam:ListAttachedRolePolicies"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListRoles"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "ListRolesInTheAccount"
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus", 
                "iam:DeleteRole", 
                "iam:GetRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDeletionOfServiceLinkedRoleForPeregrine"
        }, 
        {
            "Action": [
                "iam:CreateSAMLProvider", 
                "iam:GetSAMLProvider", 
                "iam:UpdateSAMLProvider", 
                "iam:DeleteSAMLProvider"
            ], 
            "Resource": [
                "arn:aws:iam::*:saml-provider/AWSSSO_*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "organizations:DescribeAccount", 
                "organizations:DescribeOrganization", 
                "organizations:ListAccounts"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisAnalyticsReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesisanalytics:Describe*", 
                "kinesisanalytics:Get*", 
                "kinesisanalytics:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesis:DescribeStream", 
                "kinesis:ListStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "firehose:DescribeDeliveryStream", 
                "firehose:ListDeliveryStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "logs:GetLogEvents", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListPolicyVersions", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "mobileanalytics:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMobileHub_FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "apigateway:GET", 
                "apigateway:GetRestApis", 
                "apigateway:GetResources", 
                "apigateway:POST", 
                "apigateway:TestInvokeMethod", 
                "cloudfront:GetDistribution", 
                "devicefarm:CreateProject", 
                "devicefarm:ListJobs", 
                "devicefarm:ListRuns", 
                "devicefarm:GetProject", 
                "devicefarm:GetRun", 
                "devicefarm:ListArtifacts", 
                "devicefarm:ListProjects", 
                "devicefarm:ScheduleRun", 
                "dynamodb:DescribeTable", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "iam:ListSAMLProviders", 
                "lambda:ListFunctions", 
                "sns:ListTopics", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:GetBot", 
                "lex:GetBots", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases", 
                "mobilehub:CreateProject", 
                "mobilehub:DeleteProject", 
                "mobilehub:UpdateProject", 
                "mobilehub:ExportProject", 
                "mobilehub:ImportProject", 
                "mobilehub:SynchronizeProject", 
                "mobilehub:GenerateProjectParameters", 
                "mobilehub:GetProject", 
                "mobilehub:GetProjectSnapshot", 
                "mobilehub:ListProjectSnapshots", 
                "mobilehub:DeleteProjectSnapshot", 
                "mobilehub:ListAvailableConnectors", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "mobilehub:ValidateProject", 
                "mobilehub:VerifyServiceRole", 
                "mobilehub:DescribeBundle", 
                "mobilehub:ExportBundle", 
                "mobilehub:ListBundles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::*/aws-my-sample-app*.zip", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject"
            ], 
            "Resource": "arn:aws:s3:::*-mobilehub-*/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:ListBucket"
            ], 
            "Resource": "arn:aws:s3:::*-mobilehub-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAPIGatewayPushToCloudWatchLogs
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:PutLogEvents", 
                "logs:GetLogEvents", 
                "logs:FilterLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDataPipelineRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "datapipeline:DescribeObjects", 
                "datapipeline:EvaluateExpression", 
                "dynamodb:BatchGetItem", 
                "dynamodb:DescribeTable", 
                "dynamodb:GetItem", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "dynamodb:UpdateTable", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:Describe*", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:DeleteSecurityGroup", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DetachNetworkInterface", 
                "elasticmapreduce:*", 
                "iam:GetInstanceProfile", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListRolePolicies", 
                "iam:ListInstanceProfiles", 
                "iam:PassRole", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "s3:CreateBucket", 
                "s3:DeleteObject", 
                "s3:Get*", 
                "s3:List*", 
                "s3:Put*", 
                "sdb:BatchPutAttributes", 
                "sdb:Select*", 
                "sns:GetTopicAttributes", 
                "sns:ListTopics", 
                "sns:Publish", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sqs:CreateQueue", 
                "sqs:Delete*", 
                "sqs:GetQueue*", 
                "sqs:PurgeQueue", 
                "sqs:ReceiveMessage"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "elasticmapreduce.amazonaws.com", 
                        "spot.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: CloudWatchFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "cloudwatch:*", 
                "logs:*", 
                "sns:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "events.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSDeepLensLambdaFunctionAccessPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListBucket", 
                "s3:GetObject", 
                "s3:ListObjects"
            ], 
            "Resource": [
                "arn:aws:s3:::deeplens*/*", 
                "arn:aws:s3:::deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensS3ObjectAccess"
        }, 
        {
            "Action": [
                "logs:CreateLogStream", 
                "logs:DescribeLogStreams", 
                "logs:PutLogEvents", 
                "logs:CreateLogGroup"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/greengrass/*", 
            "Effect": "Allow", 
            "Sid": "DeepLensGreenGrassCloudWatchAccess"
        }, 
        {
            "Action": [
                "deeplens:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAccess"
        }, 
        {
            "Action": [
                "acuity:CreateStream", 
                "acuity:DescribeStream", 
                "acuity:DeleteStream", 
                "acuity:PutMedia"
            ], 
            "Resource": [
                "arn:aws:acuity:*:*:stream/deeplens*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityStreamAccess"
        }, 
        {
            "Action": [
                "acuity:GetDataEndpoint"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityEndpointAccess"
        }
    ]
}
Policy Name: AmazonGuardDutyFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "guardduty:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "guardduty.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonRDSDirectoryServiceAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:DescribeDirectories", 
                "ds:AuthorizeApplication", 
                "ds:UnauthorizeApplication"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:GetPipeline", 
                "codepipeline:GetPipelineState", 
                "codepipeline:GetPipelineExecution", 
                "codepipeline:ListPipelineExecutions", 
                "codepipeline:ListActionTypes", 
                "codepipeline:ListPipelines", 
                "iam:ListRoles", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "codecommit:ListBranches", 
                "codecommit:ListRepositories", 
                "codedeploy:GetApplication", 
                "codedeploy:GetDeploymentGroup", 
                "codedeploy:ListApplications", 
                "codedeploy:ListDeploymentGroups", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListFunctions", 
                "opsworks:DescribeApps", 
                "opsworks:DescribeLayers", 
                "opsworks:DescribeStacks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:Describe*", 
                "acm:Get*", 
                "acm:List*", 
                "apigateway:GET", 
                "application-autoscaling:Describe*", 
                "autoscaling-plans:Describe*", 
                "appstream:Describe*", 
                "appstream:Get*", 
                "appstream:List*", 
                "athena:List*", 
                "athena:Batch*", 
                "athena:Get*", 
                "autoscaling:Describe*", 
                "batch:List*", 
                "batch:Describe*", 
                "cloud9:Describe*", 
                "cloud9:List*", 
                "clouddirectory:List*", 
                "clouddirectory:BatchRead", 
                "clouddirectory:Get*", 
                "clouddirectory:LookupPolicy", 
                "cloudformation:Describe*", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:Estimate*", 
                "cloudformation:Preview*", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "cloudhsm:List*", 
                "cloudhsm:Describe*", 
                "cloudhsm:Get*", 
                "cloudsearch:Describe*", 
                "cloudsearch:List*", 
                "cloudtrail:Describe*", 
                "cloudtrail:Get*", 
                "cloudtrail:List*", 
                "cloudtrail:LookupEvents", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "codebuild:BatchGet*", 
                "codebuild:List*", 
                "codecommit:BatchGet*", 
                "codecommit:Get*", 
                "codecommit:GitPull", 
                "codecommit:List*", 
                "codedeploy:BatchGet*", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codepipeline:List*", 
                "codepipeline:Get*", 
                "codestar:List*", 
                "codestar:Describe*", 
                "codestar:Get*", 
                "codestar:Verify*", 
                "cognito-identity:List*", 
                "cognito-identity:Describe*", 
                "cognito-identity:Lookup*", 
                "cognito-sync:List*", 
                "cognito-sync:Describe*", 
                "cognito-sync:Get*", 
                "cognito-sync:QueryRecords", 
                "cognito-idp:AdminList*", 
                "cognito-idp:List*", 
                "cognito-idp:Describe*", 
                "cognito-idp:Get*", 
                "config:Deliver*", 
                "config:Describe*", 
                "config:Get*", 
                "config:List*", 
                "connect:List*", 
                "connect:Describe*", 
                "connect:Get*", 
                "datapipeline:Describe*", 
                "datapipeline:EvaluateExpression", 
                "datapipeline:Get*", 
                "datapipeline:List*", 
                "datapipeline:QueryObjects", 
                "datapipeline:Validate*", 
                "directconnect:Describe*", 
                "devicefarm:List*", 
                "devicefarm:Get*", 
                "discovery:Describe*", 
                "discovery:List*", 
                "discovery:Get*", 
                "dms:Describe*", 
                "dms:List*", 
                "dms:Test*", 
                "ds:Check*", 
                "ds:Describe*", 
                "ds:Get*", 
                "ds:List*", 
                "ds:Verify*", 
                "dynamodb:BatchGet*", 
                "dynamodb:Describe*", 
                "dynamodb:Get*", 
                "dynamodb:List*", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "ec2:Describe*", 
                "ec2:Get*", 
                "ec2messages:Get*", 
                "ecr:BatchCheck*", 
                "ecr:BatchGet*", 
                "ecr:Describe*", 
                "ecr:Get*", 
                "ecr:List*", 
                "ecs:Describe*", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticache:List*", 
                "elasticbeanstalk:Check*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:Request*", 
                "elasticbeanstalk:Retrieve*", 
                "elasticbeanstalk:Validate*", 
                "elasticfilesystem:Describe*", 
                "elasticloadbalancing:Describe*", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:List*", 
                "elasticmapreduce:View*", 
                "elastictranscoder:List*", 
                "elastictranscoder:Read*", 
                "es:Describe*", 
                "es:List*", 
                "es:ESHttpGet", 
                "es:ESHttpHead", 
                "events:Describe*", 
                "events:List*", 
                "events:Test*", 
                "firehose:Describe*", 
                "firehose:List*", 
                "gamelift:List*", 
                "gamelift:Get*", 
                "gamelift:Describe*", 
                "gamelift:RequestUploadCredentials", 
                "gamelift:ResolveAlias", 
                "gamelift:Search*", 
                "glacier:List*", 
                "glacier:Describe*", 
                "glacier:Get*", 
                "guardduty:Get*", 
                "guardduty:List*", 
                "health:Describe*", 
                "health:Get*", 
                "health:List*", 
                "iam:Generate*", 
                "iam:Get*", 
                "iam:List*", 
                "iam:Simulate*", 
                "importexport:Get*", 
                "importexport:List*", 
                "inspector:Describe*", 
                "inspector:Get*", 
                "inspector:List*", 
                "inspector:Preview*", 
                "inspector:LocalizeText", 
                "iot:Describe*", 
                "iot:Get*", 
                "iot:List*", 
                "kinesisanalytics:Describe*", 
                "kinesisanalytics:Discover*", 
                "kinesisanalytics:Get*", 
                "kinesisanalytics:List*", 
                "kinesis:Describe*", 
                "kinesis:Get*", 
                "kinesis:List*", 
                "kms:Describe*", 
                "kms:Get*", 
                "kms:List*", 
                "lambda:List*", 
                "lambda:Get*", 
                "lex:Get*", 
                "lightsail:Get*", 
                "lightsail:Is*", 
                "lightsail:Download*", 
                "logs:Describe*", 
                "logs:Get*", 
                "logs:FilterLogEvents", 
                "logs:ListTagsLogGroup", 
                "logs:TestMetricFilter", 
                "machinelearning:Describe*", 
                "machinelearning:Get*", 
                "mobileanalytics:Get*", 
                "mobilehub:Describe*", 
                "mobilehub:Export*", 
                "mobilehub:Generate*", 
                "mobilehub:Get*", 
                "mobilehub:List*", 
                "mobilehub:Validate*", 
                "mobilehub:Verify*", 
                "mobiletargeting:Get*", 
                "opsworks:Describe*", 
                "opsworks:Get*", 
                "opsworks-cm:Describe*", 
                "organizations:Describe*", 
                "organizations:List*", 
                "polly:Describe*", 
                "polly:Get*", 
                "polly:List*", 
                "polly:SynthesizeSpeech", 
                "rekognition:CompareFaces", 
                "rekognition:Detect*", 
                "rekognition:List*", 
                "rekognition:Search*", 
                "rds:Describe*", 
                "rds:List*", 
                "rds:Download*", 
                "redshift:Describe*", 
                "redshift:View*", 
                "redshift:Get*", 
                "resource-groups:Describe*", 
                "resource-groups:Get*", 
                "resource-groups:List*", 
                "resource-groups:Search*", 
                "route53:Get*", 
                "route53:List*", 
                "route53:Test*", 
                "route53domains:Check*", 
                "route53domains:Get*", 
                "route53domains:List*", 
                "route53domains:View*", 
                "s3:Get*", 
                "s3:List*", 
                "s3:Head*", 
                "sdb:Get*", 
                "sdb:List*", 
                "sdb:Select*", 
                "servicecatalog:List*", 
                "servicecatalog:Scan*", 
                "servicecatalog:Search*", 
                "servicecatalog:Describe*", 
                "ses:Get*", 
                "ses:List*", 
                "ses:Describe*", 
                "ses:Verify*", 
                "shield:Describe*", 
                "shield:List*", 
                "snowball:Get*", 
                "snowball:Describe*", 
                "snowball:List*", 
                "sns:Get*", 
                "sns:List*", 
                "sns:Check*", 
                "sqs:Get*", 
                "sqs:List*", 
                "sqs:Receive*", 
                "ssm:Describe*", 
                "ssm:Get*", 
                "ssm:List*", 
                "states:List*", 
                "states:Describe*", 
                "states:GetExecutionHistory", 
                "storagegateway:Describe*", 
                "storagegateway:List*", 
                "sts:Get*", 
                "swf:Count*", 
                "swf:Describe*", 
                "swf:Get*", 
                "swf:List*", 
                "tag:Get*", 
                "trustedadvisor:Describe*", 
                "waf:Get*", 
                "waf:List*", 
                "waf-regional:List*", 
                "waf-regional:Get*", 
                "workdocs:Describe*", 
                "workdocs:Get*", 
                "workdocs:CheckAlias", 
                "workmail:Describe*", 
                "workmail:Get*", 
                "workmail:List*", 
                "workmail:Search*", 
                "workspaces:Describe*", 
                "xray:BatchGet*", 
                "xray:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncInvokeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appsync:GraphQL", 
                "appsync:GetGraphqlApi", 
                "appsync:ListGraphqlApis", 
                "appsync:ListApiKeys"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningBatchPredictionsAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:CreateBatchPrediction", 
                "machinelearning:DeleteBatchPrediction", 
                "machinelearning:DescribeBatchPredictions", 
                "machinelearning:GetBatchPrediction", 
                "machinelearning:UpdateBatchPrediction"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSEC2SpotFleetServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:RunInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*", 
                "arn:aws:ec2:*:*:spot-instances-request/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:ec2spot:fleet-request-id": "*"
                }
            }
        }
    ]
}
Policy Name: AmazonRekognitionReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rekognition:CompareFaces", 
                "rekognition:DetectFaces", 
                "rekognition:DetectLabels", 
                "rekognition:ListCollections", 
                "rekognition:ListFaces", 
                "rekognition:SearchFaces", 
                "rekognition:SearchFacesByImage", 
                "rekognition:DetectText", 
                "rekognition:GetCelebrityInfo", 
                "rekognition:RecognizeCelebrities", 
                "rekognition:DetectModerationLabels", 
                "rekognition:GetLabelDetection", 
                "rekognition:GetFaceDetection", 
                "rekognition:GetContentModeration", 
                "rekognition:GetPersonTracking", 
                "rekognition:GetCelebrityRecognition", 
                "rekognition:GetFaceSearch", 
                "rekognition:DescribeStreamProcessor", 
                "rekognition:ListStreamProcessors"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codedeploy:Batch*", 
                "codedeploy:Get*", 
                "codedeploy:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudSearchFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudsearch:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudHSMFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "cloudhsm:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2SpotFleetAutoscaleRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeSpotFleetRequests", 
                "ec2:ModifySpotFleetRequest"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticLoadBalancingServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAddresses", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:AttachNetworkInterface", 
                "ec2:DetachNetworkInterface", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssignIpv6Addresses", 
                "ec2:UnassignIpv6Addresses"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeBuildDeveloperAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codebuild:StartBuild", 
                "codebuild:StopBuild", 
                "codebuild:BatchGet*", 
                "codebuild:Get*", 
                "codebuild:List*", 
                "codecommit:GetBranch", 
                "codecommit:GetCommit", 
                "codecommit:GetRepository", 
                "codecommit:ListBranches", 
                "s3:GetBucketLocation", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:PutParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ElastiCacheServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSGlueServiceNotebookRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glue:CreateDatabase", 
                "glue:CreatePartition", 
                "glue:CreateTable", 
                "glue:DeleteDatabase", 
                "glue:DeletePartition", 
                "glue:DeleteTable", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:GetTable", 
                "glue:GetTableVersions", 
                "glue:GetTables", 
                "glue:UpdateDatabase", 
                "glue:UpdatePartition", 
                "glue:UpdateTable", 
                "glue:CreateBookmark", 
                "glue:GetBookmark", 
                "glue:UpdateBookmark", 
                "glue:GetMetric", 
                "glue:PutMetric", 
                "glue:CreateConnection", 
                "glue:CreateJob", 
                "glue:DeleteConnection", 
                "glue:DeleteJob", 
                "glue:GetConnection", 
                "glue:GetConnections", 
                "glue:GetDevEndpoint", 
                "glue:GetDevEndpoints", 
                "glue:GetJob", 
                "glue:GetJobs", 
                "glue:UpdateJob", 
                "glue:BatchDeleteConnection", 
                "glue:UpdateConnection", 
                "glue:GetUserDefinedFunction", 
                "glue:UpdateUserDefinedFunction", 
                "glue:GetUserDefinedFunctions", 
                "glue:DeleteUserDefinedFunction", 
                "glue:CreateUserDefinedFunction", 
                "glue:BatchGetPartition", 
                "glue:BatchDeletePartition", 
                "glue:BatchCreatePartition", 
                "glue:BatchDeleteTable", 
                "glue:UpdateDevEndpoint", 
                "s3:GetBucketLocation", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketAcl"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::crawler-public*", 
                "arn:aws:s3:::aws-glue*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:DeleteObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:network-interface/*", 
                "arn:aws:ec2:*:*:security-group/*", 
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringEquals": {
                    "aws:TagKeys": [
                        "aws-glue-service-resource"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonEC2SpotFleetRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeInstanceStatus", 
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterTargets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDataPipeline_PowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:List*", 
                "dynamodb:DescribeTable", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "sns:ListTopics", 
                "iam:ListRoles", 
                "iam:GetRolePolicy", 
                "iam:GetInstanceProfile", 
                "iam:ListInstanceProfiles", 
                "datapipeline:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultRole"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderJobsSubmitter
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elastictranscoder:Read*", 
                "elastictranscoder:List*", 
                "elastictranscoder:*Job", 
                "elastictranscoder:*Preset", 
                "s3:List*", 
                "iam:List*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeStarServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "events:PutTargets", 
                "events:RemoveTargets", 
                "events:PutRule", 
                "events:DeleteRule", 
                "events:DescribeRule"
            ], 
            "Resource": [
                "arn:aws:events:*:*:rule/awscodestar-*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectEventRules"
        }, 
        {
            "Action": [
                "cloudformation:*Stack*", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:ExecuteChangeSet", 
                "cloudformation:DeleteChangeSet", 
                "cloudformation:GetTemplate"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awscodestar-*", 
                "arn:aws:cloudformation:*:*:stack/awseb-*", 
                "arn:aws:cloudformation:*:*:stack/aws-cloud9-*", 
                "arn:aws:cloudformation:*:aws:transform/CodeStar*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectStack"
        }, 
        {
            "Action": [
                "cloudformation:GetTemplateSummary", 
                "cloudformation:DescribeChangeSet"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ProjectStackTemplate"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::awscodestar-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectQuickstarts"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-codestar-*", 
                "arn:aws:s3:::aws-codestar-*/*", 
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectS3Buckets"
        }, 
        {
            "Action": [
                "codestar:*", 
                "codecommit:*", 
                "codepipeline:*", 
                "codedeploy:*", 
                "codebuild:*", 
                "ec2:RunInstances", 
                "autoscaling:*", 
                "cloudwatch:Put*", 
                "ec2:*", 
                "elasticbeanstalk:*", 
                "elasticloadbalancing:*", 
                "iam:ListRoles", 
                "logs:*", 
                "sns:*", 
                "cloud9:CreateEnvironmentEC2", 
                "cloud9:DeleteEnvironment", 
                "cloud9:DescribeEnvironment*", 
                "cloud9:ListEnvironments"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ProjectServices"
        }, 
        {
            "Action": [
                "iam:AttachRolePolicy", 
                "iam:CreateRole", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DetachRolePolicy", 
                "iam:GetRole", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:SetDefaultPolicyVersion", 
                "iam:CreatePolicy", 
                "iam:DeletePolicy", 
                "iam:AddRoleToInstanceProfile", 
                "iam:CreateInstanceProfile", 
                "iam:DeleteInstanceProfile", 
                "iam:RemoveRoleFromInstanceProfile"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/CodeStarWorker*", 
                "arn:aws:iam::*:policy/CodeStarWorker*", 
                "arn:aws:iam::*:instance-profile/awscodestar-*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectWorkerRoles"
        }, 
        {
            "Action": [
                "iam:AttachUserPolicy", 
                "iam:DetachUserPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "ArnEquals": {
                    "iam:PolicyArn": [
                        "arn:aws:iam::*:policy/CodeStar_*"
                    ]
                }
            }, 
            "Sid": "ProjectTeamMembers"
        }, 
        {
            "Action": [
                "iam:CreatePolicy", 
                "iam:DeletePolicy", 
                "iam:CreatePolicyVersion", 
                "iam:DeletePolicyVersion", 
                "iam:ListEntitiesForPolicy", 
                "iam:ListPolicyVersions"
            ], 
            "Resource": [
                "arn:aws:iam::*:policy/CodeStar_*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectRoles"
        }, 
        {
            "Action": [
                "iam:ListAttachedRolePolicies"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-codestar-service-role", 
                "arn:aws:iam::*:role/service-role/aws-codestar-service-role"
            ], 
            "Effect": "Allow", 
            "Sid": "InspectServiceRole"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "cloud9.amazonaws.com"
                }
            }, 
            "Sid": "IAMLinkRole"
        }, 
        {
            "Action": [
                "config:DescribeConfigRules"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DescribeConfigRuleForARN"
        }
    ]
}
Policy Name: AmazonTranscribeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "transcribe:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::*transcribe*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDirectoryServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:*", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:SetTopicAttributes", 
                "sns:Subscribe", 
                "sns:Unsubscribe"
            ], 
            "Resource": "arn:aws:sns:*:*:DirectoryMonitoring*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDynamoDBFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:*", 
                "dax:*", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget", 
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarmHistory", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics", 
                "cloudwatch:PutMetricAlarm", 
                "datapipeline:ActivatePipeline", 
                "datapipeline:CreatePipeline", 
                "datapipeline:DeletePipeline", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:PutPipelineDefinition", 
                "datapipeline:QueryObjects", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "iam:GetRole", 
                "iam:ListRoles", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sns:SetTopicAttributes", 
                "lambda:CreateFunction", 
                "lambda:ListFunctions", 
                "lambda:ListEventSourceMappings", 
                "lambda:CreateEventSourceMapping", 
                "lambda:DeleteEventSourceMapping", 
                "lambda:GetFunctionConfiguration", 
                "lambda:DeleteFunction"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "application-autoscaling.amazonaws.com", 
                        "dax.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": [
                        "replication.dynamodb.amazonaws.com", 
                        "dax.amazonaws.com", 
                        "dynamodb.application-autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonSESReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ses:Get*", 
                "ses:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSWAFReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "waf:Get*", 
                "waf:List*", 
                "waf-regional:Get*", 
                "waf-regional:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingNotificationAccessRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sqs:SendMessage", 
                "sqs:GetQueueUrl", 
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mechanicalturk:Get*", 
                "mechanicalturk:Search*", 
                "mechanicalturk:List*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaReplicatorInternal
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:DisableReplication"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:*"
            ], 
            "Effect": "Allow", 
            "Sid": "LambdaCreateDeletePermission"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLikeIfExists": {
                    "iam:PassedToService": [
                        "lambda.amazonaws.com", 
                        "lambda.beta.amazonaws.com", 
                        "lambda.gamma.amazonaws.com"
                    ]
                }
            }, 
            "Sid": "IamPassRolePermission"
        }, 
        {
            "Action": [
                "cloudfront:ListDistributionsByLambdaFunction"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudFrontListDistributions"
        }
    ]
}
Policy Name: AmazonKinesisReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesis:Get*", 
                "kinesis:List*", 
                "kinesis:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "codedeploy:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchActionsEC2Access
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:Describe*", 
                "ec2:Describe*", 
                "ec2:RebootInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaDynamoDBExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:DescribeStream", 
                "dynamodb:GetRecords", 
                "dynamodb:GetShardIterator", 
                "dynamodb:ListStreams", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53DomainsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:CreateHostedZone", 
                "route53domains:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElastiCacheReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticache:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRDSServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/rds/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAthenaFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "athena:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "glue:CreateDatabase", 
                "glue:DeleteDatabase", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:UpdateDatabase", 
                "glue:CreateTable", 
                "glue:DeleteTable", 
                "glue:BatchDeleteTable", 
                "glue:UpdateTable", 
                "glue:GetTable", 
                "glue:GetTables", 
                "glue:BatchCreatePartition", 
                "glue:CreatePartition", 
                "glue:DeletePartition", 
                "glue:BatchDeletePartition", 
                "glue:UpdatePartition", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:BatchGetPartition"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts", 
                "s3:AbortMultipartUpload", 
                "s3:CreateBucket", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-athena-query-results-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::athena-examples*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkCrowdFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "crowd:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CrowdApiFullAccess"
        }
    ]
}
Policy Name: AmazonElasticFileSystemReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "elasticfilesystem:Describe*", 
                "kms:ListAliases"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudFrontFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "arn:aws:s3:::*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "acm:ListCertificates", 
                "cloudfront:*", 
                "iam:ListServerCertificates", 
                "waf:ListWebACLs", 
                "waf:GetWebACL"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9Administrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloud9:*", 
                "iam:GetUser", 
                "iam:ListUsers", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "cloud9.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonMachineLearningRoleforRedshiftDataSource
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:RevokeSecurityGroupIngress", 
                "redshift:AuthorizeClusterSecurityGroupIngress", 
                "redshift:CreateClusterSecurityGroup", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "redshift:ModifyCluster", 
                "redshift:RevokeClusterSecurityGroupIngress", 
                "s3:GetBucketLocation", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:PutBucketPolicy", 
                "s3:PutObject"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingEMRInstanceGroupPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticmapreduce:ListInstanceGroups", 
                "elasticmapreduce:ModifyInstanceGroups", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOrganizationsServiceTrustPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:DeleteRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/organizations.amazonaws.com/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDeletionOfServiceLinkedRoleForOrganizations"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowCreationOfServiceLinkedRoles"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsNon-financialReportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "mobileanalytics:GetReports", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudTrailFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:AddPermission", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListTopics", 
                "sns:SetTopicAttributes", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:ListAllMyBuckets", 
                "s3:PutBucketPolicy", 
                "s3:ListBucket", 
                "s3:GetObject", 
                "s3:GetBucketLocation", 
                "s3:GetBucketPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "cloudtrail:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole", 
                "iam:ListRoles", 
                "iam:GetRolePolicy", 
                "iam:GetUser"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kms:ListKeys", 
                "kms:ListAliases"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCognitoDeveloperAuthenticatedIdentities
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-identity:GetOpenIdTokenForDeveloperIdentity", 
                "cognito-identity:LookupDeveloperIdentity", 
                "cognito-identity:MergeDeveloperIdentities", 
                "cognito-identity:UnlinkDeveloperIdentity"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudtrail:DescribeTrails", 
                "ec2:Describe*", 
                "config:Put*", 
                "config:Get*", 
                "config:List*", 
                "config:Describe*", 
                "cloudtrail:GetTrailStatus", 
                "s3:GetObject", 
                "iam:GetAccountAuthorizationDetails", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetGroup", 
                "iam:GetGroupPolicy", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:GetUser", 
                "iam:GetUserPolicy", 
                "iam:ListAttachedGroupPolicies", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListAttachedUserPolicies", 
                "iam:ListEntitiesForPolicy", 
                "iam:ListGroupPolicies", 
                "iam:ListGroupsForUser", 
                "iam:ListInstanceProfilesForRole", 
                "iam:ListPolicyVersions", 
                "iam:ListRolePolicies", 
                "iam:ListUserPolicies", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeLoadBalancerAttributes", 
                "elasticloadbalancing:DescribeLoadBalancerPolicies", 
                "elasticloadbalancing:DescribeTags", 
                "acm:DescribeCertificate", 
                "acm:ListCertificates", 
                "acm:ListTagsForCertificate", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "rds:DescribeDBSnapshotAttributes", 
                "rds:DescribeDBSnapshots", 
                "rds:DescribeDBSubnetGroups", 
                "rds:DescribeEventSubscriptions", 
                "rds:ListTagsForResource", 
                "rds:DescribeDBClusters", 
                "s3:GetAccelerateConfiguration", 
                "s3:GetBucketAcl", 
                "s3:GetBucketCORS", 
                "s3:GetBucketLocation", 
                "s3:GetBucketLogging", 
                "s3:GetBucketNotification", 
                "s3:GetBucketPolicy", 
                "s3:GetBucketRequestPayment", 
                "s3:GetBucketTagging", 
                "s3:GetBucketVersioning", 
                "s3:GetBucketWebsite", 
                "s3:GetLifecycleConfiguration", 
                "s3:GetReplicationConfiguration", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "redshift:DescribeClusterParameterGroups", 
                "redshift:DescribeClusterParameters", 
                "redshift:DescribeClusterSecurityGroups", 
                "redshift:DescribeClusterSnapshots", 
                "redshift:DescribeClusterSubnetGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeEventSubscriptions", 
                "redshift:DescribeLoggingStatus", 
                "dynamodb:DescribeLimits", 
                "dynamodb:DescribeTable", 
                "dynamodb:ListTables", 
                "dynamodb:ListTagsOfResource", 
                "cloudwatch:DescribeAlarms", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingPolicies", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLaunchConfigurations", 
                "autoscaling:DescribeLifecycleHooks", 
                "autoscaling:DescribePolicies", 
                "autoscaling:DescribeScheduledActions", 
                "autoscaling:DescribeTags", 
                "lambda:GetFunction", 
                "lambda:GetPolicy", 
                "lambda:ListFunctions", 
                "lambda:GetAlias", 
                "lambda:ListAliases", 
                "waf-regional:GetWebACLForResource", 
                "waf-regional:GetWebACL", 
                "cloudfront:ListTagsForResource"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingAppStreamFleetPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:UpdateFleet", 
                "appstream:DescribeFleets", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSGlueServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glue:*", 
                "s3:GetBucketLocation", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketAcl", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeRouteTables", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "iam:ListRolePolicies", 
                "iam:GetRole", 
                "iam:GetRolePolicy"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*/*", 
                "arn:aws:s3:::*/*aws-glue-*/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::crawler-public*", 
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:/aws-glue/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:network-interface/*", 
                "arn:aws:ec2:*:*:security-group/*", 
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringEquals": {
                    "aws:TagKeys": [
                        "aws-glue-service-resource"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonAppStreamServiceAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeSubnets", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:ListBucket", 
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject", 
                "s3:GetObjectVersion", 
                "s3:DeleteObjectVersion", 
                "s3:PutBucketPolicy"
            ], 
            "Resource": "arn:aws:s3:::appstream2-36fb080bb8-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRedshiftFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "redshift:*", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "sns:CreateTopic", 
                "sns:Get*", 
                "sns:List*", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:EnableAlarmActions", 
                "cloudwatch:DisableAlarmActions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/redshift.amazonaws.com/AWSServiceRoleForRedshift", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "redshift.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonZocaloReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "zocalo:Describe*", 
                "ds:DescribeDirectories", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudHSMReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudhsm:Get*", 
                "cloudhsm:List*", 
                "cloudhsm:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ComprehendFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "comprehend:*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "iam:ListRoles", 
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: SystemAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:Describe*", 
                "acm:Get*", 
                "acm:List*", 
                "acm:Request*", 
                "acm:Resend*", 
                "autoscaling:*", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:ListPublicKeys", 
                "cloudtrail:ListTags", 
                "cloudtrail:LookupEvents", 
                "cloudtrail:StartLogging", 
                "cloudtrail:StopLogging", 
                "cloudwatch:*", 
                "codecommit:BatchGetRepositories", 
                "codecommit:CreateBranch", 
                "codecommit:CreateRepository", 
                "codecommit:Get*", 
                "codecommit:GitPull", 
                "codecommit:GitPush", 
                "codecommit:List*", 
                "codecommit:Put*", 
                "codecommit:Test*", 
                "codecommit:Update*", 
                "codedeploy:*", 
                "codepipeline:*", 
                "config:*", 
                "ds:*", 
                "ec2:Allocate*", 
                "ec2:AssignPrivateIpAddresses*", 
                "ec2:Associate*", 
                "ec2:Allocate*", 
                "ec2:AttachInternetGateway", 
                "ec2:AttachNetworkInterface", 
                "ec2:AttachVpnGateway", 
                "ec2:Bundle*", 
                "ec2:Cancel*", 
                "ec2:Copy*", 
                "ec2:CreateCustomerGateway", 
                "ec2:CreateDhcpOptions", 
                "ec2:CreateFlowLogs", 
                "ec2:CreateImage", 
                "ec2:CreateInstanceExportTask", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateKeyPair", 
                "ec2:CreateNatGateway", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreatePlacementGroup", 
                "ec2:CreateReservedInstancesListing", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSnapshot", 
                "ec2:CreateSpotDatafeedSubscription", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:CreateVpc", 
                "ec2:CreateVpcEndpoint", 
                "ec2:CreateVpnConnection", 
                "ec2:CreateVpnConnectionRoute", 
                "ec2:CreateVpnGateway", 
                "ec2:DeleteFlowLogs", 
                "ec2:DeleteKeyPair", 
                "ec2:DeleteNatGateway", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeletePlacementGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteSpotDatafeedSubscription", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteTags", 
                "ec2:DeleteVpc", 
                "ec2:DeleteVpcEndpoints", 
                "ec2:DeleteVpnConnection", 
                "ec2:DeleteVpnConnectionRoute", 
                "ec2:DeleteVpnGateway", 
                "ec2:DeregisterImage", 
                "ec2:Describe*", 
                "ec2:DetachInternetGateway", 
                "ec2:DetachNetworkInterface", 
                "ec2:DetachVpnGateway", 
                "ec2:DisableVgwRoutePropagation", 
                "ec2:DisableVpcClassicLinkDnsSupport", 
                "ec2:DisassociateAddress", 
                "ec2:DisassociateRouteTable", 
                "ec2:EnableVgwRoutePropagation", 
                "ec2:EnableVolumeIO", 
                "ec2:EnableVpcClassicLinkDnsSupport", 
                "ec2:GetConsoleOutput", 
                "ec2:GetHostReservationPurchasePreview", 
                "ec2:GetPasswordData", 
                "ec2:Import*", 
                "ec2:Modify*", 
                "ec2:MonitorInstances", 
                "ec2:MoveAddressToVpc", 
                "ec2:Purchase*", 
                "ec2:RegisterImage", 
                "ec2:Release*", 
                "ec2:Replace*", 
                "ec2:ReportInstanceStatus", 
                "ec2:Request*", 
                "ec2:Reset*", 
                "ec2:RestoreAddressToClassic", 
                "ec2:RunScheduledInstances", 
                "ec2:UnassignPrivateIpAddresses", 
                "ec2:UnmonitorInstances", 
                "elasticloadbalancing:*", 
                "events:*", 
                "iam:GetAccount*", 
                "iam:GetContextKeys*", 
                "iam:GetCredentialReport", 
                "iam:ListAccountAliases", 
                "iam:ListGroups", 
                "iam:ListOpenIDConnectProviders", 
                "iam:ListPolicies", 
                "iam:ListPoliciesGrantingServiceAccess", 
                "iam:ListRoles", 
                "iam:ListSAMLProviders", 
                "iam:ListServerCertificates", 
                "iam:Simulate*", 
                "iam:UpdateServerCertificate", 
                "iam:UpdateSigningCertificate", 
                "kinesis:ListStreams", 
                "kinesis:PutRecord", 
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:Describe*", 
                "kms:GenerateRandom", 
                "kms:Get*", 
                "kms:List*", 
                "kms:Encrypt", 
                "kms:ReEncrypt*", 
                "lambda:Create*", 
                "lambda:Delete*", 
                "lambda:Get*", 
                "lambda:InvokeFunction", 
                "lambda:List*", 
                "lambda:PublishVersion", 
                "lambda:Update*", 
                "logs:*", 
                "rds:Describe*", 
                "rds:ListTagsForResource", 
                "route53:*", 
                "route53domains:*", 
                "ses:*", 
                "sns:*", 
                "sqs:*", 
                "trustedadvisor:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AcceptVpcPeeringConnection", 
                "ec2:AttachClassicLinkVpc", 
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateVpcPeeringConnection", 
                "ec2:DeleteCustomerGateway", 
                "ec2:DeleteDhcpOptions", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteNetworkAcl*", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteVolume", 
                "ec2:DeleteVpcPeeringConnection", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:DetachVolume", 
                "ec2:DisableVpcClassicLink", 
                "ec2:EnableVpcClassicLink", 
                "ec2:GetConsoleScreenshot", 
                "ec2:RebootInstances", 
                "ec2:RejectVpcPeeringConnection", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "s3:*", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetAccessKeyLastUsed", 
                "iam:GetGroup*", 
                "iam:GetInstanceProfile", 
                "iam:GetLoginProfile", 
                "iam:GetOpenIDConnectProvider", 
                "iam:GetPolicy*", 
                "iam:GetRole*", 
                "iam:GetSAMLProvider", 
                "iam:GetSSHPublicKey", 
                "iam:GetServerCertificate", 
                "iam:GetServiceLastAccessed*", 
                "iam:GetUser*", 
                "iam:ListAccessKeys", 
                "iam:ListAttached*", 
                "iam:ListEntitiesForPolicy", 
                "iam:ListGroupPolicies", 
                "iam:ListGroupsForUser", 
                "iam:ListInstanceProfiles*", 
                "iam:ListMFADevices", 
                "iam:ListPolicyVersions", 
                "iam:ListRolePolicies", 
                "iam:ListSSHPublicKeys", 
                "iam:ListSigningCertificates", 
                "iam:ListUserPolicies", 
                "iam:Upload*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:ListRoles", 
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/rds-monitoring-role", 
                "arn:aws:iam::*:role/ec2-sysadmin-*", 
                "arn:aws:iam::*:role/ecr-sysadmin-*", 
                "arn:aws:iam::*:role/lamdba-sysadmin-*", 
                "arn:aws:iam::*:role/lambda-sysadmin-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceEventsRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:RunTask"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:Get*", 
                "route53:List*", 
                "route53:TestDNSAnswer"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMigrationHubDiscoveryAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "discovery:ListConfigurations", 
                "discovery:DescribeConfigurations"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ReportsAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "ec2-reports:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceAutoscaleRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:DescribeServices", 
                "ecs:UpdateService"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncSchemaAuthor
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appsync:GraphQL", 
                "appsync:CreateResolver", 
                "appsync:CreateType", 
                "appsync:DeleteResolver", 
                "appsync:DeleteType", 
                "appsync:GetResolver", 
                "appsync:GetType", 
                "appsync:GetDataSource", 
                "appsync:GetSchemaCreationStatus", 
                "appsync:GetIntrospectionSchema", 
                "appsync:GetGraphqlApi", 
                "appsync:ListTypes", 
                "appsync:ListApiKeys", 
                "appsync:ListResolvers", 
                "appsync:ListDataSources", 
                "appsync:ListGraphqlApis", 
                "appsync:StartSchemaCreation", 
                "appsync:UpdateResolver", 
                "appsync:UpdateType"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessDeviceSetup
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:RegisterDevice", 
                "a4b:CompleteRegistration", 
                "a4b:SearchDevices"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSBatchServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeImages", 
                "ec2:DescribeImageAttribute", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSpotFleetInstances", 
                "ec2:DescribeSpotFleetRequests", 
                "ec2:DescribeSpotPriceHistory", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:RequestSpotFleet", 
                "ec2:CancelSpotFleetRequests", 
                "ec2:ModifySpotFleetRequest", 
                "ec2:TerminateInstances", 
                "autoscaling:DescribeAccountLimits", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLaunchConfigurations", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:CreateLaunchConfiguration", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:UpdateAutoScalingGroup", 
                "autoscaling:SetDesiredCapacity", 
                "autoscaling:DeleteLaunchConfiguration", 
                "autoscaling:DeleteAutoScalingGroup", 
                "autoscaling:CreateOrUpdateTags", 
                "autoscaling:SuspendProcesses", 
                "autoscaling:PutNotificationConfiguration", 
                "autoscaling:TerminateInstanceInAutoScalingGroup", 
                "ecs:DescribeClusters", 
                "ecs:DescribeContainerInstances", 
                "ecs:DescribeTaskDefinition", 
                "ecs:DescribeTasks", 
                "ecs:ListClusters", 
                "ecs:ListContainerInstances", 
                "ecs:ListTaskDefinitionFamilies", 
                "ecs:ListTaskDefinitions", 
                "ecs:ListTasks", 
                "ecs:CreateCluster", 
                "ecs:DeleteCluster", 
                "ecs:RegisterTaskDefinition", 
                "ecs:DeregisterTaskDefinition", 
                "ecs:RunTask", 
                "ecs:StartTask", 
                "ecs:StopTask", 
                "ecs:UpdateContainerAgent", 
                "ecs:DeregisterContainerInstance", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogGroups", 
                "iam:GetInstanceProfile", 
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ecs-tasks.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": [
                        "spot.amazonaws.com", 
                        "spotfleet.amazonaws.com", 
                        "autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AWSElasticBeanstalkWebTier
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:Get*", 
                "s3:List*", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "BucketAccess"
        }, 
        {
            "Action": [
                "xray:PutTraceSegments", 
                "xray:PutTelemetryRecords"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "XRayAccess"
        }, 
        {
            "Action": [
                "logs:PutLogEvents", 
                "logs:CreateLogStream", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudWatchLogsAccess"
        }
    ]
}
Policy Name: AmazonSQSReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sqs:GetQueueAttributes", 
                "sqs:ListQueues"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMobileHub_ServiceUseOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateUploadBucket", 
                "cloudformation:ListStacks", 
                "cloudformation:ValidateTemplate", 
                "cloudfront:CreateDistribution", 
                "cloudfront:DeleteDistribution", 
                "cloudfront:GetDistribution", 
                "cloudfront:GetDistributionConfig", 
                "cloudfront:TagResource", 
                "cloudfront:UpdateDistribution", 
                "cognito-identity:CreateIdentityPool", 
                "cognito-identity:UpdateIdentityPool", 
                "cognito-identity:DeleteIdentityPool", 
                "cognito-identity:SetIdentityPoolRoles", 
                "cognito-idp:CreateUserPool", 
                "dynamodb:CreateTable", 
                "dynamodb:DeleteTable", 
                "dynamodb:DescribeTable", 
                "dynamodb:TagResource", 
                "dynamodb:UpdateTable", 
                "iam:AddClientIDToOpenIDConnectProvider", 
                "iam:CreateOpenIDConnectProvider", 
                "iam:GetOpenIDConnectProvider", 
                "iam:ListOpenIDConnectProviders", 
                "iam:CreateSAMLProvider", 
                "iam:GetSAMLProvider", 
                "iam:ListSAMLProvider", 
                "iam:UpdateSAMLProvider", 
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:GetFunction", 
                "mobileanalytics:CreateApp", 
                "mobileanalytics:DeleteApp", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListPlatformApplications", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "lex:PutIntent", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:PutSlotType", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:PutBot", 
                "lex:GetBot", 
                "lex:GetBots", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:CreatePlatformApplication", 
                "sns:DeletePlatformApplication", 
                "sns:GetPlatformApplicationAttributes", 
                "sns:SetPlatformApplicationAttributes"
            ], 
            "Resource": [
                "arn:aws:sns:*:*:app/*_MOBILEHUB_*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteBucketPolicy", 
                "s3:DeleteBucketWebsite", 
                "s3:ListBucket", 
                "s3:ListBucketVersions", 
                "s3:GetBucketLocation", 
                "s3:GetBucketVersioning", 
                "s3:PutBucketVersioning", 
                "s3:PutBucketWebsite", 
                "s3:PutBucketPolicy", 
                "s3:PutBucketTagging", 
                "s3:PutBucketCORS", 
                "s3:SetBucketCrossOriginConfiguration"
            ], 
            "Resource": [
                "arn:aws:s3:::*-userfiles-mobilehub-*", 
                "arn:aws:s3:::*-contentdelivery-mobilehub-*", 
                "arn:aws:s3:::*-hosting-mobilehub-*", 
                "arn:aws:s3:::*-deployments-mobilehub-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:DeleteObject", 
                "s3:DeleteVersion", 
                "s3:DeleteObjectVersion", 
                "s3:GetObject", 
                "s3:GetObjectVersion", 
                "s3:PutObject", 
                "s3:PutObjectAcl"
            ], 
            "Resource": [
                "arn:aws:s3:::*-userfiles-mobilehub-*/*", 
                "arn:aws:s3:::*-contentdelivery-mobilehub-*/*", 
                "arn:aws:s3:::*-hosting-mobilehub-*/*", 
                "arn:aws:s3:::*-deployments-mobilehub-*/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:AddPermission", 
                "lambda:CreateAlias", 
                "lambda:DeleteAlias", 
                "lambda:UpdateAlias", 
                "lambda:GetFunctionConfiguration", 
                "lambda:GetPolicy", 
                "lambda:RemovePermission", 
                "lambda:UpdateFunctionCode", 
                "lambda:UpdateFunctionConfiguration"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:*-mobilehub-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateRole", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListRolePolicies", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:UpdateAssumeRolePolicy", 
                "iam:AttachRolePolicy", 
                "iam:DetachRolePolicy"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/*_unauth_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_auth_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_consolepush_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_lambdaexecutionrole_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_smsverification_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_botexecutionrole_MOBILEHUB_*", 
                "arn:aws:iam::*:role/pinpoint-events", 
                "arn:aws:iam::*:role/service-role/pinpoint-events", 
                "arn:aws:iam::*:role/MOBILEHUB-*-lambdaexecution*", 
                "arn:aws:iam::*:role/MobileHub_Service_Role"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole", 
                "iam:GetRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/mobilehub/*:log-stream:*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListAttachedRolePolicies"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/MobileHub_Service_Role"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStacks", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStackResource", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStackResources", 
                "cloudformation:UpdateStack"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/MOBILEHUB-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "apigateway:DELETE", 
                "apigateway:GET", 
                "apigateway:HEAD", 
                "apigateway:OPTIONS", 
                "apigateway:PATCH", 
                "apigateway:POST", 
                "apigateway:PUT"
            ], 
            "Resource": [
                "arn:aws:apigateway:*::/restapis*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "apigateway:GET", 
                "apigateway:HEAD", 
                "apigateway:OPTIONS"
            ], 
            "Resource": [
                "arn:aws:apigateway:*::/domainnames*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cognito-idp:DeleteUserPool", 
                "cognito-idp:DescribeUserPool", 
                "cognito-idp:CreateUserPoolClient", 
                "cognito-idp:DescribeUserPoolClient", 
                "cognito-idp:DeleteUserPoolClient"
            ], 
            "Resource": [
                "arn:aws:cognito-idp:*:*:userpool/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mobiletargeting:UpdateApnsChannel", 
                "mobiletargeting:UpdateApnsSandboxChannel", 
                "mobiletargeting:UpdateEmailChannel", 
                "mobiletargeting:UpdateGcmChannel", 
                "mobiletargeting:UpdateSmsChannel", 
                "mobiletargeting:DeleteApnsChannel", 
                "mobiletargeting:DeleteApnsSandboxChannel", 
                "mobiletargeting:DeleteEmailChannel", 
                "mobiletargeting:DeleteGcmChannel", 
                "mobiletargeting:DeleteSmsChannel"
            ], 
            "Resource": [
                "arn:aws:mobiletargeting:*:*:apps/*/channels/*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonChimeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "chime:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticLoadBalancingClassicServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAddresses", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:AttachNetworkInterface", 
                "ec2:DetachNetworkInterface", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssignIpv6Addresses", 
                "ec2:UnassignIpv6Addresses"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMigrationHubDMSAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:CreateProgressUpdateStream"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:AssociateCreatedArtifact", 
                "mgh:DescribeMigrationTask", 
                "mgh:DisassociateCreatedArtifact", 
                "mgh:ImportMigrationTask", 
                "mgh:ListCreatedArtifacts", 
                "mgh:NotifyMigrationTaskState", 
                "mgh:PutResourceAttributes", 
                "mgh:NotifyApplicationState", 
                "mgh:DescribeApplicationState", 
                "mgh:AssociateDiscoveredResource", 
                "mgh:DisassociateDiscoveredResource", 
                "mgh:ListDiscoveredResources"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:ListMigrationTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "kinesis:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGuardDutyReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "guardduty:GetDetector", 
                "guardduty:ListDetectors", 
                "guardduty:GetIPSet", 
                "guardduty:ListIPSets", 
                "guardduty:GetThreatIntelSet", 
                "guardduty:ListThreatIntelSets", 
                "guardduty:GetFindings", 
                "guardduty:GetFindingsStatistics", 
                "guardduty:ListFindings", 
                "guardduty:GetMembers", 
                "guardduty:ListMembers", 
                "guardduty:GetMasterAccount", 
                "guardduty:ListInvitations", 
                "guardduty:GetInvitationsCount"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowAllUsersToViewAndManageThisGroup"
        }
    ]
}
Policy Name: AmazonECSServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AttachNetworkInterface", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:Describe*", 
                "ec2:DetachNetworkInterface", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DeregisterTargets", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:RegisterTargets", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateHealthCheck", 
                "route53:DeleteHealthCheck", 
                "route53:Get*", 
                "route53:List*", 
                "route53:UpdateHealthCheck", 
                "servicediscovery:DeregisterInstance", 
                "servicediscovery:Get*", 
                "servicediscovery:List*", 
                "servicediscovery:RegisterInstance", 
                "servicediscovery:UpdateInstanceCustomHealthStatus"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:Describe*", 
                "machinelearning:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRekognitionFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rekognition:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: RDSCloudHsmAuthorizationRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudhsm:CreateLunaClient", 
                "cloudhsm:GetClientConfiguration", 
                "cloudhsm:DeleteLunaClient", 
                "cloudhsm:DescribeLunaClient", 
                "cloudhsm:ModifyLunaClient", 
                "cloudhsm:DescribeHapg", 
                "cloudhsm:ModifyHapg", 
                "cloudhsm:GetConfig"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AdministratorAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningRealTimePredictionOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:Predict"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncPushToCloudWatchLogs
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMigrationHubSMSAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:CreateProgressUpdateStream"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:AssociateCreatedArtifact", 
                "mgh:DescribeMigrationTask", 
                "mgh:DisassociateCreatedArtifact", 
                "mgh:ImportMigrationTask", 
                "mgh:ListCreatedArtifacts", 
                "mgh:NotifyMigrationTaskState", 
                "mgh:PutResourceAttributes", 
                "mgh:NotifyApplicationState", 
                "mgh:DescribeApplicationState", 
                "mgh:AssociateDiscoveredResource", 
                "mgh:DisassociateDiscoveredResource", 
                "mgh:ListDiscoveredResources"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:ListMigrationTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigUserAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "config:Get*", 
                "config:Describe*", 
                "config:Deliver*", 
                "config:List*", 
                "tag:GetResources", 
                "tag:GetTagKeys", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:LookupEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTConfigAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:AcceptCertificateTransfer", 
                "iot:AddThingToThingGroup", 
                "iot:AssociateTargetsWithJob", 
                "iot:AttachPolicy", 
                "iot:AttachPrincipalPolicy", 
                "iot:AttachThingPrincipal", 
                "iot:CancelCertificateTransfer", 
                "iot:CancelJob", 
                "iot:ClearDefaultAuthorizer", 
                "iot:CreateAuthorizer", 
                "iot:CreateCertificateFromCsr", 
                "iot:CreateJob", 
                "iot:CreateKeysAndCertificate", 
                "iot:CreateOTAUpdate", 
                "iot:CreatePolicy", 
                "iot:CreatePolicyVersion", 
                "iot:CreateRoleAlias", 
                "iot:CreateStream", 
                "iot:CreateThing", 
                "iot:CreateThingGroup", 
                "iot:CreateThingType", 
                "iot:CreateTopicRule", 
                "iot:DeleteAuthorizer", 
                "iot:DeleteCACertificate", 
                "iot:DeleteCertificate", 
                "iot:DeleteOTAUpdate", 
                "iot:DeletePolicy", 
                "iot:DeletePolicyVersion", 
                "iot:DeleteRegistrationCode", 
                "iot:DeleteRoleAlias", 
                "iot:DeleteStream", 
                "iot:DeleteThing", 
                "iot:DeleteThingGroup", 
                "iot:DeleteThingType", 
                "iot:DeleteTopicRule", 
                "iot:DeleteV2LoggingLevel", 
                "iot:DeprecateThingType", 
                "iot:DescribeAuthorizer", 
                "iot:DescribeCACertificate", 
                "iot:DescribeCertificate", 
                "iot:DescribeCertificateTag", 
                "iot:DescribeDefaultAuthorizer", 
                "iot:DescribeEndpoint", 
                "iot:DescribeEventConfigurations", 
                "iot:DescribeIndex", 
                "iot:DescribeJob", 
                "iot:DescribeJobExecution", 
                "iot:DescribeRoleAlias", 
                "iot:DescribeStream", 
                "iot:DescribeThing", 
                "iot:DescribeThingGroup", 
                "iot:DescribeThingRegistrationTask", 
                "iot:DescribeThingType", 
                "iot:DetachPolicy", 
                "iot:DetachPrincipalPolicy", 
                "iot:DetachThingPrincipal", 
                "iot:DisableTopicRule", 
                "iot:EnableTopicRule", 
                "iot:GetEffectivePolicies", 
                "iot:GetIndexingConfiguration", 
                "iot:GetJobDocument", 
                "iot:GetLoggingOptions", 
                "iot:GetOTAUpdate", 
                "iot:GetPolicy", 
                "iot:GetPolicyVersion", 
                "iot:GetRegistrationCode", 
                "iot:GetTopicRule", 
                "iot:GetV2LoggingOptions", 
                "iot:ListAttachedPolicies", 
                "iot:ListAuthorizers", 
                "iot:ListCACertificates", 
                "iot:ListCertificates", 
                "iot:ListCertificatesByCA", 
                "iot:ListIndices", 
                "iot:ListJobExecutionsForJob", 
                "iot:ListJobExecutionsForThing", 
                "iot:ListJobs", 
                "iot:ListOTAUpdates", 
                "iot:ListOutgoingCertificates", 
                "iot:ListPolicies", 
                "iot:ListPolicyPrincipals", 
                "iot:ListPolicyVersions", 
                "iot:ListPrincipalPolicies", 
                "iot:ListPrincipalThings", 
                "iot:ListRoleAliases", 
                "iot:ListStreams", 
                "iot:ListTargetsForPolicy", 
                "iot:ListThingGroups", 
                "iot:ListThingGroupsForThing", 
                "iot:ListThingPrincipals", 
                "iot:ListThingRegistrationTaskReports", 
                "iot:ListThingRegistrationTasks", 
                "iot:ListThings", 
                "iot:ListThingsInThingGroup", 
                "iot:ListThingTypes", 
                "iot:ListTopicRules", 
                "iot:ListV2LoggingLevels", 
                "iot:RegisterCACertificate", 
                "iot:RegisterCertificate", 
                "iot:RegisterThing", 
                "iot:RejectCertificateTransfer", 
                "iot:RemoveThingFromThingGroup", 
                "iot:ReplaceTopicRule", 
                "iot:SearchIndex", 
                "iot:SetDefaultAuthorizer", 
                "iot:SetDefaultPolicyVersion", 
                "iot:SetLoggingOptions", 
                "iot:SetV2LoggingLevel", 
                "iot:SetV2LoggingOptions", 
                "iot:StartThingRegistrationTask", 
                "iot:StopThingRegistrationTask", 
                "iot:TestAuthorization", 
                "iot:TestInvokeAuthorizer", 
                "iot:TransferCertificate", 
                "iot:UpdateAuthorizer", 
                "iot:UpdateCACertificate", 
                "iot:UpdateCertificate", 
                "iot:UpdateCertificateTag", 
                "iot:UpdateEventConfigurations", 
                "iot:UpdateIndexingConfiguration", 
                "iot:UpdateRoleAlias", 
                "iot:UpdateStream", 
                "iot:UpdateThing", 
                "iot:UpdateThingGroup", 
                "iot:UpdateThingGroupsForThing"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: SecurityAudit
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:DescribeCertificate", 
                "acm:ListCertificates", 
                "autoscaling:Describe*", 
                "batch:DescribeComputeEnvironments", 
                "batch:DescribeJobDefinitions", 
                "clouddirectory:ListDirectories", 
                "cloudformation:DescribeStack*", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStack*", 
                "cloudformation:GetStackPolicy", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "cloudhsm:ListHapgs", 
                "cloudhsm:ListHsms", 
                "cloudhsm:ListLunaClients", 
                "cloudsearch:DescribeDomains", 
                "cloudsearch:DescribeServiceAccessPolicies", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:ListTags", 
                "cloudwatch:Describe*", 
                "codebuild:ListProjects", 
                "codecommit:BatchGetRepositories", 
                "codecommit:GetBranch", 
                "codecommit:GetObjectIdentifier", 
                "codecommit:GetRepository", 
                "codecommit:List*", 
                "codedeploy:Batch*", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codepipeline:ListPipelines", 
                "cognito-identity:ListIdentityPools", 
                "cognito-idp:ListUserPools", 
                "config:Deliver*", 
                "config:Describe*", 
                "config:Get*", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:EvaluateExpression", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:QueryObjects", 
                "datapipeline:ValidatePipelineDefinition", 
                "directconnect:Describe*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListStreams", 
                "dynamodb:ListTables", 
                "ec2:Describe*", 
                "ecr:DescribeRepositories", 
                "ecr:GetRepositoryPolicy", 
                "ecs:Describe*", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:Describe*", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticloadbalancing:Describe*", 
                "elasticmapreduce:DescribeJobFlows", 
                "elasticmapreduce:ListClusters", 
                "elasticmapreduce:ListInstances", 
                "es:Describe*", 
                "es:ListDomainNames", 
                "events:DescribeEventBus", 
                "events:ListRules", 
                "firehose:Describe*", 
                "firehose:List*", 
                "gamelift:ListBuilds", 
                "gamelift:ListFleets", 
                "glacier:DescribeVault", 
                "glacier:GetVaultAccessPolicy", 
                "glacier:ListVaults", 
                "iam:GenerateCredentialReport", 
                "iam:Get*", 
                "iam:List*", 
                "iot:ListThings", 
                "kinesis:ListStreams", 
                "kinesisanalytics:ListApplications", 
                "kms:Describe*", 
                "kms:Get*", 
                "kms:List*", 
                "lambda:GetAccountSettings", 
                "lambda:GetPolicy", 
                "lambda:ListFunctions", 
                "logs:DescribeDestinations", 
                "logs:DescribeLogGroups", 
                "logs:DescribeMetricFilters", 
                "logs:DescribeResourcePolicies", 
                "machinelearning:DescribeMLModels", 
                "mediastore:GetContainerPolicy", 
                "mediastore:ListContainers", 
                "opsworks-cm:DescribeServers", 
                "rds:Describe*", 
                "rds:DownloadDBLogFilePortion", 
                "rds:ListTagsForResource", 
                "redshift:Describe*", 
                "route53:Get*", 
                "route53:List*", 
                "route53domains:GetDomainDetail", 
                "route53domains:GetOperationDetail", 
                "route53domains:ListDomains", 
                "route53domains:ListOperations", 
                "route53domains:ListTagsForDomain", 
                "s3:GetAccelerateConfiguration", 
                "s3:GetAnalyticsConfiguration", 
                "s3:GetBucket*", 
                "s3:GetEncryptionConfiguration", 
                "s3:GetInventoryConfiguration", 
                "s3:GetLifecycleConfiguration", 
                "s3:GetMetricsConfiguration", 
                "s3:GetObjectAcl", 
                "s3:GetObjectVersionAcl", 
                "s3:GetReplicationConfiguration", 
                "s3:ListAllMyBuckets", 
                "sdb:DomainMetadata", 
                "sdb:ListDomains", 
                "serverlessrepo:GetApplicationPolicy", 
                "serverlessrepo:ListApplications", 
                "ses:GetIdentityDkimAttributes", 
                "ses:GetIdentityVerificationAttributes", 
                "ses:ListIdentities", 
                "snowball:ListClusters", 
                "snowball:ListJobs", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sqs:GetQueueAttributes", 
                "sqs:ListQueues", 
                "ssm:DescribeDocumentPermission", 
                "ssm:ListDocuments", 
                "states:ListStateMachines", 
                "storagegateway:DescribeBandwidthRateLimit", 
                "storagegateway:DescribeCache", 
                "storagegateway:DescribeCachediSCSIVolumes", 
                "storagegateway:DescribeGatewayInformation", 
                "storagegateway:DescribeMaintenanceStartTime", 
                "storagegateway:DescribeNFSFileShares", 
                "storagegateway:DescribeSnapshotSchedule", 
                "storagegateway:DescribeStorediSCSIVolumes", 
                "storagegateway:DescribeTapeArchives", 
                "storagegateway:DescribeTapeRecoveryPoints", 
                "storagegateway:DescribeTapes", 
                "storagegateway:DescribeUploadBuffer", 
                "storagegateway:DescribeVTLDevices", 
                "storagegateway:DescribeWorkingStorage", 
                "storagegateway:List*", 
                "tag:GetResources", 
                "tag:GetTagKeys", 
                "trustedadvisor:Describe*", 
                "waf:ListWebACLs", 
                "waf-regional:ListWebACLs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSResourceGroupsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "resource-groups:Describe*", 
                "resource-groups:Get*", 
                "resource-groups:List*", 
                "resource-groups:Search*", 
                "tag:Get*", 
                "cloudformation:DescribeStacks", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeVolumes", 
                "ec2:DescribeVpcs", 
                "elasticache:DescribeCacheClusters", 
                "elasticache:DescribeSnapshots", 
                "elasticache:ListTagsForResource", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticmapreduce:DescribeCluster", 
                "elasticmapreduce:ListClusters", 
                "glacier:ListVaults", 
                "glacier:DescribeVault", 
                "glacier:ListTagsForVault", 
                "kinesis:ListStreams", 
                "kinesis:DescribeStream", 
                "kinesis:ListTagsForStream", 
                "opsworks:DescribeStacks", 
                "opsworks:ListTags", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSnapshots", 
                "rds:ListTagsForResource", 
                "redshift:DescribeClusters", 
                "redshift:DescribeTags", 
                "route53domains:ListDomains", 
                "route53:ListHealthChecks", 
                "route53:GetHealthCheck", 
                "route53:ListHostedZones", 
                "route53:GetHostedZone", 
                "route53:ListTagsForResource", 
                "storagegateway:ListGateways", 
                "storagegateway:DescribeGatewayInformation", 
                "storagegateway:ListTagsForResource", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketTagging", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTags", 
                "ssm:ListDocuments"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeStarFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codestar:*", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "cloud9:DescribeEnvironment*", 
                "cloud9:ValidateEnvironmentName"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CodeStarEC2"
        }, 
        {
            "Action": [
                "cloudformation:DescribeStack*", 
                "cloudformation:GetTemplateSummary"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awscodestar-*"
            ], 
            "Effect": "Allow", 
            "Sid": "CodeStarCF"
        }
    ]
}
Policy Name: AmazonSSMServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:CancelCommand", 
                "ssm:GetCommandInvocation", 
                "ssm:ListCommandInvocations", 
                "ssm:ListCommands", 
                "ssm:SendCommand"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "resource-groups:ListGroups", 
                "resource-groups:ListGroupResources"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "tag:GetResources"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDataPipeline_FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:List*", 
                "dynamodb:DescribeTable", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "sns:ListTopics", 
                "sns:Subscribe", 
                "iam:ListRoles", 
                "iam:GetRolePolicy", 
                "iam:GetInstanceProfile", 
                "iam:ListInstanceProfiles", 
                "datapipeline:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultRole"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDynamoDBReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "cloudwatch:DescribeAlarmHistory", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:QueryObjects", 
                "dynamodb:BatchGetItem", 
                "dynamodb:DescribeTable", 
                "dynamodb:GetItem", 
                "dynamodb:ListTables", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "dynamodb:DescribeReservedCapacity", 
                "dynamodb:DescribeReservedCapacityOfferings", 
                "dynamodb:ListTagsOfResource", 
                "dynamodb:DescribeTimeToLive", 
                "dynamodb:DescribeLimits", 
                "dynamodb:ListGlobalTables", 
                "dynamodb:DescribeGlobalTable", 
                "dynamodb:DescribeBackup", 
                "dynamodb:ListBackups", 
                "dynamodb:DescribeContinuousBackups", 
                "dax:Describe*", 
                "dax:List*", 
                "dax:GetItem", 
                "dax:BatchGetItem", 
                "dax:Query", 
                "dax:Scan", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "iam:GetRole", 
                "iam:ListRoles", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "lambda:ListFunctions", 
                "lambda:ListEventSourceMappings", 
                "lambda:GetFunctionConfiguration"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingConsoleFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateKeyPair", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeLaunchTemplateVersions", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:ImportKeyPair"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:ListMetrics", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:ListSubscriptions", 
                "sns:ListTopics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:ListRoles", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "autoscaling.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSElementalMediaPackageFullAccess
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": "mediapackage:*", 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AmazonKinesisVideoStreamsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "kinesisvideo:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSNSReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:GetTopicAttributes", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSEC2SpotServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonElasticMapReduceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackEvents", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateRoute", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DeleteRoute", 
                "ec2:DeleteTags", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSpotPriceHistory", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeNetworkAcls", 
                "ec2:CreateVpcEndpoint", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RunInstances", 
                "ec2:TerminateInstances", 
                "elasticmapreduce:*", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "kms:List*", 
                "s3:*", 
                "sdb:*", 
                "support:CreateCase", 
                "support:DescribeServices", 
                "support:DescribeSeverityLevels"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "elasticmapreduce.amazonaws.com", 
                        "elasticmapreduce.amazonaws.com.cn"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonS3ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:Get*", 
                "s3:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticbeanstalk:*", 
                "ec2:*", 
                "ecs:*", 
                "ecr:*", 
                "elasticloadbalancing:*", 
                "autoscaling:*", 
                "cloudwatch:*", 
                "s3:*", 
                "sns:*", 
                "cloudformation:*", 
                "dynamodb:*", 
                "rds:*", 
                "sqs:*", 
                "logs:*", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:PassRole", 
                "iam:ListRolePolicies", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:ListServerCertificates", 
                "acm:DescribeCertificate", 
                "acm:ListCertificates", 
                "codebuild:CreateProject", 
                "codebuild:DeleteProject", 
                "codebuild:BatchGetBuilds", 
                "codebuild:StartBuild"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:AddRoleToInstanceProfile", 
                "iam:CreateInstanceProfile", 
                "iam:CreateRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-elasticbeanstalk*", 
                "arn:aws:iam::*:instance-profile/aws-elasticbeanstalk*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "autoscaling.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "elasticbeanstalk.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:AttachRolePolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PolicyArn": [
                        "arn:aws:iam::aws:policy/AWSElasticBeanstalk*", 
                        "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalk*"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonWorkSpacesAdmin
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "workspaces:CreateWorkspaces", 
                "workspaces:DescribeWorkspaces", 
                "workspaces:RebootWorkspaces", 
                "workspaces:RebuildWorkspaces", 
                "workspaces:TerminateWorkspaces", 
                "workspaces:DescribeWorkspaceDirectories", 
                "workspaces:DescribeWorkspaceBundles", 
                "workspaces:ModifyWorkspaceProperties", 
                "workspaces:StopWorkspaces", 
                "workspaces:StartWorkspaces", 
                "workspaces:DescribeWorkspacesConnectionStatus", 
                "workspaces:CreateTags", 
                "workspaces:DeleteTags", 
                "workspaces:DescribeTags", 
                "kms:ListKeys", 
                "kms:ListAliases", 
                "kms:DescribeKey"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:CompleteLifecycleAction", 
                "autoscaling:DeleteLifecycleHook", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLifecycleHooks", 
                "autoscaling:PutLifecycleHook", 
                "autoscaling:RecordLifecycleActionHeartbeat", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:UpdateAutoScalingGroup", 
                "autoscaling:EnableMetricsCollection", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribePolicies", 
                "autoscaling:DescribeScheduledActions", 
                "autoscaling:DescribeNotificationConfigurations", 
                "autoscaling:DescribeLifecycleHooks", 
                "autoscaling:SuspendProcesses", 
                "autoscaling:ResumeProcesses", 
                "autoscaling:AttachLoadBalancers", 
                "autoscaling:PutScalingPolicy", 
                "autoscaling:PutScheduledUpdateGroupAction", 
                "autoscaling:PutNotificationConfiguration", 
                "autoscaling:PutLifecycleHook", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:DeleteAutoScalingGroup", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:TerminateInstances", 
                "tag:GetTags", 
                "tag:GetResources", 
                "sns:Publish", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticloadbalancing:RegisterTargets", 
                "elasticloadbalancing:DeregisterTargets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSESFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ses:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchLogsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:Describe*", 
                "logs:Get*", 
                "logs:List*", 
                "logs:TestMetricFilter", 
                "logs:FilterLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisFirehoseReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "firehose:Describe*", 
                "firehose:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksRegisterCLI
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "opsworks:AssignInstance", 
                "opsworks:CreateStack", 
                "opsworks:CreateLayer", 
                "opsworks:DeregisterInstance", 
                "opsworks:DescribeInstances", 
                "opsworks:DescribeStackProvisioningParameters", 
                "opsworks:DescribeStacks", 
                "opsworks:UnassignInstance"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:AddUserToGroup", 
                "iam:CreateAccessKey", 
                "iam:CreateGroup", 
                "iam:CreateUser", 
                "iam:ListInstanceProfiles", 
                "iam:PassRole", 
                "iam:PutUserPolicy"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDynamoDBFullAccesswithDataPipeline
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarmHistory", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics", 
                "cloudwatch:PutMetricAlarm", 
                "dynamodb:*", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sns:SetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "DDBConsole"
        }, 
        {
            "Action": [
                "lambda:*", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "DDBConsoleTriggers"
        }, 
        {
            "Action": [
                "datapipeline:*", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "DDBConsoleImportExport"
        }, 
        {
            "Action": [
                "iam:GetRolePolicy", 
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "IAMEDPRoles"
        }, 
        {
            "Action": [
                "ec2:CreateTags", 
                "ec2:DescribeInstances", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "elasticmapreduce:*", 
                "datapipeline:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "EMR"
        }, 
        {
            "Action": [
                "s3:DeleteObject", 
                "s3:Get*", 
                "s3:List*", 
                "s3:Put*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "S3"
        }
    ]
}
Policy Name: AmazonEC2RoleforDataPipelineRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "datapipeline:*", 
                "dynamodb:*", 
                "ec2:Describe*", 
                "elasticmapreduce:AddJobFlowSteps", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:ListInstance*", 
                "elasticmapreduce:ModifyInstanceGroups", 
                "rds:Describe*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "s3:*", 
                "sdb:*", 
                "sns:*", 
                "sqs:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchLogsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElementalMediaPackageReadOnly
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "mediapackage:List*", 
            "mediapackage:Describe*"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AWSElasticBeanstalkMulticontainerDocker
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:Poll", 
                "ecs:StartTask", 
                "ecs:StopTask", 
                "ecs:DiscoverPollEndpoint", 
                "ecs:StartTelemetrySession", 
                "ecs:RegisterContainerInstance", 
                "ecs:DeregisterContainerInstance", 
                "ecs:DescribeContainerInstances", 
                "ecs:Submit*", 
                "ecs:DescribeTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ECSAccess"
        }
    ]
}
Policy Name: AWSMigrationHubFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:*", 
                "discovery:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elastictranscoder:*", 
                "cloudfront:*", 
                "s3:List*", 
                "s3:Put*", 
                "s3:Get*", 
                "s3:*MultipartUpload*", 
                "iam:CreateRole", 
                "iam:GetRolePolicy", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:List*", 
                "sns:CreateTopic", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: IAMUserChangePassword
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:ChangePassword"
            ], 
            "Resource": [
                "arn:aws:iam::*:user/${aws:username}"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetAccountPasswordPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAPIGatewayAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "apigateway:*"
            ], 
            "Resource": "arn:aws:apigateway:*::/*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonVPCCrossAccountNetworkInterfaceOperations
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeRouteTables", 
                "ec2:CreateRoute", 
                "ec2:DeleteRoute", 
                "ec2:ReplaceRoute"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeNetworkInterfaces", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AssignPrivateIpAddresses", 
                "ec2:UnassignPrivateIpAddresses"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ServiceCatalogEndUserAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "catalog-user:*", 
                "s3:GetObject", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:SearchProducts"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:DescribeProvisionedProduct", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ScanProvisionedProducts"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "servicecatalog:userLevel": "self"
                }
            }
        }
    ]
}
Policy Name: AmazonMacieSetupRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetEventSelectors", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:ListTags", 
                "cloudtrail:LookupEvents", 
                "iam:ListAccountAliases", 
                "s3:GetBucket*", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudtrail:CreateTrail", 
                "cloudtrail:StartLogging", 
                "cloudtrail:StopLogging", 
                "cloudtrail:UpdateTrail", 
                "cloudtrail:DeleteTrail", 
                "cloudtrail:PutEventSelectors"
            ], 
            "Resource": "arn:aws:cloudtrail:*:*:trail/AWSMacieTrail-DO-NOT-EDIT", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteBucketPolicy", 
                "s3:DeleteBucketWebsite", 
                "s3:DeleteObject", 
                "s3:DeleteObjectTagging", 
                "s3:DeleteObjectVersion", 
                "s3:DeleteObjectVersionTagging", 
                "s3:DeleteReplicationConfiguration", 
                "s3:PutBucketPolicy"
            ], 
            "Resource": [
                "arn:aws:s3:::awsmacie-*", 
                "arn:aws:s3:::awsmacietrail-*", 
                "arn:aws:s3:::*-awsmacietrail-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonPollyReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "polly:DescribeVoices", 
                "polly:GetLexicon", 
                "polly:ListLexicons", 
                "polly:SynthesizeSpeech"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsWriteOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "mobileanalytics:PutEvents", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2SpotFleetTaggingRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:CreateTags"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterTargets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DataScientist
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:*", 
                "cloudwatch:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackEvents", 
                "datapipeline:Describe*", 
                "datapipeline:ListPipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:QueryObjects", 
                "dynamodb:*", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CancelSpotFleetRequests", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:Describe*", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:ModifySpotFleetRequest", 
                "ec2:RequestSpotInstances", 
                "ec2:RequestSpotFleet", 
                "elasticfilesystem:*", 
                "elasticmapreduce:*", 
                "es:*", 
                "firehose:*", 
                "iam:GetInstanceProfile", 
                "iam:GetRole", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:ListRoles", 
                "kinesis:*", 
                "kms:List*", 
                "lambda:Create*", 
                "lambda:Delete*", 
                "lambda:Get*", 
                "lambda:InvokeFunction", 
                "lambda:PublishVersion", 
                "lambda:Update*", 
                "lambda:List*", 
                "machinelearning:*", 
                "sdb:*", 
                "rds:*", 
                "sns:ListSubscriptions", 
                "sns:ListTopics", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents", 
                "redshift:*", 
                "s3:CreateBucket", 
                "sns:CreateTopic", 
                "sns:Get*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:Abort*", 
                "s3:DeleteObject", 
                "s3:Get*", 
                "s3:List*", 
                "s3:PutAccelerateConfiguration", 
                "s3:PutBucketLogging", 
                "s3:PutBucketNotification", 
                "s3:PutBucketTagging", 
                "s3:PutObject", 
                "s3:Replicate*", 
                "s3:RestoreObject"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:RunInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/DataPipelineDefaultRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole", 
                "arn:aws:iam::*:role/EMR_EC2_DefaultRole", 
                "arn:aws:iam::*:role/EMR_DefaultRole", 
                "arn:aws:iam::*:role/kinesis-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceMeteringFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:MeterUsage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksCMServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteObject", 
                "s3:DeleteBucket", 
                "s3:GetObject", 
                "s3:HeadBucket", 
                "s3:ListBucket", 
                "s3:ListObjects", 
                "s3:PutBucketPolicy"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:DescribeInstanceInformation", 
                "ssm:GetCommandInvocation", 
                "ssm:ListCommandInvocations", 
                "ssm:ListCommands"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:SendCommand"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ssm:resourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
                }
            }
        }, 
        {
            "Action": [
                "ssm:SendCommand"
            ], 
            "Resource": [
                "arn:aws:ssm:*::document/*", 
                "arn:aws:s3:::aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AllocateAddress", 
                "ec2:AssociateAddress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateImage", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeregisterImage", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DisassociateAddress", 
                "ec2:ReleaseAddress", 
                "ec2:RunInstances", 
                "ec2:StopInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
                }
            }
        }, 
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:UpdateStack"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-opsworks-cm-*", 
                "arn:aws:iam::*:role/service-role/aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConnector
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "iam:GetUser", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteObject", 
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:PutObject", 
                "s3:PutObjectAcl", 
                "s3:AbortMultipartUpload", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts"
            ], 
            "Resource": "arn:aws:s3:::import-to-ec2-*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CancelConversionTask", 
                "ec2:CancelExportTask", 
                "ec2:CreateImage", 
                "ec2:CreateInstanceExportTask", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:DeleteTags", 
                "ec2:DeleteVolume", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeRegions", 
                "ec2:DescribeTags", 
                "ec2:DetachVolume", 
                "ec2:ImportInstance", 
                "ec2:ImportVolume", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:ImportImage", 
                "ec2:DescribeImportImageTasks", 
                "ec2:DeregisterImage", 
                "ec2:DescribeSnapshots", 
                "ec2:DeleteSnapshot", 
                "ec2:CancelImportTask", 
                "ec2:ImportSnapshot", 
                "ec2:DescribeImportSnapshotTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "SNS:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSBatchFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "batch:*", 
                "cloudwatch:GetMetricStatistics", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeKeyPairs", 
                "ecs:DescribeClusters", 
                "ecs:Describe*", 
                "ecs:List*", 
                "logs:Describe*", 
                "logs:Get*", 
                "logs:TestMetricFilter", 
                "logs:FilterLogEvents", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/AWSBatchServiceRole", 
                "arn:aws:iam::*:role/service-role/AWSBatchServiceRole", 
                "arn:aws:iam::*:role/ecsInstanceRole", 
                "arn:aws:iam::*:role/iaws-ec2-spot-fleet-role", 
                "arn:aws:iam::*:role/aws-ec2-spot-fleet-role", 
                "arn:aws:iam::*:role/AWSBatchJobRole*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonECS_FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget", 
                "autoscaling:UpdateAutoScalingGroup", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:CreateLaunchConfiguration", 
                "autoscaling:DeleteAutoScalingGroup", 
                "autoscaling:DeleteLaunchConfiguration", 
                "autoscaling:Describe*", 
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStack*", 
                "cloudformation:UpdateStack", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm", 
                "ec2:AssociateRouteTable", 
                "ec2:AttachInternetGateway", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CancelSpotFleetRequests", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateVpc", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteVpc", 
                "ec2:Describe*", 
                "ec2:DetachInternetGateway", 
                "ec2:DisassociateRouteTable", 
                "ec2:ModifySubnetAttribute", 
                "ec2:ModifyVpcAttribute", 
                "ec2:RequestSpotFleet", 
                "elasticloadbalancing:CreateListener", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:CreateRule", 
                "elasticloadbalancing:CreateTargetGroup", 
                "elasticloadbalancing:DeleteListener", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:DeleteRule", 
                "elasticloadbalancing:DeleteTargetGroup", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeRules", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "ecs:*", 
                "events:DescribeRule", 
                "events:DeleteRule", 
                "events:ListRuleNamesByTarget", 
                "events:ListTargetsByRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "logs:CreateLogGroup", 
                "logs:DescribeLogGroups", 
                "logs:FilterLogEvents", 
                "route53:GetHostedZone", 
                "route53:ListHostedZonesByName", 
                "route53:CreateHostedZone", 
                "route53:DeleteHostedZone", 
                "route53:GetHealthCheck", 
                "servicediscovery:CreatePrivateDnsNamespace", 
                "servicediscovery:CreateService", 
                "servicediscovery:GetNamespace", 
                "servicediscovery:GetOperation", 
                "servicediscovery:GetService", 
                "servicediscovery:ListNamespaces", 
                "servicediscovery:ListServices", 
                "servicediscovery:UpdateService"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:GetParametersByPath", 
                "ssm:GetParameters", 
                "ssm:GetParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/aws/service/ecs*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-name": "EC2ContainerService-*"
                }
            }
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "ecs-tasks.amazonaws.com"
                }
            }
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/ecsInstanceRole*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/ecsAutoscaleRole*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "application-autoscaling.amazonaws.com", 
                        "application-autoscaling.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "ecs.amazonaws.com", 
                        "spot.amazonaws.com", 
                        "spotfleet.amazonaws.com", 
                        "ecs.application-autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: ServiceCatalogAdminReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "catalog-admin:DescribeConstraints", 
                "catalog-admin:DescribeListingForProduct", 
                "catalog-admin:DescribeListings", 
                "catalog-admin:DescribePortfolios", 
                "catalog-admin:DescribeProductVersions", 
                "catalog-admin:GetPortfolioCount", 
                "catalog-admin:GetPortfolios", 
                "catalog-admin:GetProductCounts", 
                "catalog-admin:ListAllPortfolioConstraints", 
                "catalog-admin:ListPortfolioConstraints", 
                "catalog-admin:ListPortfolios", 
                "catalog-admin:ListPrincipalConstraints", 
                "catalog-admin:ListProductConstraints", 
                "catalog-admin:ListResourceUsers", 
                "catalog-admin:ListTagsForResource", 
                "catalog-admin:SearchListings", 
                "catalog-user:*", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplateSummary", 
                "iam:GetGroup", 
                "iam:GetRole", 
                "iam:GetUser", 
                "iam:ListGroups", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "s3:GetObject", 
                "servicecatalog:DescribeTagOption", 
                "servicecatalog:GetTagOptionMigrationStatus", 
                "servicecatalog:ListResourcesForTagOption", 
                "servicecatalog:ListTagOptions", 
                "servicecatalog:AccountLevelDescribeRecord", 
                "servicecatalog:AccountLevelListRecordHistory", 
                "servicecatalog:AccountLevelScanProvisionedProducts", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:DescribeProvisionedProduct", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:ScanProvisionedProducts", 
                "servicecatalog:SearchProducts", 
                "servicecatalog:DescribeConstraint", 
                "servicecatalog:DescribeProductAsAdmin", 
                "servicecatalog:DescribePortfolio", 
                "servicecatalog:DescribeProvisioningArtifact", 
                "servicecatalog:ListAcceptedPortfolioShares", 
                "servicecatalog:ListConstraintsForPortfolio", 
                "servicecatalog:ListPortfolioAccess", 
                "servicecatalog:ListPortfolios", 
                "servicecatalog:ListPortfoliosForProduct", 
                "servicecatalog:ListPrincipalsForPortfolio", 
                "servicecatalog:ListProvisioningArtifacts", 
                "servicecatalog:SearchProductsAsAdmin"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingRDSClusterPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:AddTagsToResource", 
                "rds:CreateDBInstance", 
                "rds:DeleteDBInstance", 
                "rds:DescribeDBClusters", 
                "rds:DescribeDBInstances", 
                "rds:ModifyDBCluster", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSServiceRoleForEC2ScheduledInstances
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringEquals": {
                    "aws:TagKeys": [
                        "aws:ec2sri:scheduledInstanceId"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:ec2sri:scheduledInstanceId": "*"
                }
            }
        }
    ]
}
Policy Name: AWSCodeDeployRoleForLambda
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "lambda:UpdateAlias", 
                "lambda:GetAlias", 
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectVersion"
            ], 
            "Resource": "arn:aws:s3:::*/CodeDeploy/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectVersion"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "s3:ExistingObjectTag/UseWithCodeDeploy": "true"
                }
            }
        }, 
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": "arn:aws:lambda:*:*:function:CodeDeployHook_*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData", 
                "ds:CreateComputer", 
                "ds:DescribeDirectories", 
                "ec2:DescribeInstanceStatus", 
                "logs:*", 
                "ssm:*", 
                "ec2messages:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeCommitReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codecommit:BatchGet*", 
                "codecommit:Get*", 
                "codecommit:Describe*", 
                "codecommit:List*", 
                "codecommit:GitPull"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "events:DescribeRule", 
                "events:ListTargetsByRule"
            ], 
            "Resource": "arn:aws:events:*:*:rule/codecommit*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsCodeCommitRulesReadOnlyAccess"
        }, 
        {
            "Action": [
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSSubscriptionAccess"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "LambdaReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListAccessKeys", 
                "iam:ListSSHPublicKeys", 
                "iam:ListServiceSpecificCredentials", 
                "iam:ListAccessKeys", 
                "iam:GetSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyConsoleAccess"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "autoscaling:UpdateAutoScalingGroup", 
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStack*", 
                "cloudformation:UpdateStack", 
                "cloudwatch:GetMetricStatistics", 
                "ec2:Describe*", 
                "elasticloadbalancing:*", 
                "ecs:*", 
                "events:DescribeRule", 
                "events:DeleteRule", 
                "events:ListRuleNamesByTarget", 
                "events:ListTargetsByRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonFreeRTOSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "freertos:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCognitoReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-identity:Describe*", 
                "cognito-identity:Get*", 
                "cognito-identity:List*", 
                "cognito-idp:Describe*", 
                "cognito-idp:AdminGetUser", 
                "cognito-idp:List*", 
                "cognito-sync:Describe*", 
                "cognito-sync:Get*", 
                "cognito-sync:List*", 
                "iam:ListOpenIdConnectProviders", 
                "iam:ListRoles", 
                "sns:ListPlatformApplications"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDMSCloudWatchLogsRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:DescribeLogGroups"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDescribeOnAllLogGroups"
        }, 
        {
            "Action": [
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDescribeOfAllLogStreamsOnDmsTasksLogGroup"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCreationOfDmsTasksLogGroups"
        }, 
        {
            "Action": [
                "logs:CreateLogStream"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCreationOfDmsTaskLogStream"
        }, 
        {
            "Action": [
                "logs:PutLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowUploadOfLogEventsToDmsTaskLogStream"
        }
    ]
}
Policy Name: AWSApplicationDiscoveryServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:*", 
                "discovery:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53AutoNamingReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "servicediscovery:Get*", 
                "servicediscovery:List*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonVPCFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AcceptVpcPeeringConnection", 
                "ec2:AcceptVpcEndpointConnections", 
                "ec2:AllocateAddress", 
                "ec2:AssignIpv6Addresses", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssociateAddress", 
                "ec2:AssociateDhcpOptions", 
                "ec2:AssociateRouteTable", 
                "ec2:AssociateSubnetCidrBlock", 
                "ec2:AssociateVpcCidrBlock", 
                "ec2:AttachClassicLinkVpc", 
                "ec2:AttachInternetGateway", 
                "ec2:AttachNetworkInterface", 
                "ec2:AttachVpnGateway", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateCustomerGateway", 
                "ec2:CreateDefaultSubnet", 
                "ec2:CreateDefaultVpc", 
                "ec2:CreateDhcpOptions", 
                "ec2:CreateEgressOnlyInternetGateway", 
                "ec2:CreateFlowLogs", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateNatGateway", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAclEntry", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:CreateVpcEndpoint", 
                "ec2:CreateVpcEndpointConnectionNotification", 
                "ec2:CreateVpcEndpointServiceConfiguration", 
                "ec2:CreateVpcPeeringConnection", 
                "ec2:CreateVpnConnection", 
                "ec2:CreateVpnConnectionRoute", 
                "ec2:CreateVpnGateway", 
                "ec2:DeleteCustomerGateway", 
                "ec2:DeleteDhcpOptions", 
                "ec2:DeleteEgressOnlyInternetGateway", 
                "ec2:DeleteFlowLogs", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteNatGateway", 
                "ec2:DeleteNetworkAcl", 
                "ec2:DeleteNetworkAclEntry", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteTags", 
                "ec2:DeleteVpc", 
                "ec2:DeleteVpcEndpoints", 
                "ec2:DeleteVpcEndpointConnectionNotifications", 
                "ec2:DeleteVpcEndpointServiceConfigurations", 
                "ec2:DeleteVpcPeeringConnection", 
                "ec2:DeleteVpnConnection", 
                "ec2:DeleteVpnConnectionRoute", 
                "ec2:DeleteVpnGateway", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeEgressOnlyInternetGateways", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroupReferences", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeStaleSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeVpcClassicLinkDnsSupport", 
                "ec2:DescribeVpcEndpointConnectionNotifications", 
                "ec2:DescribeVpcEndpointConnections", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointServiceConfigurations", 
                "ec2:DescribeVpcEndpointServicePermissions", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:DetachInternetGateway", 
                "ec2:DetachNetworkInterface", 
                "ec2:DetachVpnGateway", 
                "ec2:DisableVgwRoutePropagation", 
                "ec2:DisableVpcClassicLink", 
                "ec2:DisableVpcClassicLinkDnsSupport", 
                "ec2:DisassociateAddress", 
                "ec2:DisassociateRouteTable", 
                "ec2:DisassociateSubnetCidrBlock", 
                "ec2:DisassociateVpcCidrBlock", 
                "ec2:EnableVgwRoutePropagation", 
                "ec2:EnableVpcClassicLink", 
                "ec2:EnableVpcClassicLinkDnsSupport", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:ModifySubnetAttribute", 
                "ec2:ModifyVpcAttribute", 
                "ec2:ModifyVpcEndpoint", 
                "ec2:ModifyVpcEndpointConnectionNotification", 
                "ec2:ModifyVpcEndpointServiceConfiguration", 
                "ec2:ModifyVpcEndpointServicePermissions", 
                "ec2:ModifyVpcPeeringConnectionOptions", 
                "ec2:ModifyVpcTenancy", 
                "ec2:MoveAddressToVpc", 
                "ec2:RejectVpcEndpointConnections", 
                "ec2:RejectVpcPeeringConnection", 
                "ec2:ReleaseAddress", 
                "ec2:ReplaceNetworkAclAssociation", 
                "ec2:ReplaceNetworkAclEntry", 
                "ec2:ReplaceRoute", 
                "ec2:ReplaceRouteTableAssociation", 
                "ec2:ResetNetworkInterfaceAttribute", 
                "ec2:RestoreAddressToClassic", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:UnassignIpv6Addresses", 
                "ec2:UnassignPrivateIpAddresses", 
                "ec2:UpdateSecurityGroupRuleDescriptionsEgress", 
                "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appsync:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "appsync.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AWSEC2FleetServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:RunInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*", 
                "arn:aws:ec2:*:*:spot-instances-request/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:ec2:fleet-id": "*"
                }
            }
        }
    ]
}
Policy Name: AmazonRoute53AutoNamingFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:GetHostedZone", 
                "route53:ListHostedZonesByName", 
                "route53:CreateHostedZone", 
                "route53:DeleteHostedZone", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateHealthCheck", 
                "route53:GetHealthCheck", 
                "route53:DeleteHealthCheck", 
                "route53:UpdateHealthCheck", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeRegions", 
                "servicediscovery:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSImportExportFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "importexport:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DynamoDBReplicationServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:GetItem", 
                "dynamodb:PutItem", 
                "dynamodb:UpdateItem", 
                "dynamodb:DeleteItem", 
                "dynamodb:DescribeTable", 
                "dynamodb:Scan", 
                "dynamodb:DescribeStream", 
                "dynamodb:GetRecords", 
                "dynamodb:GetShardIterator", 
                "dynamodb:DescribeTimeToLive", 
                "application-autoscaling:DescribeScalableTargets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mechanicalturk:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerRegistryPowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:GetRepositoryPolicy", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecr:DescribeImages", 
                "ecr:BatchGetImage", 
                "ecr:InitiateLayerUpload", 
                "ecr:UploadLayerPart", 
                "ecr:CompleteLayerUpload", 
                "ecr:PutImage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningCreateOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:Add*", 
                "machinelearning:Create*", 
                "machinelearning:Delete*", 
                "machinelearning:Describe*", 
                "machinelearning:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisVideoStreamsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesisvideo:Describe*", 
                "kinesisvideo:Get*", 
                "kinesisvideo:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudTrailReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetBucketLocation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:LookupEvents", 
                "cloudtrail:ListTags", 
                "cloudtrail:ListPublicKeys", 
                "cloudtrail:GetEventSelectors", 
                "s3:ListAllMyBuckets", 
                "kms:ListAliases", 
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaExecute
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:*"
            ], 
            "Resource": "arn:aws:logs:*:*:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject"
            ], 
            "Resource": "arn:aws:s3:::*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTRuleActions
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "dynamodb:PutItem", 
            "kinesis:PutRecord", 
            "iot:Publish", 
            "s3:PutObject", 
            "sns:Publish", 
            "sqs:SendMessage*", 
            "cloudwatch:SetAlarmState", 
            "cloudwatch:PutMetricData", 
            "es:ESHttpPut", 
            "firehose:PutRecord"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AWSQuickSightDescribeRedshift
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "redshift:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticsearchServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "Stmt1480452973134"
        }
    ]
}
Policy Name: AmazonMQReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mq:Describe*", 
                "mq:List*", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: VMImportExportRoleForAWSConnector
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::import-to-ec2-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:ModifySnapshotAttribute", 
                "ec2:CopySnapshot", 
                "ec2:RegisterImage", 
                "ec2:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineCustomActionAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:AcknowledgeJob", 
                "codepipeline:GetJobDetails", 
                "codepipeline:PollForJobs", 
                "codepipeline:PutJobFailureResult", 
                "codepipeline:PutJobSuccessResult"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9ServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:RunInstances", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeInstances", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStacks", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStackResources"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances", 
                "ec2:DeleteSecurityGroup", 
                "ec2:AuthorizeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:DeleteStack"
            ], 
            "Resource": "arn:aws:cloudformation:*:*:stack/aws-cloud9-*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": "arn:aws:ec2:*:*:instance/*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "aws:RequestTag/Name": "aws-cloud9-*"
                }
            }
        }, 
        {
            "Action": [
                "ec2:StartInstances", 
                "ec2:StopInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-cloud9-*"
                }
            }
        }
    ]
}
Policy Name: AWSApplicationAutoscalingECSServicePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:DescribeServices", 
                "ecs:UpdateService", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksInstanceRegistration
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "opsworks:DescribeStackProvisioningParameters", 
                "opsworks:DescribeStacks", 
                "opsworks:RegisterInstance"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCloudDirectoryFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "clouddirectory:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonECSTaskExecutionRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:BatchGetImage", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStorageGatewayFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "storagegateway:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeSnapshots", 
                "ec2:DeleteSnapshot"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonLexReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lex:GetBot", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases", 
                "lex:GetBots", 
                "lex:GetBotChannelAssociation", 
                "lex:GetBotChannelAssociations", 
                "lex:GetBotVersions", 
                "lex:GetBuiltinIntent", 
                "lex:GetBuiltinIntents", 
                "lex:GetBuiltinSlotTypes", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:GetIntentVersions", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:GetSlotTypeVersions", 
                "lex:GetUtterancesView"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonChimeUserManagement
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "chime:ListAccounts", 
                "chime:GetAccount", 
                "chime:GetAccountSettings", 
                "chime:UpdateAccountSettings", 
                "chime:ListUsers", 
                "chime:GetUser", 
                "chime:GetUserByEmail", 
                "chime:InviteUsers", 
                "chime:SuspendUsers", 
                "chime:ActivateUsers", 
                "chime:UpdateUserLicenses", 
                "chime:ResetPersonalPIN", 
                "chime:LogoutUser", 
                "chime:ListDomains", 
                "chime:GetDomain", 
                "chime:ListDirectories", 
                "chime:ListGroups", 
                "chime:SubmitSupportRequest", 
                "chime:ListDelegates", 
                "chime:ListAccountUsageReportData", 
                "chime:GetMeetingDetail", 
                "chime:ListMeetingEvents", 
                "chime:ListMeetingsReportData", 
                "chime:GetUserActivityReportData"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elastictranscoder:Read*", 
                "elastictranscoder:List*", 
                "s3:List*", 
                "iam:List*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSTrustedAdvisorServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:DescribeAccountLimits", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLaunchConfigurations", 
                "cloudformation:DescribeAccountLimits", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListStacks", 
                "cloudfront:ListDistributions", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "dynamodb:DescribeTable", 
                "dynamodb:ListTables", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeReservedInstances", 
                "ec2:DescribeInstances", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeImages", 
                "ec2:DescribeVolumes", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeReservedInstancesOfferings", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancerAttributes", 
                "elasticloadbalancing:DescribeLoadBalancerPolicies", 
                "elasticloadbalancing:DescribeLoadBalancerPolicyTypes", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "iam:GenerateCredentialReport", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetCredentialReport", 
                "iam:GetServerCertificate", 
                "iam:ListServerCertificates", 
                "kinesis:DescribeLimits", 
                "rds:DescribeAccountAttributes", 
                "rds:DescribeDBClusters", 
                "rds:DescribeDBEngineVersions", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBParameterGroups", 
                "rds:DescribeDBParameters", 
                "rds:DescribeDBSecurityGroups", 
                "rds:DescribeDBSnapshots", 
                "rds:DescribeDBSubnetGroups", 
                "rds:DescribeEngineDefaultParameters", 
                "rds:DescribeEvents", 
                "rds:DescribeOptionGroupOptions", 
                "rds:DescribeOptionGroups", 
                "rds:DescribeOrderableDBInstanceOptions", 
                "rds:DescribeReservedDBInstances", 
                "rds:DescribeReservedDBInstancesOfferings", 
                "rds:ListTagsForResource", 
                "redshift:DescribeClusters", 
                "redshift:DescribeReservedNodeOfferings", 
                "redshift:DescribeReservedNodes", 
                "route53:GetHealthCheck", 
                "route53:GetHostedZone", 
                "route53:ListHealthChecks", 
                "route53:ListHostedZones", 
                "route53:ListHostedZonesByName", 
                "route53:ListResourceRecordSets", 
                "s3:GetBucketAcl", 
                "s3:GetBucketPolicy", 
                "s3:GetBucketLocation", 
                "s3:GetBucketLogging", 
                "s3:GetBucketVersioning", 
                "s3:ListBucket", 
                "s3:ListObjects", 
                "s3:ListAllMyBuckets", 
                "ses:GetSendQuota", 
                "sqs:ListQueues", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTConfigReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:DescribeAuthorizer", 
                "iot:DescribeCACertificate", 
                "iot:DescribeCertificate", 
                "iot:DescribeCertificateTag", 
                "iot:DescribeDefaultAuthorizer", 
                "iot:DescribeEndpoint", 
                "iot:DescribeEventConfigurations", 
                "iot:DescribeIndex", 
                "iot:DescribeJob", 
                "iot:DescribeJobExecution", 
                "iot:DescribeRoleAlias", 
                "iot:DescribeStream", 
                "iot:DescribeThing", 
                "iot:DescribeThingGroup", 
                "iot:DescribeThingRegistrationTask", 
                "iot:DescribeThingType", 
                "iot:GetEffectivePolicies", 
                "iot:GetIndexingConfiguration", 
                "iot:GetJobDocument", 
                "iot:GetLoggingOptions", 
                "iot:GetOTAUpdate", 
                "iot:GetPolicy", 
                "iot:GetPolicyVersion", 
                "iot:GetRegistrationCode", 
                "iot:GetTopicRule", 
                "iot:GetV2LoggingOptions", 
                "iot:ListAttachedPolicies", 
                "iot:ListAuthorizers", 
                "iot:ListCACertificates", 
                "iot:ListCertificates", 
                "iot:ListCertificatesByCA", 
                "iot:ListIndices", 
                "iot:ListJobExecutionsForJob", 
                "iot:ListJobExecutionsForThing", 
                "iot:ListJobs", 
                "iot:ListOTAUpdates", 
                "iot:ListOutgoingCertificates", 
                "iot:ListPolicies", 
                "iot:ListPolicyPrincipals", 
                "iot:ListPolicyVersions", 
                "iot:ListPrincipalPolicies", 
                "iot:ListPrincipalThings", 
                "iot:ListRoleAliases", 
                "iot:ListStreams", 
                "iot:ListTargetsForPolicy", 
                "iot:ListThingGroups", 
                "iot:ListThingGroupsForThing", 
                "iot:ListThingPrincipals", 
                "iot:ListThingRegistrationTaskReports", 
                "iot:ListThingRegistrationTasks", 
                "iot:ListThings", 
                "iot:ListThingsInThingGroup", 
                "iot:ListThingTypes", 
                "iot:ListTopicRules", 
                "iot:ListV2LoggingLevels", 
                "iot:SearchIndex", 
                "iot:TestAuthorization", 
                "iot:TestInvokeAuthorizer"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonWorkMailReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ses:Describe*", 
                "ses:Get*", 
                "workmail:Describe*", 
                "workmail:Get*", 
                "workmail:List*", 
                "workmail:Search*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDMSVPCManagementRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaKinesisExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesis:DescribeStream", 
                "kinesis:GetRecords", 
                "kinesis:GetShardIterator", 
                "kinesis:ListStreams", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ResourceGroupsandTagEditorReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "tag:getResources", 
                "tag:getTagKeys", 
                "tag:getTagValues"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRekognitionServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:AmazonRekognition*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesis:PutRecord", 
                "kinesis:PutRecords"
            ], 
            "Resource": "arn:aws:kinesis:*:*:stream/AmazonRekognition*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesisvideo:GetDataEndpoint", 
                "kinesisvideo:GetMedia"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMAutomationRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:Automation*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateImage", 
                "ec2:CopyImage", 
                "ec2:DeregisterImage", 
                "ec2:DescribeImages", 
                "ec2:DeleteSnapshot", 
                "ec2:StartInstances", 
                "ec2:RunInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:DescribeTags", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:UpdateStack", 
                "cloudformation:DeleteStack"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": [
                "arn:aws:sns:*:*:Automation*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudHSMServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ComprehendReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "comprehend:DetectDominantLanguage", 
                "comprehend:BatchDetectDominantLanguage", 
                "comprehend:DetectEntities", 
                "comprehend:BatchDetectEntities", 
                "comprehend:DetectKeyPhrases", 
                "comprehend:BatchDetectKeyPhrases", 
                "comprehend:DetectSentiment", 
                "comprehend:BatchDetectSentiment", 
                "comprehend:DescribeTopicsDetectionJob", 
                "comprehend:ListTopicsDetectionJobs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStepFunctionsConsoleFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "states:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:ListRoles", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/service-role/StatesExecutionRole*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "lambda:ListFunctions", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSQuickSightIoTAnalyticsAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iotanalytics:ListDatasets", 
                "iotanalytics:DescribeDataset", 
                "iotanalytics:GetDatasetContent"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeBuildReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codebuild:BatchGet*", 
                "codebuild:Get*", 
                "codebuild:List*", 
                "codecommit:GetBranch", 
                "codecommit:GetCommit", 
                "codecommit:GetRepository"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: LexBotPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "polly:SynthesizeSpeech"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMacieFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "macie:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningManageRealTimeEndpointOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:CreateRealtimeEndpoint", 
                "machinelearning:DeleteRealtimeEndpoint"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsInvocationAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesis:PutRecord"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsInvocationAccess"
        }
    ]
}
Policy Name: CloudFrontReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:ListCertificates", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "iam:ListServerCertificates", 
                "route53:List*", 
                "waf:ListWebACLs", 
                "waf:GetWebACL"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDeepLensServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:CreateThing", 
                "iot:DeleteThing", 
                "iot:DeleteThingShadow", 
                "iot:DescribeThing", 
                "iot:GetThingShadow", 
                "iot:UpdateThing", 
                "iot:UpdateThingShadow"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTThingAccess"
        }, 
        {
            "Action": [
                "iot:AttachThingPrincipal", 
                "iot:DetachThingPrincipal"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*", 
                "arn:aws:iot:*:*:cert/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTCertificateAccess"
        }, 
        {
            "Action": [
                "iot:CreateKeysAndCertificate", 
                "iot:CreatePolicy", 
                "iot:CreatePolicyVersion"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTCreateCertificateAndPolicyAccess"
        }, 
        {
            "Action": [
                "iot:AttachPrincipalPolicy"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:policy/deeplens*", 
                "arn:aws:iot:*:*:cert/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTAttachCertificatePolicyAccess"
        }, 
        {
            "Action": [
                "iot:GetThingShadow", 
                "iot:UpdateThingShadow"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTDataAccess"
        }, 
        {
            "Action": [
                "iot:DescribeEndpoint"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTEndpointAccess"
        }, 
        {
            "Action": [
                "deeplens:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAccess"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::deeplens*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensS3ObjectAccess"
        }, 
        {
            "Action": [
                "s3:DeleteBucket", 
                "s3:ListBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensS3Buckets"
        }, 
        {
            "Action": [
                "s3:CreateBucket"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensCreateS3Buckets"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "greengrass.amazonaws.com", 
                        "sagemaker.amazonaws.com"
                    ]
                }
            }, 
            "Sid": "DeepLensIAMPassRoleAccess"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/AWSDeepLens*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEqualsIfExists": {
                    "iam:PassedToService": "lambda.amazonaws.com"
                }
            }, 
            "Sid": "DeepLensIAMLambdaPassRoleAccess"
        }, 
        {
            "Action": [
                "greengrass:AssociateRoleToGroup", 
                "greengrass:AssociateServiceRoleToAccount", 
                "greengrass:CreateResourceDefinition", 
                "greengrass:CreateResourceDefinitionVersion", 
                "greengrass:CreateCoreDefinition", 
                "greengrass:CreateCoreDefinitionVersion", 
                "greengrass:CreateDeployment", 
                "greengrass:CreateFunctionDefinition", 
                "greengrass:CreateFunctionDefinitionVersion", 
                "greengrass:CreateGroup", 
                "greengrass:CreateGroupCertificateAuthority", 
                "greengrass:CreateGroupVersion", 
                "greengrass:CreateLoggerDefinition", 
                "greengrass:CreateLoggerDefinitionVersion", 
                "greengrass:CreateSubscriptionDefinition", 
                "greengrass:CreateSubscriptionDefinitionVersion", 
                "greengrass:DeleteCoreDefinition", 
                "greengrass:DeleteFunctionDefinition", 
                "greengrass:DeleteGroup", 
                "greengrass:DeleteLoggerDefinition", 
                "greengrass:DeleteSubscriptionDefinition", 
                "greengrass:DisassociateRoleFromGroup", 
                "greengrass:DisassociateServiceRoleFromAccount", 
                "greengrass:GetAssociatedRole", 
                "greengrass:GetConnectivityInfo", 
                "greengrass:GetCoreDefinition", 
                "greengrass:GetCoreDefinitionVersion", 
                "greengrass:GetDeploymentStatus", 
                "greengrass:GetDeviceDefinition", 
                "greengrass:GetDeviceDefinitionVersion", 
                "greengrass:GetFunctionDefinition", 
                "greengrass:GetFunctionDefinitionVersion", 
                "greengrass:GetGroup", 
                "greengrass:GetGroupCertificateAuthority", 
                "greengrass:GetGroupCertificateConfiguration", 
                "greengrass:GetGroupVersion", 
                "greengrass:GetLoggerDefinition", 
                "greengrass:GetLoggerDefinitionVersion", 
                "greengrass:GetServiceRoleForAccount", 
                "greengrass:GetSubscriptionDefinition", 
                "greengrass:GetSubscriptionDefinitionVersion", 
                "greengrass:ListCoreDefinitionVersions", 
                "greengrass:ListCoreDefinitions", 
                "greengrass:ListDeployments", 
                "greengrass:ListDeviceDefinitionVersions", 
                "greengrass:ListDeviceDefinitions", 
                "greengrass:ListFunctionDefinitionVersions", 
                "greengrass:ListFunctionDefinitions", 
                "greengrass:ListGroupCertificateAuthorities", 
                "greengrass:ListGroupVersions", 
                "greengrass:ListGroups", 
                "greengrass:ListLoggerDefinitionVersions", 
                "greengrass:ListLoggerDefinitions", 
                "greengrass:ListSubscriptionDefinitionVersions", 
                "greengrass:ListSubscriptionDefinitions", 
                "greengrass:ResetDeployments", 
                "greengrass:UpdateConnectivityInfo", 
                "greengrass:UpdateCoreDefinition", 
                "greengrass:UpdateDeviceDefinition", 
                "greengrass:UpdateFunctionDefinition", 
                "greengrass:UpdateGroup", 
                "greengrass:UpdateGroupCertificateConfiguration", 
                "greengrass:UpdateLoggerDefinition", 
                "greengrass:UpdateSubscriptionDefinition"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensGreenGrassAccess"
        }, 
        {
            "Action": [
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:GetFunction", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListFunctions", 
                "lambda:ListVersionsByFunction", 
                "lambda:PublishVersion", 
                "lambda:UpdateFunctionCode", 
                "lambda:UpdateFunctionConfiguration"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensLambdaAdminFunctionAccess"
        }, 
        {
            "Action": [
                "sagemaker:CreateTrainingJob", 
                "sagemaker:DescribeTrainingJob", 
                "sagemaker:StopTrainingJob"
            ], 
            "Resource": [
                "arn:aws:sagemaker:*:*:training-job/deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensSageMakerAccess"
        }, 
        {
            "Action": [
                "acuity:CreateStream", 
                "acuity:DescribeStream", 
                "acuity:DeleteStream"
            ], 
            "Resource": [
                "arn:aws:acuity:*:*:stream/deeplens*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityStreamAccess"
        }, 
        {
            "Action": [
                "acuity:GetDataEndpoint"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityEndpointAccess"
        }
    ]
}
Policy Name: AmazonSNSRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:PutMetricFilter", 
                "logs:PutRetentionPolicy"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonInspectorServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeInstances", 
                "ec2:DescribeTags", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeLoadBalancerAttributes", 
                "elasticloadbalancing:DescribeRules", 
                "elasticloadbalancing:DescribeTags", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsFinancialReportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mobileanalytics:GetReports", 
                "mobileanalytics:GetFinancialReports"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkService
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:*"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awseb-*", 
                "arn:aws:cloudformation:*:*:stack/eb-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCloudformationOperationsOnElasticBeanstalkStacks"
        }, 
        {
            "Action": [
                "logs:DeleteLogGroup"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDeleteCloudwatchLogGroups"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowS3OperationsOnElasticBeanstalkBuckets"
        }, 
        {
            "Action": [
                "autoscaling:AttachInstances", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:CreateLaunchConfiguration", 
                "autoscaling:DeleteLaunchConfiguration", 
                "autoscaling:DeleteAutoScalingGroup", 
                "autoscaling:DeleteScheduledAction", 
                "autoscaling:DescribeAccountLimits", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:DescribeLaunchConfigurations", 
                "autoscaling:DescribeLoadBalancers", 
                "autoscaling:DescribeNotificationConfigurations", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:DescribeScheduledActions", 
                "autoscaling:DetachInstances", 
                "autoscaling:PutScheduledUpdateGroupAction", 
                "autoscaling:ResumeProcesses", 
                "autoscaling:SetDesiredCapacity", 
                "autoscaling:SuspendProcesses", 
                "autoscaling:TerminateInstanceInAutoScalingGroup", 
                "autoscaling:UpdateAutoScalingGroup", 
                "cloudwatch:PutMetricAlarm", 
                "ec2:AssociateAddress", 
                "ec2:AllocateAddress", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DisassociateAddress", 
                "ec2:ReleaseAddress", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:TerminateInstances", 
                "ecs:CreateCluster", 
                "ecs:DeleteCluster", 
                "ecs:DescribeClusters", 
                "ecs:RegisterTaskDefinition", 
                "elasticbeanstalk:*", 
                "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer", 
                "elasticloadbalancing:ConfigureHealthCheck", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:RegisterTargets", 
                "elasticloadbalancing:DeregisterTargets", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "logs:CreateLogGroup", 
                "logs:PutRetentionPolicy", 
                "rds:DescribeDBEngineVersions", 
                "rds:DescribeDBInstances", 
                "rds:DescribeOrderableDBInstanceOptions", 
                "s3:CopyObject", 
                "s3:GetObject", 
                "s3:GetObjectAcl", 
                "s3:GetObjectMetadata", 
                "s3:ListBucket", 
                "s3:listBuckets", 
                "s3:ListObjects", 
                "sns:CreateTopic", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptionsByTopic", 
                "sns:Subscribe", 
                "sns:SetTopicAttributes", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "codebuild:CreateProject", 
                "codebuild:DeleteProject", 
                "codebuild:BatchGetBuilds", 
                "codebuild:StartBuild"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowOperations"
        }
    ]
}
Policy Name: IAMReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:Get*", 
                "iam:List*", 
                "iam:SimulateCustomPolicy", 
                "iam:SimulatePrincipalPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRDSReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:Describe*", 
                "rds:ListTagsForResource", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCognitoPowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-identity:*", 
                "cognito-idp:*", 
                "cognito-sync:*", 
                "iam:ListRoles", 
                "iam:ListOpenIdConnectProviders", 
                "sns:ListPlatformApplications"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53AutoNamingRegistrantAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:GetHostedZone", 
                "route53:ListHostedZonesByName", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateHealthCheck", 
                "route53:GetHealthCheck", 
                "route53:DeleteHealthCheck", 
                "route53:UpdateHealthCheck", 
                "servicediscovery:Get*", 
                "servicediscovery:List*", 
                "servicediscovery:RegisterInstance", 
                "servicediscovery:DeregisterInstance"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticFileSystemFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "elasticfilesystem:*", 
                "kms:DescribeKey", 
                "kms:ListAliases"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: LexChannelPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lex:PostText"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ServerMigrationConnector
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "iam:GetUser", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sms:SendMessage", 
                "sms:GetMessages"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteObject", 
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:PutObject", 
                "s3:PutObjectAcl", 
                "s3:PutLifecycleConfiguration", 
                "s3:AbortMultipartUpload", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts"
            ], 
            "Resource": [
                "arn:aws:s3:::sms-b-*", 
                "arn:aws:s3:::import-to-ec2-*", 
                "arn:aws:s3:::server-migration-service-upgrade", 
                "arn:aws:s3:::server-migration-service-upgrade/*", 
                "arn:aws:s3:::connector-platform-upgrade-info/*", 
                "arn:aws:s3:::connector-platform-upgrade-info", 
                "arn:aws:s3:::connector-platform-upgrade-bundles/*", 
                "arn:aws:s3:::connector-platform-upgrade-bundles", 
                "arn:aws:s3:::connector-platform-release-notes/*", 
                "arn:aws:s3:::connector-platform-release-notes"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "awsconnector:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "SNS:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonESCognitoAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-idp:DescribeUserPool", 
                "cognito-idp:CreateUserPoolClient", 
                "cognito-idp:DeleteUserPoolClient", 
                "cognito-idp:DescribeUserPoolClient", 
                "cognito-idp:AdminInitiateAuth", 
                "cognito-idp:AdminUserGlobalSignOut", 
                "cognito-idp:ListUserPoolClients", 
                "cognito-identity:DescribeIdentityPool", 
                "cognito-identity:UpdateIdentityPool", 
                "cognito-identity:SetIdentityPoolRoles", 
                "cognito-identity:GetIdentityPoolRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "cognito-identity.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonChimeReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "chime:ListAccounts", 
                "chime:GetAccount", 
                "chime:GetAccountSettings", 
                "chime:ListUsers", 
                "chime:GetUser", 
                "chime:GetUserByEmail", 
                "chime:ListDomains", 
                "chime:GetDomain", 
                "chime:ListGroups", 
                "chime:ListDirectories", 
                "chime:ListCDRBucket", 
                "chime:GetCDRBucket", 
                "chime:ListDelegates", 
                "chime:GetAccountResource", 
                "chime:ValidateDelegate", 
                "chime:ListAccountUsageReportData", 
                "chime:GetUserActivityReportData"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonZocaloFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "zocalo:*", 
                "ds:*", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeChangeSet", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStackResources", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:GetCognitoEvents", 
                "dynamodb:BatchGetItem", 
                "dynamodb:DescribeStream", 
                "dynamodb:DescribeTable", 
                "dynamodb:GetItem", 
                "dynamodb:ListStreams", 
                "dynamodb:ListTables", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "events:Describe*", 
                "events:List*", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListRolePolicies", 
                "iam:ListRoles", 
                "iot:DescribeEndpoint", 
                "iot:GetTopicRules", 
                "iot:ListPolicies", 
                "iot:ListThings", 
                "iot:ListTopicRules", 
                "kinesis:DescribeStream", 
                "kinesis:ListStreams", 
                "kms:ListAliases", 
                "lambda:Get*", 
                "lambda:List*", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:DescribeMetricFilters", 
                "logs:GetLogEvents", 
                "s3:Get*", 
                "s3:List*", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sqs:ListQueues", 
                "tag:GetResources"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAccountUsageReportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-portal:ViewUsage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTOTAUpdate
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "iot:CreateJob", 
            "signer:DescribeSigningJob"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AmazonMQFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mq:*", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:DetachNetworkInterface", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceGetEntitlements
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:GetEntitlements"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceforEC2Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:CreateCluster", 
                "ecs:DeregisterContainerInstance", 
                "ecs:DiscoverPollEndpoint", 
                "ecs:Poll", 
                "ecs:RegisterContainerInstance", 
                "ecs:StartTelemetrySession", 
                "ecs:UpdateContainerInstancesState", 
                "ecs:Submit*", 
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:BatchGetImage", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAppStreamFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:ListRoles", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/service-role/ApplicationAutoScalingForAmazonAppStreamAccess", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "application-autoscaling.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSIoTDataAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:Connect", 
                "iot:Publish", 
                "iot:Subscribe", 
                "iot:Receive", 
                "iot:GetThingShadow", 
                "iot:UpdateThingShadow", 
                "iot:DeleteThingShadow"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonTranscribeReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "transcribe:Get*", 
                "transcribe:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonESFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "es:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ServerMigrationServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:ModifySnapshotAttribute", 
                "ec2:CopySnapshot", 
                "ec2:CopyImage", 
                "ec2:Describe*", 
                "ec2:DeleteSnapshot", 
                "ec2:DeregisterImage", 
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSWAFFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "waf:*", 
                "waf-regional:*", 
                "elasticloadbalancing:SetWebACL"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSArtifactAccountSync
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "organizations:ListAccounts", 
                "organizations:DescribeOrganization"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisFirehoseFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "firehose:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "logs:Get*", 
                "logs:List*", 
                "logs:Describe*", 
                "logs:TestMetricFilter", 
                "sns:Get*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaBasicExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ResourceGroupsandTagEditorFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "tag:getResources", 
                "tag:getTagKeys", 
                "tag:getTagValues", 
                "tag:TagResources", 
                "tag:UntagResources", 
                "tag:AddResourceTags", 
                "tag:RemoveResourceTags"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSKeyManagementServicePowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:Describe*", 
                "kms:GenerateRandom", 
                "kms:Get*", 
                "kms:List*", 
                "kms:TagResource", 
                "kms:UntagResource", 
                "iam:ListGroups", 
                "iam:ListRoles", 
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingEC2SpotFleetRequestPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeSpotFleetRequests", 
                "ec2:ModifySpotFleetRequest", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSImportExportReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "importexport:ListJobs", 
                "importexport:GetStatus"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeVolumeStatus", 
                "ec2:DescribeVolumes", 
                "ec2:RebootInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:CreateSnapshot"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListBucket", 
                "s3:Put*", 
                "s3:Get*", 
                "s3:*MultipartUpload*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "1"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "2"
        }, 
        {
            "Action": [
                "s3:*Policy*", 
                "sns:*Permission*", 
                "sns:*Delete*", 
                "s3:*Delete*", 
                "sns:*Remove*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Deny", 
            "Sid": "3"
        }
    ]
}
Policy Name: AWSGlueConsoleFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glue:*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSubnetGroups", 
                "iam:ListRoles", 
                "iam:ListRolePolicies", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeInstances", 
                "rds:DescribeDBInstances", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:GetBucketAcl", 
                "s3:GetBucketLocation", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplateSummary", 
                "dynamodb:ListTables"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*/*", 
                "arn:aws:s3:::*/*aws-glue-*/*", 
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:/aws-glue/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack"
            ], 
            "Resource": "arn:aws:cloudformation:*:*:stack/aws-glue*/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:RunInstances"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*", 
                "arn:aws:ec2:*:*:key-pair/*", 
                "arn:aws:ec2:*:*:image/*", 
                "arn:aws:ec2:*:*:security-group/*", 
                "arn:aws:ec2:*:*:network-interface/*", 
                "arn:aws:ec2:*:*:subnet/*", 
                "arn:aws:ec2:*:*:volume/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances", 
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/aws-glue-*/*"
                }, 
                "StringEquals": {
                    "ec2:ResourceTag/aws:cloudformation:logical-id": "ZeppelinInstance"
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "arn:aws:iam::*:role/AWSGlueServiceRole*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "glue.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "arn:aws:iam::*:role/AWSGlueServiceNotebookRole*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/service-role/AWSGlueServiceRole*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "glue.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:Describe*", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DeregisterTargets", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:RegisterTargets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDeviceFarmFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "devicefarm:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:Describe*", 
                "ssm:Get*", 
                "ssm:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStepFunctionsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "states:ListStateMachines", 
                "states:ListActivities", 
                "states:DescribeStateMachine", 
                "states:DescribeStateMachineForExecution", 
                "states:ListExecutions", 
                "states:DescribeExecution", 
                "states:GetExecutionHistory", 
                "states:DescribeActivity"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceRead-only
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:ViewSubscriptions", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingDynamoDBTablePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:DescribeTable", 
                "dynamodb:UpdateTable", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:*", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "s3:CreateBucket", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:PutBucketPolicy", 
                "codecommit:ListBranches", 
                "codecommit:ListRepositories", 
                "codedeploy:GetApplication", 
                "codedeploy:GetDeploymentGroup", 
                "codedeploy:ListApplications", 
                "codedeploy:ListDeploymentGroups", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListFunctions", 
                "opsworks:DescribeApps", 
                "opsworks:DescribeLayers", 
                "opsworks:DescribeStacks", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListChangeSets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9User
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloud9:CreateEnvironment*", 
                "cloud9:ValidateEnvironmentName", 
                "cloud9:GetUserPublicKey", 
                "cloud9:UpdateUserSettings", 
                "cloud9:GetUserSettings", 
                "iam:GetUser", 
                "iam:ListUsers", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloud9:DescribeEnvironmentMemberships"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "Null": {
                    "cloud9:UserArn": "true", 
                    "cloud9:EnvironmentId": "true"
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "cloud9.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSGreengrassResourceAccessRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:DeleteThingShadow", 
                "iot:GetThingShadow", 
                "iot:UpdateThingShadow"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/GG_*", 
                "arn:aws:iot:*:*:thing/*-gcm", 
                "arn:aws:iot:*:*:thing/*-gda", 
                "arn:aws:iot:*:*:thing/*-gci"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToShadows"
        }, 
        {
            "Action": [
                "iot:DescribeThing"
            ], 
            "Resource": "arn:aws:iot:*:*:thing/*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToDescribeThings"
        }, 
        {
            "Action": [
                "iot:DescribeCertificate"
            ], 
            "Resource": "arn:aws:iot:*:*:cert/*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToDescribeCertificates"
        }, 
        {
            "Action": [
                "greengrass:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToCallGreengrassServices"
        }, 
        {
            "Action": [
                "lambda:GetFunction", 
                "lambda:GetFunctionConfiguration"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToGetLambdaFunctions"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::*Greengrass*", 
                "arn:aws:s3:::*GreenGrass*", 
                "arn:aws:s3:::*greengrass*", 
                "arn:aws:s3:::*Sagemaker*", 
                "arn:aws:s3:::*SageMaker*", 
                "arn:aws:s3:::*sagemaker*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToS3Objects"
        }, 
        {
            "Action": [
                "s3:GetBucketLocation"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToS3BucketLocation"
        }, 
        {
            "Action": [
                "sagemaker:DescribeTrainingJob"
            ], 
            "Resource": [
                "arn:aws:sagemaker:*:*:training-job/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToSageMakerTrainingJobs"
        }
    ]
}
Policy Name: NetworkAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "ec2:AllocateAddress", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssociateAddress", 
                "ec2:AssociateDhcpOptions", 
                "ec2:AssociateRouteTable", 
                "ec2:AttachInternetGateway", 
                "ec2:AttachNetworkInterface", 
                "ec2:AttachVpnGateway", 
                "ec2:CreateCustomerGateway", 
                "ec2:CreateDhcpOptions", 
                "ec2:CreateFlowLogs", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateNatGateway", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAclEntry", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:CreateVpcEndpoint", 
                "ec2:CreateVpnConnection", 
                "ec2:CreateVpnConnectionRoute", 
                "ec2:CreateVpnGateway", 
                "ec2:CreatePlacementGroup", 
                "ec2:DeletePlacementGroup", 
                "ec2:DescribePlacementGroups", 
                "ec2:DeleteFlowLogs", 
                "ec2:DeleteNatGateway", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteTags", 
                "ec2:DeleteVpc", 
                "ec2:DeleteVpcEndpoints", 
                "ec2:DeleteVpnConnection", 
                "ec2:DeleteVpnConnectionRoute", 
                "ec2:DeleteVpnGateway", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeVpcClassicLinkDnsSupport", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "ec2:DetachInternetGateway", 
                "ec2:DetachNetworkInterface", 
                "ec2:DetachVpnGateway", 
                "ec2:DisableVgwRoutePropagation", 
                "ec2:DisassociateAddress", 
                "ec2:DisassociateRouteTable", 
                "ec2:EnableVgwRoutePropagation", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:ModifySubnetAttribute", 
                "ec2:ModifyVpcAttribute", 
                "ec2:ModifyVpcEndpoint", 
                "ec2:MoveAddressToVpc", 
                "ec2:ReleaseAddress", 
                "ec2:ReplaceNetworkAclAssociation", 
                "ec2:ReplaceNetworkAclEntry", 
                "ec2:ReplaceRoute", 
                "ec2:ReplaceRouteTableAssociation", 
                "ec2:ResetNetworkInterfaceAttribute", 
                "ec2:RestoreAddressToClassic", 
                "ec2:UnassignPrivateIpAddresses", 
                "directconnect:*", 
                "route53:*", 
                "route53domains:*", 
                "cloudfront:ListDistributions", 
                "elasticloadbalancing:*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:RetrieveEnvironmentInfo", 
                "elasticbeanstalk:RequestEnvironmentInfo", 
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:CreateTopic", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AcceptVpcPeeringConnection", 
                "ec2:AttachClassicLinkVpc", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateVpcPeeringConnection", 
                "ec2:DeleteCustomerGateway", 
                "ec2:DeleteDhcpOptions", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteNetworkAcl", 
                "ec2:DeleteNetworkAclEntry", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteVolume", 
                "ec2:DeleteVpcPeeringConnection", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:DisableVpcClassicLink", 
                "ec2:EnableVpcClassicLink", 
                "ec2:GetConsoleScreenshot", 
                "ec2:RejectVpcPeeringConnection", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "s3:GetBucketWebsiteConfiguration"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:ListRoles", 
                "iam:PassRole"
            ], 
            "Resource": "arn:aws:iam::*:role/flow-logs-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonWorkSpacesApplicationManagerAdminAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "wam:AuthenticatePackager", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDRSVPCManagement
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRedshiftServiceLinkedRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeAddresses", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSXrayFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "xray:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkWorkerTier
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "MetricsAccess"
        }, 
        {
            "Action": [
                "xray:PutTraceSegments", 
                "xray:PutTelemetryRecords"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "XRayAccess"
        }, 
        {
            "Action": [
                "sqs:ChangeMessageVisibility", 
                "sqs:DeleteMessage", 
                "sqs:ReceiveMessage", 
                "sqs:SendMessage"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "QueueAccess"
        }, 
        {
            "Action": [
                "s3:Get*", 
                "s3:List*", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "BucketAccess"
        }, 
        {
            "Action": [
                "dynamodb:BatchGetItem", 
                "dynamodb:BatchWriteItem", 
                "dynamodb:DeleteItem", 
                "dynamodb:GetItem", 
                "dynamodb:PutItem", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "dynamodb:UpdateItem"
            ], 
            "Resource": [
                "arn:aws:dynamodb:*:*:table/*-stack-AWSEBWorkerCronLeaderRegistry*"
            ], 
            "Effect": "Allow", 
            "Sid": "DynamoPeriodicTasks"
        }, 
        {
            "Action": [
                "logs:PutLogEvents", 
                "logs:CreateLogStream"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudWatchLogsAccess"
        }
    ]
}
Policy Name: AWSDirectConnectFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "directconnect:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeBuildAdminAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codebuild:*", 
                "codecommit:GetBranch", 
                "codecommit:GetCommit", 
                "codecommit:GetRepository", 
                "codecommit:ListBranches", 
                "codecommit:ListRepositories", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "s3:GetBucketLocation", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:PutParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisAnalyticsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "kinesisanalytics:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesis:CreateStream", 
                "kinesis:DeleteStream", 
                "kinesis:DescribeStream", 
                "kinesis:ListStreams", 
                "kinesis:PutRecord", 
                "kinesis:PutRecords"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "firehose:DescribeDeliveryStream", 
                "firehose:ListDeliveryStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "logs:GetLogEvents", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListPolicyVersions", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/service-role/kinesis-analytics*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: APIGatewayServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticloadbalancing:AddListenerCertificates", 
                "elasticloadbalancing:RemoveListenerCertificates", 
                "elasticloadbalancing:ModifyListener"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAccountActivityAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-portal:ViewBilling"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGlacierFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "glacier:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonWorkMailFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:AuthorizeApplication", 
                "ds:CheckAlias", 
                "ds:CreateAlias", 
                "ds:CreateDirectory", 
                "ds:CreateIdentityPoolDirectory", 
                "ds:CreateDomain", 
                "ds:DeleteAlias", 
                "ds:DeleteDirectory", 
                "ds:DescribeDirectories", 
                "ds:ExtendDirectory", 
                "ds:GetDirectoryLimits", 
                "ds:ListAuthorizedApplications", 
                "ds:UnauthorizeApplication", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteVpc", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeDomains", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "kms:DescribeKey", 
                "kms:ListAliases", 
                "ses:*", 
                "workmail:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DAXServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceManageSubscriptions
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:ViewSubscriptions", 
                "aws-marketplace:Subscribe", 
                "aws-marketplace:Unsubscribe"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkCustomPlatformforEC2Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CopyImage", 
                "ec2:CreateImage", 
                "ec2:CreateKeypair", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:DeleteKeypair", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteVolume", 
                "ec2:DeregisterImage", 
                "ec2:DescribeImageAttribute", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeRegions", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "ec2:GetPasswordData", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:ModifySnapshotAttribute", 
                "ec2:RegisterImage", 
                "ec2:RunInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "EC2Access"
        }, 
        {
            "Action": [
                "s3:Get*", 
                "s3:List*", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "BucketAccess"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/platform/*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchLogsAccess"
        }
    ]
}
Policy Name: AWSSupportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "support:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticMapReduceforAutoScalingRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "elasticmapreduce:ListInstanceGroups", 
                "elasticmapreduce:ModifyInstanceGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaInvocation-DynamoDB
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "dynamodb:DescribeStream", 
                "dynamodb:GetRecords", 
                "dynamodb:GetShardIterator", 
                "dynamodb:ListStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSServiceCatalogEndUserFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:SetStackPolicy", 
                "cloudformation:ValidateTemplate", 
                "cloudformation:UpdateStack", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:DescribeChangeSet", 
                "cloudformation:ExecuteChangeSet", 
                "cloudformation:ListChangeSets", 
                "cloudformation:DeleteChangeSet"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/SC-*", 
                "arn:aws:cloudformation:*:*:changeSet/SC-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:GetTemplateSummary", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:ProvisionProduct", 
                "servicecatalog:SearchProducts"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "servicecatalog:DescribeProvisionedProduct", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:ScanProvisionedProducts", 
                "servicecatalog:TerminateProvisionedProduct", 
                "servicecatalog:UpdateProvisionedProduct", 
                "servicecatalog:SearchProvisionedProducts", 
                "servicecatalog:CreateProvisionedProductPlan", 
                "servicecatalog:DescribeProvisionedProductPlan", 
                "servicecatalog:ExecuteProvisionedProductPlan", 
                "servicecatalog:DeleteProvisionedProductPlan", 
                "servicecatalog:ListProvisionedProductPlans"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "servicecatalog:userLevel": "self"
                }
            }
        }
    ]
}
Policy Name: IAMUserSSHKeys
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:DeleteSSHPublicKey", 
                "iam:GetSSHPublicKey", 
                "iam:ListSSHPublicKeys", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSageMakerReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sagemaker:DescribeEndpoint", 
                "sagemaker:DescribeEndpointConfig", 
                "sagemaker:DescribeModel", 
                "sagemaker:DescribeTrainingJob", 
                "sagemaker:DescribeNotebookInstance", 
                "sagemaker:ListEndpointConfigs", 
                "sagemaker:ListEndpoints", 
                "sagemaker:ListModels", 
                "sagemaker:ListTags", 
                "sagemaker:ListTrainingJobs", 
                "sagemaker:ListNotebookInstances", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:DescribeScheduledActions", 
                "cloudwatch:DescribeAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSQuickSightDescribeRDS
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigRulesExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::*/AWSLogs/*/Config/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "config:Put*", 
                "config:Get*", 
                "config:List*", 
                "config:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonESReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "es:Describe*", 
                "es:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployDeployerAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codedeploy:Batch*", 
                "codedeploy:CreateDeployment", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codedeploy:RegisterApplicationRevision"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonPollyFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "polly:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMMaintenanceWindowRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:GetAutomationExecution", 
                "ssm:GetParameters", 
                "ssm:ListCommands", 
                "ssm:SendCommand", 
                "ssm:StartAutomationExecution"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1477803259000"
        }, 
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:SSM*", 
                "arn:aws:lambda:*:*:function:*:SSM*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1477803259001"
        }, 
        {
            "Action": [
                "states:DescribeExecution", 
                "states:StartExecution"
            ], 
            "Resource": [
                "arn:aws:states:*:*:stateMachine:SSM*", 
                "arn:aws:states:*:*:execution:SSM*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1477803259002"
        }
    ]
}
Policy Name: AmazonRDSEnhancedMonitoringRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:PutRetentionPolicy"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:RDS*"
            ], 
            "Effect": "Allow", 
            "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogGroups"
        }, 
        {
            "Action": [
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:RDS*:log-stream:*"
            ], 
            "Effect": "Allow", 
            "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogStreams"
        }
    ]
}
Policy Name: AmazonLexFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "kms:DescribeKey", 
                "kms:ListAliases", 
                "lambda:GetPolicy", 
                "lambda:ListFunctions", 
                "lex:*", 
                "polly:DescribeVoices", 
                "polly:SynthesizeSpeech"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:AddPermission", 
                "lambda:RemovePermission"
            ], 
            "Resource": "arn:aws:lambda:*:*:function:AmazonLex*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "lambda:Principal": "lex.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:DeleteRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots", 
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "lex.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:DetachRolePolicy"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/AmazonLexBotPolicy"
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "channels.lex.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:DetachRolePolicy"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/LexChannelPolicy"
                }
            }
        }
    ]
}
Policy Name: AWSLambdaVPCAccessExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DeleteNetworkInterface"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMacieServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:Get*", 
                "s3:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonLexRunBotsOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lex:PostContent", 
                "lex:PostText"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSNSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSServiceCatalogAdminFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:SetStackPolicy", 
                "cloudformation:UpdateStack", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:DescribeChangeSet", 
                "cloudformation:ExecuteChangeSet", 
                "cloudformation:ListChangeSets", 
                "cloudformation:DeleteChangeSet", 
                "cloudformation:ListStackResources"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/SC-*", 
                "arn:aws:cloudformation:*:*:changeSet/SC-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:CreateUploadBucket", 
                "cloudformation:GetTemplateSummary", 
                "cloudformation:ValidateTemplate", 
                "iam:GetGroup", 
                "iam:GetRole", 
                "iam:GetUser", 
                "iam:ListGroups", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "servicecatalog:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": "servicecatalog.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: CloudSearchReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudsearch:Describe*", 
                "cloudsearch:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSGreengrassFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "greengrass:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudFormationReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:Describe*", 
                "cloudformation:EstimateTemplateCost", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:ValidateTemplate"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:*", 
                "route53domains:*", 
                "cloudfront:ListDistributions", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticbeanstalk:DescribeEnvironments", 
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "s3:GetBucketWebsite", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeRegions", 
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaENIManagementAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DeleteNetworkInterface"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksCloudWatchLogs
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAppStreamReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:Get*", 
                "appstream:List*", 
                "appstream:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStepFunctionsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "states:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonInspectorReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "inspector:Describe*", 
                "inspector:Get*", 
                "inspector:List*", 
                "inspector:LocalizeText", 
                "inspector:Preview*", 
                "ec2:DescribeInstances", 
                "ec2:DescribeTags", 
                "sns:ListTopics", 
                "events:DescribeRule", 
                "events:ListRuleNamesByTarget"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: TranslateReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "translate:TranslateText", 
                "comprehend:DetectDominantLanguage", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCertificateManagerFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: PowerUserAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "NotAction": [
                "iam:*", 
                "organizations:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole", 
                "iam:DeleteServiceLinkedRole", 
                "iam:ListRoles", 
                "organizations:DescribeOrganization"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSageMakerFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sagemaker:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:BatchGetImage", 
                "ecr:BatchCheckLayerAvailability", 
                "cloudwatch:PutMetricData", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeleteScheduledAction", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:DescribeScheduledActions", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:PutScheduledAction", 
                "application-autoscaling:RegisterScalableTarget", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject"
            ], 
            "Resource": [
                "arn:aws:s3:::*SageMaker*", 
                "arn:aws:s3:::*Sagemaker*", 
                "arn:aws:s3:::*sagemaker*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:GetBucketLocation", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEqualsIgnoreCase": {
                    "s3:ExistingObjectTag/SageMaker": "true"
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": "sagemaker.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSElementalMediaStoreFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mediastore:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "Bool": {
                    "aws:SecureTransport": "true"
                }
            }
        }
    ]
}
Policy Name: CloudWatchEventsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "events:*", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsFullAccess"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/AWS_Events_Invoke_Targets", 
            "Effect": "Allow", 
            "Sid": "IAMPassRoleForCloudWatchEvents"
        }
    ]
}
Policy Name: ADPMaintenance
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:*", 
                "cloudformation:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListStackResources", 
                "cloudformation:UpdateStack", 
                "cloudwatch:*", 
                "cloudwatch:Describe*", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "ec2:AssociateAddress", 
                "ec2:AssociateSubnetCidrBlock", 
                "ec2:Attach*", 
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CopyImage", 
                "ec2:CreateFpgaImage", 
                "ec2:CreateImage", 
                "ec2:CreateKeyPair", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSecurityGroupEgress", 
                "ec2:CreateSecurityGroupIngress", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:CreateInternetGateway", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteKeyPair", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteVolume", 
                "ec2:DeregisterImage", 
                "ec2:Describe*", 
                "ec2:DescribeKeyPairs", 
                "ec2:Detach*", 
                "ec2:DetachVolume", 
                "ec2:DetachInternetGateway", 
                "ec2:DisassociateSubnetCidrBlock", 
                "ec2:Get*", 
                "ec2:ImportKeyPair", 
                "ec2:InstanceType", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:ModifyVolume", 
                "ec2:ModifyVolumeAttribute", 
                "ec2:RebootInstances", 
                "ec2:RegisterImage", 
                "ec2:ReplaceNetworkAclAssociation", 
                "ec2:ReplaceNetworkAclEntry", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:UpdateSecurityGroupRuleDescriptionsEgress", 
                "ec2:UpdateSecurityGroupRuleDescriptionsIngress", 
                "elasticfilesystem:ModifyMountTargetSecurityGroups", 
                "elasticloadbalancing:ConfigureHealthCheck", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:ModifyLoadBalancerAttributes", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:SetLoadBalancerPoliciesOfListener", 
                "events:DeleteRule", 
                "events:DescribeRule", 
                "events:DescribeRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "iam:AddRoleToInstanceProfile", 
                "iam:AttachRolePolicy", 
                "iam:AttachUserPolicy", 
                "iam:CreateAccessKey", 
                "iam:CreateInstanceProfile", 
                "iam:CreateRole", 
                "iam:CreateUser", 
                "iam:DeleteAccessKey", 
                "iam:DeleteInstanceProfile", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DeleteUser", 
                "iam:DeleteUserPolicy", 
                "iam:DetachRolePolicy", 
                "iam:GetInstanceProfile", 
                "iam:GetRole", 
                "iam:GetSSHPublicKey", 
                "iam:GetUser", 
                "iam:ListAccessKeys", 
                "iam:ListRolePolicies", 
                "iam:ListRoles", 
                "iam:ListSSHPublicKeys ", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:PutUserPolicy", 
                "iam:RemoveRoleFromInstanceProfile", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey ", 
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:DeleteKey", 
                "kms:Decrypt", 
                "kms:Encrypt", 
                "kms:Get*", 
                "kms:ListAliases", 
                "kms:ListKeys", 
                "kms:Enable*", 
                "kms:Put*", 
                "kms:ScheduleKeyDeletion", 
                "kms:TagResource", 
                "lambda:*", 
                "lambda:AddPermission", 
                "lambda:CreateFunction", 
                "lambda:GetAccountSettings", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListAliases", 
                "lambda:ListFunctions", 
                "lambda:ListTags", 
                "lambda:TagResource", 
                "lambda:UntagResource", 
                "lambda:UpdateFunctionCode", 
                "lambda:UpdateFunctionConfiguration", 
                "logs:Describe*", 
                "logs:FilterLogEvents", 
                "logs:GetLogEvents", 
                "logs:TestMetricFilter", 
                "rds:*", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateRecordSet", 
                "route53:DeleteRecordSet", 
                "route53:GetChange", 
                "route53:GetHostedZone", 
                "route53:ListHostedZones", 
                "route53:ListResourceRecordSets", 
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteObject", 
                "s3:DeleteObjectVersion", 
                "s3:GetBucketAcl", 
                "s3:GetBucketLocation", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:GetObjectAcl", 
                "s3:GetObjectVersion", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:ListBucketVersions", 
                "s3:PutBucketAcl", 
                "s3:PutBucketPolicy", 
                "s3:PutObject", 
                "s3:PutObjectAcl", 
                "sns:ListTopics", 
                "sns:GetTopicAttributes", 
                "sns:ConfirmSubscription", 
                "sns:CreateTopic", 
                "sns:Publish*", 
                "sns:SetTopicAttributes", 
                "sns:Subscribe", 
                "sts:DecodeAuthorizationMessage", 
                "sts:DecodeAuthorizationMessage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudFormationFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: Billing2
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-portal:*", 
                "budgets:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudFormsPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:ListCertificates", 
                "athena:List*", 
                "aws-marketplace:ViewSubscriptions", 
                "autoscaling:Describe*", 
                "batch:ListJobs", 
                "clouddirectory:ListAppliedSchemaArns", 
                "clouddirectory:ListDevelopmentSchemaArns", 
                "clouddirectory:ListDirectories", 
                "clouddirectory:ListPublishedSchemaArns", 
                "cloudformation:List*", 
                "cloudformation:DescribeStacks", 
                "cloudfront:List*", 
                "cloudhsm:ListAvailableZones", 
                "cloudhsm:ListLunaClients", 
                "cloudhsm:ListHapgs", 
                "cloudhsm:ListHsms", 
                "cloudsearch:List*", 
                "cloudsearch:DescribeDomains", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:LookupEvents", 
                "cloudwatch:List*", 
                "cloudformation:GetTemplate", 
                "cloudwatch:GetMetricData", 
                "codebuild:ListBuilds*", 
                "codebuild:ListProjects", 
                "codecommit:List*", 
                "codedeploy:List*", 
                "codedeploy:Get*", 
                "codepipeline:ListPipelines", 
                "codestar:List*", 
                "codestar:Verify*", 
                "cognito-idp:List*", 
                "cognito-identity:ListIdentities", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:ListDatasets", 
                "connect:List*", 
                "config:List*", 
                "config:Describe*", 
                "datapipeline:ListPipelines", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetAccountLimits", 
                "devicefarm:List*", 
                "directconnect:Describe*", 
                "discovery:List*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListTables", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeBundleTasks", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeHost*", 
                "ec2:DescribeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeImage*", 
                "ec2:DescribeImport*", 
                "ec2:DescribeInstance*", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetwork*", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeReserved*", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshot*", 
                "ec2:DescribeSpot*", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolume*", 
                "ec2:DescribeVpc*", 
                "ec2:DescribeVpnGateways", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:DescribeApplicationVersions", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticbeanstalk:ListAvailableSolutionStacks", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "es:DescribeElasticsearchDomain", 
                "es:DescribeElasticsearchDomains", 
                "es:ListDomainNames", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "firehose:List*", 
                "firehose:DescribeDeliveryStream", 
                "gamelift:List*", 
                "glacier:List*", 
                "iam:List*", 
                "iam:GetAccountSummary", 
                "iam:GetLoginProfile", 
                "importexport:ListJobs", 
                "inspector:List*", 
                "iot:List*", 
                "kinesis:ListStreams", 
                "kinesisanalytics:ListApplications", 
                "kms:ListKeys", 
                "lambda:List*", 
                "lex:GetBotAliases", 
                "lex:GetBotChannelAssociations", 
                "lex:GetBots", 
                "lex:GetBotVersions", 
                "lex:GetIntents", 
                "lex:GetIntentVersions", 
                "lex:GetSlotTypes", 
                "lex:GetSlotTypeVersions", 
                "lex:GetUtterancesView", 
                "lightsail:GetBlueprints", 
                "lightsail:GetBundles", 
                "lightsail:GetInstances", 
                "lightsail:GetInstanceSnapshots", 
                "lightsail:GetKeyPair", 
                "lightsail:GetRegions", 
                "lightsail:GetStaticIps", 
                "lightsail:IsVpcPeered", 
                "logs:Describe*", 
                "machinelearning:Describe*", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "opsworks:Describe*", 
                "opsworks-cm:Describe*", 
                "organizations:List*", 
                "mobiletargeting:GetApplicationSettings", 
                "mobiletargeting:GetCampaigns", 
                "mobiletargeting:GetImportJobs", 
                "mobiletargeting:GetSegments", 
                "polly:Describe*", 
                "polly:List*", 
                "rds:Describe*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeEvents", 
                "redshift:ViewQueriesInConsole", 
                "route53:List*", 
                "route53:Get*", 
                "route53domains:List*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "sdb:List*", 
                "servicecatalog:List*", 
                "ses:List*", 
                "shield:List*", 
                "states:ListActivities", 
                "states:ListStateMachines", 
                "sns:List*", 
                "sqs:ListQueues", 
                "ssm:ListAssociations", 
                "ssm:ListDocuments", 
                "storagegateway:ListGateways", 
                "storagegateway:ListLocalDisks", 
                "storagegateway:ListVolumeRecoveryPoints", 
                "storagegateway:ListVolumes", 
                "swf:List*", 
                "trustedadvisor:Describe*", 
                "waf:List*", 
                "waf-regional:List*", 
                "workdocs:DescribeAvailableDirectories", 
                "workdocs:DescribeInstances", 
                "workmail:Describe*", 
                "workspaces:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudFrontPolicyCRP
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:*", 
                "ec2:List*", 
                "cloudfront:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "ec2:ResourceTag/UserName": "KubernetesCluster : dcrpi"
                }
            }
        }, 
        {
            "Action": "ec2:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": "*", 
            "Effect": "Deny"
        }
    ]
}
Policy Name: CRPMaintenance
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListStackResources", 
                "cloudformation:UpdateStack", 
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSecurityGroupEgress", 
                "ec2:CreateSecurityGroupIngress", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteVolume", 
                "ec2:Describe*", 
                "ec2:DetachVolume", 
                "ec2:ModifyVolumeAttribute", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "elasticloadbalancing:ConfigureHealthCheck", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:ModifyLoadBalancerAttributes", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:SetLoadBalancerPoliciesOfListener", 
                "iam:AddRoleToInstanceProfile", 
                "iam:CreateAccessKey", 
                "iam:CreateInstanceProfile", 
                "iam:CreateRole", 
                "iam:CreateUser", 
                "iam:DeleteAccessKey", 
                "iam:DeleteInstanceProfile", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DeleteUser", 
                "iam:DeleteUserPolicy", 
                "iam:GetRole", 
                "iam:GetUser", 
                "iam:ListAccessKeys", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:PutUserPolicy", 
                "iam:RemoveRoleFromInstanceProfile", 
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:DeleteAlias", 
                "kms:DeleteKey", 
                "kms:ListAliases", 
                "kms:ListKeys", 
                "kms:ScheduleKeyDeletion", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateRecordSet", 
                "route53:DeleteRecordSet", 
                "route53:GetChange", 
                "route53:ListHostedZones", 
                "route53:ListResourceRecordSets", 
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "sts:DecodeAuthorizationMessage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: dadpi-platform-OpsManagerIamPolicy-185X5BVNDNTPE
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:Add*", 
                "iam:Attach*", 
                "iam:ChangePassword", 
                "iam:Create*", 
                "iam:DeactivateMFADevice", 
                "iam:Delete*", 
                "iam:Detach*", 
                "iam:EnableMFADevice", 
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:GetAccessKeyLastUsed", 
                "iam:GetAccountAuthorizationDetails", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetContextKeysForCustomPolicy", 
                "iam:GetContextKeysForPrincipalPolicy", 
                "iam:GetCredentialReport", 
                "iam:GetGroup", 
                "iam:GetGroupPolicy", 
                "iam:GetLoginProfile", 
                "iam:GetOpenIDConnectProvider", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:GetSAMLProvider", 
                "iam:GetSSHPublicKey", 
                "iam:GetServerCertificate", 
                "iam:GetServiceLastAccessedDetails", 
                "iam:GetUser", 
                "iam:GetUserPolicy", 
                "iam:List*", 
                "iam:Put*", 
                "iam:RemoveClientIDFromOpenIDConnectProvider", 
                "iam:RemoveRoleFromInstanceProfile", 
                "iam:RemoveUserFromGroup", 
                "iam:ResyncMFADevice", 
                "iam:SetDefaultPolicyVersion", 
                "iam:SimulateCustomPolicy", 
                "iam:SimulatePrincipalPolicy", 
                "iam:Update*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Deny"
        }, 
        {
            "Action": [
                "iam:GetInstanceProfile"
            ], 
            "Resource": [
                "arn:aws:iam::784550693460:instance-profile/dadpi-platform-OpsManagerIamInstanceProfile-14OYP1M94MMVN"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowToGetInfoAboutCurrentInstanceProfile"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::784550693460:role/dadpi-platform-OpsManagerIamRole-GX4PTKONJ3HB"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowToCreateInstanceWithCurrentInstanceProfile"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::dadpi-platform-opsmanagers3bucket-1vie3hb7jgkkr", 
                "arn:aws:s3:::dadpi-platform-opsmanagers3bucket-1vie3hb7jgkkr/*"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerS3Permissions"
        }, 
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:RunInstances", 
                "ec2:RebootInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeKeypairs", 
                "ec2:DescribeRegions", 
                "ec2:DescribeSnapshots", 
                "ec2:CreateSnapshot", 
                "ec2:DeleteSnapshot", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:CreateTags", 
                "ec2:DescribeVolumes", 
                "ec2:CreateVolume", 
                "ec2:AttachVolume", 
                "ec2:DeleteVolume", 
                "ec2:DetachVolume", 
                "ec2:CopyImage", 
                "ec2:DeregisterImage", 
                "ec2:RegisterImage"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerEc2Permissions"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "arn:aws:elasticloadbalancing:eu-central-1:784550693460:loadbalancer/dadpi-platform-pcf-elb", 
                "arn:aws:elasticloadbalancing:eu-central-1:784550693460:loadbalancer/dadpi-tcp-pcf-tcp-elb", 
                "arn:aws:elasticloadbalancing:eu-central-1:784550693460:loadbalancer/dadpi-ssh-elb"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerElbPermissions"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DescribeLoadBalancers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "OpsManagerAllElbPermissions"
        }
    ]
}
Policy Name: dadpo-platform-OpsManagerIamPolicy-XGWHRQ8Q7FHQ
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:Add*", 
                "iam:Attach*", 
                "iam:ChangePassword", 
                "iam:Create*", 
                "iam:DeactivateMFADevice", 
                "iam:Delete*", 
                "iam:Detach*", 
                "iam:EnableMFADevice", 
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:GetAccessKeyLastUsed", 
                "iam:GetAccountAuthorizationDetails", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetContextKeysForCustomPolicy", 
                "iam:GetContextKeysForPrincipalPolicy", 
                "iam:GetCredentialReport", 
                "iam:GetGroup", 
                "iam:GetGroupPolicy", 
                "iam:GetLoginProfile", 
                "iam:GetOpenIDConnectProvider", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:GetSAMLProvider", 
                "iam:GetSSHPublicKey", 
                "iam:GetServerCertificate", 
                "iam:GetServiceLastAccessedDetails", 
                "iam:GetUser", 
                "iam:GetUserPolicy", 
                "iam:List*", 
                "iam:Put*", 
                "iam:RemoveClientIDFromOpenIDConnectProvider", 
                "iam:RemoveRoleFromInstanceProfile", 
                "iam:RemoveUserFromGroup", 
                "iam:ResyncMFADevice", 
                "iam:SetDefaultPolicyVersion", 
                "iam:SimulateCustomPolicy", 
                "iam:SimulatePrincipalPolicy", 
                "iam:Update*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Deny"
        }, 
        {
            "Action": [
                "iam:GetInstanceProfile"
            ], 
            "Resource": [
                "arn:aws:iam::784550693460:instance-profile/dadpo-platform-OpsManagerIamInstanceProfile-1UM0WMJRCJ3PC"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowToGetInfoAboutCurrentInstanceProfile"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::784550693460:role/dadpo-platform-OpsManagerIamRole-3CU8SH1AD325"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowToCreateInstanceWithCurrentInstanceProfile"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::dadpo-platform-opsmanagers3bucket-1e52hbofavfpr", 
                "arn:aws:s3:::dadpo-platform-opsmanagers3bucket-1e52hbofavfpr/*"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerS3Permissions"
        }, 
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:RunInstances", 
                "ec2:RebootInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeKeypairs", 
                "ec2:DescribeRegions", 
                "ec2:DescribeSnapshots", 
                "ec2:CreateSnapshot", 
                "ec2:DeleteSnapshot", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:CreateTags", 
                "ec2:DescribeVolumes", 
                "ec2:CreateVolume", 
                "ec2:AttachVolume", 
                "ec2:DeleteVolume", 
                "ec2:DetachVolume", 
                "ec2:CopyImage", 
                "ec2:DeregisterImage", 
                "ec2:RegisterImage"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerEc2Permissions"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "arn:aws:elasticloadbalancing:eu-central-1:784550693460:loadbalancer/dadpo-platform-pcf-elb", 
                "arn:aws:elasticloadbalancing:eu-central-1:784550693460:loadbalancer/dadpo-platform-pcf-iso-elb", 
                "arn:aws:elasticloadbalancing:eu-central-1:784550693460:loadbalancer/dadpo-ssh-elb", 
                "arn:aws:elasticloadbalancing:eu-central-1:784550693460:loadbalancer/dadpo-tcp-pcf-tcp-elb"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerElbPermissions"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DescribeLoadBalancers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "OpsManagerAllElbPermissions"
        }
    ]
}
Policy Name: IAMCfnAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:List*", 
                "iam:Get*", 
                "iam:CreateAccessKey", 
                "iam:CreateRole", 
                "iam:DeleteAccessKey", 
                "iam:PassRole", 
                "iam:AttachRolePolicy", 
                "iam:CreatePolicy", 
                "iam:CreatePolicyVersion", 
                "iam:PutRolePolicy", 
                "iam:UpdateAssumeRolePolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: NetworkServicePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:List*", 
                "dynamodb:Get*", 
                "dynamodb:Describe*", 
                "s3:List*", 
                "s3:Get*", 
                "s3:Describe*", 
                "ec2:AllocateAddress", 
                "ec2:AssociateAddress", 
                "ec2:DescribeAddresses", 
                "ec2:DisassociateAddress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: policygen-201704051423
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CopyImage"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1491394985000"
        }
    ]
}
Policy Name: policygen-201704051424
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CopyImage"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1491395063000"
        }
    ]
}
Policy Name: ViewOnlyPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "connect:List*", 
                "config:List*", 
                "config:Describe*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListTables", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeBundleTasks", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeHost*", 
                "ec2:DescribeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeImage*", 
                "ec2:DescribeImport*", 
                "ec2:DescribeInstance*", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetwork*", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeReserved*", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshot*", 
                "ec2:DescribeSpot*", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolume*", 
                "ec2:DescribeVpc*", 
                "ec2:DescribeVpnGateways", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:DescribeApplicationVersions", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticbeanstalk:ListAvailableSolutionStacks", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "iam:List*", 
                "iam:GetAccountSummary", 
                "iam:GetLoginProfile", 
                "importexport:ListJobs", 
                "inspector:List*", 
                "kms:ListKeys", 
                "lambda:List*", 
                "logs:Describe*", 
                "organizations:List*", 
                "rds:Describe*", 
                "route53:List*", 
                "route53:Get*", 
                "route53domains:List*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:Get*", 
                "sdb:List*", 
                "servicecatalog:List*", 
                "ses:List*", 
                "sns:List*", 
                "sqs:ListQueues", 
                "ssm:ListAssociations", 
                "ssm:ListDocuments", 
                "swf:List*", 
                "trustedadvisor:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDirectConnectReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "directconnect:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGlacierReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glacier:DescribeJob", 
                "glacier:DescribeVault", 
                "glacier:GetDataRetrievalPolicy", 
                "glacier:GetJobOutput", 
                "glacier:GetVaultAccessPolicy", 
                "glacier:GetVaultLock", 
                "glacier:GetVaultNotifications", 
                "glacier:ListJobs", 
                "glacier:ListMultipartUploads", 
                "glacier:ListParts", 
                "glacier:ListTagsForVault", 
                "glacier:ListVaults"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackResource", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:List*", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcs", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingConsoleReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:ListMetrics", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:ListSubscriptions", 
                "sns:ListTopics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDMSRedshiftS3Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:ListBucket", 
                "s3:DeleteBucket", 
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject", 
                "s3:GetObjectVersion", 
                "s3:GetBucketPolicy", 
                "s3:PutBucketPolicy", 
                "s3:DeleteBucketPolicy"
            ], 
            "Resource": "arn:aws:s3:::dms-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSQuickSightListIAM
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSHealthFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "health:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessGatewayExecution
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:Send*", 
                "a4b:Get*"
            ], 
            "Resource": "arn:aws:a4b:*:*:gateway/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sqs:ReceiveMessage", 
                "sqs:DeleteMessage"
            ], 
            "Resource": [
                "arn:aws:sqs:*:*:dd-*", 
                "arn:aws:sqs:*:*:sd-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "a4b:List*", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogGroups", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRDSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:*", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DeleteAlarms", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "sns:ListSubscriptions", 
                "sns:ListTopics", 
                "sns:Publish", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "pi:*", 
            "Resource": "arn:aws:pi:*:*:metrics/rds/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "rds.amazonaws.com", 
                        "rds.application-autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: SupportUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "support:*", 
                "acm:DescribeCertificate", 
                "acm:GetCertificate", 
                "acm:List*", 
                "apigateway:GET", 
                "appstream:Get*", 
                "autoscaling:Describe*", 
                "aws-marketplace:ViewSubscriptions", 
                "cloudformation:Describe*", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:EstimateTemplateCost", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "cloudsearch:Describe*", 
                "cloudsearch:List*", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:LookupEvents", 
                "cloudtrail:ListTags", 
                "cloudtrail:ListPublicKeys", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "codecommit:BatchGetRepositories", 
                "codecommit:Get*", 
                "codecommit:List*", 
                "codedeploy:Batch*", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codepipeline:AcknowledgeJob", 
                "codepipeline:AcknowledgeThirdPartyJob", 
                "codepipeline:ListActionTypes", 
                "codepipeline:ListPipelines", 
                "codepipeline:PollForJobs", 
                "codepipeline:PollForThirdPartyJobs", 
                "codepipeline:GetPipelineState", 
                "codepipeline:GetPipeline", 
                "cognito-identity:List*", 
                "cognito-identity:LookupDeveloperIdentity", 
                "cognito-identity:Describe*", 
                "cognito-idp:Describe*", 
                "cognito-sync:Describe*", 
                "cognito-sync:GetBulkPublishDetails", 
                "cognito-sync:GetCognitoEvents", 
                "cognito-sync:GetIdentityPoolConfiguration", 
                "cognito-sync:List*", 
                "config:DescribeConfigurationRecorders", 
                "config:DescribeConfigurationRecorderStatus", 
                "config:DescribeConfigRuleEvaluationStatus", 
                "config:DescribeConfigRules", 
                "config:DescribeDeliveryChannels", 
                "config:DescribeDeliveryChannelStatus", 
                "config:GetResourceConfigHistory", 
                "config:ListDiscoveredResources", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:QueryObjects", 
                "datapipeline:ReportTaskProgress", 
                "datapipeline:ReportTaskRunnerHeartbeat", 
                "devicefarm:List*", 
                "devicefarm:Get*", 
                "directconnect:Describe*", 
                "discovery:Describe*", 
                "discovery:ListConfigurations", 
                "dms:Describe*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "ds:DescribeSnapshots", 
                "ds:GetDirectoryLimits", 
                "ds:GetSnapshotLimits", 
                "ds:ListAuthorizedApplications", 
                "dynamodb:DescribeLimits", 
                "dynamodb:DescribeTable", 
                "dynamodb:ListTables", 
                "ec2:Describe*", 
                "ec2:DescribeHosts", 
                "ec2:describeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeReservedInstancesModifications", 
                "ec2:DescribeTags", 
                "ec2:GetFlowLogsCount", 
                "ecr:GetRepositoryPolicy", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:Describe*", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticache:List*", 
                "elasticbeanstalk:Check*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:RequestEnvironmentInfo", 
                "elasticbeanstalk:RetrieveEnvironmentInfo", 
                "elasticbeanstalk:ValidateConfigurationSettings", 
                "elasticfilesystem:Describe*", 
                "elasticloadbalancing:Describe*", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "elastictranscoder:ReadJob", 
                "elasticfilesystem:DescribeFileSystems", 
                "es:Describe*", 
                "es:List*", 
                "es:ESHttpGet", 
                "es:ESHttpHead", 
                "events:DescribeRule", 
                "events:List*", 
                "events:TestEventPattern", 
                "firehose:Describe*", 
                "firehose:List*", 
                "gamelift:List*", 
                "gamelift:Describe*", 
                "glacier:ListVaults", 
                "glacier:DescribeVault", 
                "glacier:DescribeJob", 
                "glacier:Get*", 
                "glacier:List*", 
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:Get*", 
                "iam:List*", 
                "importexport:GetStatus", 
                "importexport:ListJobs", 
                "importexport:GetJobDetail", 
                "inspector:Describe*", 
                "inspector:List*", 
                "inspector:GetAssessmentTelemetry", 
                "inspector:LocalizeText", 
                "iot:Describe*", 
                "iot:Get*", 
                "iot:List*", 
                "kinesisanalytics:DescribeApplication", 
                "kinesisanalytics:DiscoverInputSchema", 
                "kinesisanalytics:GetApplicationState", 
                "kinesisanalytics:ListApplications", 
                "kinesis:Describe*", 
                "kinesis:Get*", 
                "kinesis:List*", 
                "kms:Describe*", 
                "kms:Get*", 
                "kms:List*", 
                "lambda:List*", 
                "lambda:Get*", 
                "logs:Describe*", 
                "logs:TestMetricFilter", 
                "machinelearning:Describe*", 
                "machinelearning:Get*", 
                "mobilehub:GetProject", 
                "mobilehub:List*", 
                "mobilehub:ValidateProject", 
                "mobilehub:VerifyServiceRole", 
                "opsworks:Describe*", 
                "rds:Describe*", 
                "rds:ListTagsForResource", 
                "redshift:Describe*", 
                "route53:Get*", 
                "route53:List*", 
                "route53domains:CheckDomainAvailability", 
                "route53domains:GetDomainDetail", 
                "route53domains:GetOperationDetail", 
                "route53domains:List*", 
                "s3:List*", 
                "sdb:GetAttributes", 
                "sdb:List*", 
                "sdb:Select*", 
                "servicecatalog:SearchProducts", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ScanProvisionedProducts", 
                "ses:Get*", 
                "ses:List*", 
                "sns:Get*", 
                "sns:List*", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "sqs:ListQueues", 
                "sqs:ReceiveMessage", 
                "ssm:List*", 
                "ssm:Describe*", 
                "storagegateway:Describe*", 
                "storagegateway:List*", 
                "swf:Count*", 
                "swf:Describe*", 
                "swf:Get*", 
                "swf:List*", 
                "waf:Get*", 
                "waf:List*", 
                "workspaces:Describe*", 
                "workdocs:Describe*", 
                "workmail:Describe*", 
                "workmail:Get*", 
                "workspaces:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "ec2:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "cloudwatch:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": [
                        "autoscaling.amazonaws.com", 
                        "ec2scheduled.amazonaws.com", 
                        "elasticloadbalancing.amazonaws.com", 
                        "spot.amazonaws.com", 
                        "spotfleet.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: SecretsManagerReadWrite
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "secretsmanager:*", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:DescribeChangeSet", 
                "cloudformation:DescribeStackResource", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ExecuteChangeSet", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "kms:DescribeKey", 
                "kms:ListAliases", 
                "kms:ListKeys", 
                "lambda:ListFunctions", 
                "rds:DescribeDBInstances", 
                "tag:GetResources"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:AddPermission", 
                "lambda:CreateFunction", 
                "lambda:GetFunction", 
                "lambda:InvokeFunction", 
                "lambda:UpdateFunctionConfiguration"
            ], 
            "Resource": "arn:aws:lambda:*:*:function:SecretsManager*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "serverlessrepo:CreateCloudFormationChangeSet"
            ], 
            "Resource": "arn:aws:serverlessrepo:*:*:applications/SecretsManager*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::awsserverlessrepo-changesets*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTThingsRegistration
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:AddThingToThingGroup", 
                "iot:AttachPrincipalPolicy", 
                "iot:AttachThingPrincipal", 
                "iot:CreateCertificateFromCsr", 
                "iot:CreatePolicy", 
                "iot:CreateThing", 
                "iot:DescribeCertificate", 
                "iot:DescribeThing", 
                "iot:DescribeThingGroup", 
                "iot:DescribeThingType", 
                "iot:DetachThingPrincipal", 
                "iot:GetPolicy", 
                "iot:ListPolicyPrincipals", 
                "iot:ListPrincipalPolicies", 
                "iot:ListPrincipalThings", 
                "iot:ListThingGroupsForThing", 
                "iot:ListThingPrincipals", 
                "iot:RegisterCertificate", 
                "iot:RegisterThing", 
                "iot:RemoveThingFromThingGroup", 
                "iot:UpdateCertificate", 
                "iot:UpdateThing", 
                "iot:UpdateThingGroupsForThing"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticbeanstalk:Check*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:RequestEnvironmentInfo", 
                "elasticbeanstalk:RetrieveEnvironmentInfo", 
                "ec2:Describe*", 
                "elasticloadbalancing:Describe*", 
                "autoscaling:Describe*", 
                "cloudwatch:Describe*", 
                "cloudwatch:List*", 
                "cloudwatch:Get*", 
                "s3:Get*", 
                "s3:List*", 
                "sns:Get*", 
                "sns:List*", 
                "cloudformation:Describe*", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:Validate*", 
                "cloudformation:Estimate*", 
                "rds:Describe*", 
                "sqs:Get*", 
                "sqs:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElementalMediaStoreReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mediastore:Get*", 
                "mediastore:List*", 
                "mediastore:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "Bool": {
                    "aws:SecureTransport": "true"
                }
            }
        }
    ]
}
Policy Name: AWSCertificateManagerReadOnly
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "acm:DescribeCertificate", 
            "acm:ListCertificates", 
            "acm:GetCertificate", 
            "acm:ListTagsForCertificate"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AWSQuicksightAthenaAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "athena:BatchGetQueryExecution", 
                "athena:CancelQueryExecution", 
                "athena:GetCatalogs", 
                "athena:GetExecutionEngine", 
                "athena:GetExecutionEngines", 
                "athena:GetNamespace", 
                "athena:GetNamespaces", 
                "athena:GetQueryExecution", 
                "athena:GetQueryExecutions", 
                "athena:GetQueryResults", 
                "athena:GetTable", 
                "athena:GetTables", 
                "athena:ListQueryExecutions", 
                "athena:RunQuery", 
                "athena:StartQueryExecution", 
                "athena:StopQueryExecution"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "glue:CreateDatabase", 
                "glue:DeleteDatabase", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:UpdateDatabase", 
                "glue:CreateTable", 
                "glue:DeleteTable", 
                "glue:BatchDeleteTable", 
                "glue:UpdateTable", 
                "glue:GetTable", 
                "glue:GetTables", 
                "glue:BatchCreatePartition", 
                "glue:CreatePartition", 
                "glue:DeletePartition", 
                "glue:BatchDeletePartition", 
                "glue:UpdatePartition", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:BatchGetPartition"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts", 
                "s3:AbortMultipartUpload", 
                "s3:CreateBucket", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-athena-query-results-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeCommitPowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codecommit:BatchGet*", 
                "codecommit:Get*", 
                "codecommit:List*", 
                "codecommit:Create*", 
                "codecommit:DeleteBranch", 
                "codecommit:Describe*", 
                "codecommit:Put*", 
                "codecommit:Post*", 
                "codecommit:Merge*", 
                "codecommit:Test*", 
                "codecommit:Update*", 
                "codecommit:GitPull", 
                "codecommit:GitPush"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "events:DeleteRule", 
                "events:DescribeRule", 
                "events:DisableRule", 
                "events:EnableRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "events:ListTargetsByRule"
            ], 
            "Resource": "arn:aws:events:*:*:rule/codecommit*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsCodeCommitRulesAccess"
        }, 
        {
            "Action": [
                "sns:Subscribe", 
                "sns:Unsubscribe"
            ], 
            "Resource": "arn:aws:sns:*:*:codecommit*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionAccess"
        }, 
        {
            "Action": [
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionReadAccess"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "LambdaReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListAccessKeys", 
                "iam:ListSSHPublicKeys", 
                "iam:ListServiceSpecificCredentials", 
                "iam:ListAccessKeys", 
                "iam:GetSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyConsoleAccess"
        }, 
        {
            "Action": [
                "iam:DeleteSSHPublicKey", 
                "iam:GetSSHPublicKey", 
                "iam:ListSSHPublicKeys", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMUserSSHKeys"
        }, 
        {
            "Action": [
                "iam:CreateServiceSpecificCredential", 
                "iam:UpdateServiceSpecificCredential", 
                "iam:DeleteServiceSpecificCredential", 
                "iam:ResetServiceSpecificCredential"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMSelfManageServiceSpecificCredentials"
        }
    ]
}
Policy Name: AWSCodeCommitFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codecommit:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "events:DeleteRule", 
                "events:DescribeRule", 
                "events:DisableRule", 
                "events:EnableRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "events:ListTargetsByRule"
            ], 
            "Resource": "arn:aws:events:*:*:rule/codecommit*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsCodeCommitRulesAccess"
        }, 
        {
            "Action": [
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sns:SetTopicAttributes"
            ], 
            "Resource": "arn:aws:sns:*:*:codecommit*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionAccess"
        }, 
        {
            "Action": [
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionReadAccess"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "LambdaReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListAccessKeys", 
                "iam:ListSSHPublicKeys", 
                "iam:ListServiceSpecificCredentials", 
                "iam:ListAccessKeys", 
                "iam:GetSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyConsoleAccess"
        }, 
        {
            "Action": [
                "iam:DeleteSSHPublicKey", 
                "iam:GetSSHPublicKey", 
                "iam:ListSSHPublicKeys", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMUserSSHKeys"
        }, 
        {
            "Action": [
                "iam:CreateServiceSpecificCredential", 
                "iam:UpdateServiceSpecificCredential", 
                "iam:DeleteServiceSpecificCredential", 
                "iam:ResetServiceSpecificCredential"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMSelfManageServiceSpecificCredentials"
        }
    ]
}
Policy Name: IAMSelfManageServiceSpecificCredentials
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:CreateServiceSpecificCredential", 
                "iam:ListServiceSpecificCredentials", 
                "iam:UpdateServiceSpecificCredential", 
                "iam:DeleteServiceSpecificCredential", 
                "iam:ResetServiceSpecificCredential"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEMRCleanupPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:TerminateInstances", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeVolumeStatus", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "ec2:DeleteVolume"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9EnvironmentMember
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloud9:GetUserSettings", 
                "cloud9:UpdateUserSettings", 
                "iam:GetUser", 
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloud9:DescribeEnvironmentMemberships"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "Null": {
                    "cloud9:UserArn": "true", 
                    "cloud9:EnvironmentId": "true"
                }
            }
        }
    ]
}
Policy Name: AWSApplicationAutoscalingSageMakerEndpointPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sagemaker:DescribeEndpoint", 
                "sagemaker:DescribeEndpointConfig", 
                "sagemaker:UpdateEndpointWeightsAndCapacities", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: FMSServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "waf:UpdateWebACL", 
                "waf:DeleteWebACL", 
                "waf:GetWebACL", 
                "waf-regional:UpdateWebACL", 
                "waf-regional:DeleteWebACL", 
                "waf-regional:GetWebACL", 
                "waf-regional:ListResourcesForWebACL", 
                "waf-regional:AssociateWebACL", 
                "waf-regional:DisassociateWebACL", 
                "elasticloadbalancing:SetWebACL"
            ], 
            "Resource": [
                "arn:aws:waf:*:*:webacl/*", 
                "arn:aws:waf-regional:*:*:webacl/*", 
                "arn:aws:waf:*:*:rulegroup/*", 
                "arn:aws:waf-regional:*:*:rulegroup/*", 
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "waf:CreateWebACL", 
                "waf-regional:CreateWebACL", 
                "waf:GetChangeToken", 
                "waf-regional:GetChangeToken"
            ], 
            "Resource": [
                "arn:aws:waf:*", 
                "arn:aws:waf-regional:*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "waf:PutPermissionPolicy", 
                "waf:GetPermissionPolicy", 
                "waf:DeletePermissionPolicy", 
                "waf-regional:PutPermissionPolicy", 
                "waf-regional:GetPermissionPolicy", 
                "waf-regional:DeletePermissionPolicy"
            ], 
            "Resource": [
                "arn:aws:waf:*:*:webacl/*", 
                "arn:aws:waf:*:*:rulegroup/*", 
                "arn:aws:waf-regional:*:*:webacl/*", 
                "arn:aws:waf-regional:*:*:rulegroup/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudfront:GetDistribution", 
                "cloudfront:UpdateDistribution", 
                "cloudfront:ListDistributionsByWebACLId"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "config:DescribeConfigurationRecorders", 
                "config:DescribeConfigurationRecorderStatus", 
                "config:PutConfigurationRecorder", 
                "config:StartConfigurationRecorder", 
                "config:PutDeliveryChannel", 
                "config:DescribeDeliveryChannels", 
                "config:DescribeDeliveryChannelStatus", 
                "config:DeleteConfigRule", 
                "config:DescribeComplianceByConfigRule", 
                "config:DescribeConfigRuleEvaluationStatus", 
                "config:DescribeConfigRules", 
                "config:GetComplianceDetailsByConfigRule", 
                "config:GetComplianceSummaryByConfigRule", 
                "config:GetDiscoveredResourceCounts", 
                "config:PutConfigRule", 
                "config:StartConfigRulesEvaluation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/fms.amazonaws.com/AWSServiceRoleForFMS"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "organizations:DescribeAccount", 
                "organizations:DescribeOrganization", 
                "organizations:ListAccounts"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSQSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sqs:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:Get*", 
                "a4b:List*", 
                "a4b:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeChangeSet", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStackResources", 
                "cloudwatch:*", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:GetCognitoEvents", 
                "cognito-sync:SetCognitoEvents", 
                "dynamodb:*", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "events:*", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListRolePolicies", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "iot:AttachPrincipalPolicy", 
                "iot:AttachThingPrincipal", 
                "iot:CreateKeysAndCertificate", 
                "iot:CreatePolicy", 
                "iot:CreateThing", 
                "iot:CreateTopicRule", 
                "iot:DescribeEndpoint", 
                "iot:GetTopicRule", 
                "iot:ListPolicies", 
                "iot:ListThings", 
                "iot:ListTopicRules", 
                "iot:ReplaceTopicRule", 
                "kinesis:DescribeStream", 
                "kinesis:ListStreams", 
                "kinesis:PutRecord", 
                "kms:ListAliases", 
                "lambda:*", 
                "logs:*", 
                "s3:*", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sns:Publish", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sqs:ListQueues", 
                "sqs:SendMessage", 
                "tag:GetResources", 
                "xray:PutTelemetryRecords", 
                "xray:PutTraceSegments"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTLogging
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:PutMetricFilter", 
                "logs:PutRetentionPolicy", 
                "logs:GetLogEvents", 
                "logs:DeleteLogStream"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2RoleforSSM
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:DescribeAssociation", 
                "ssm:GetDeployablePatchSnapshotForInstance", 
                "ssm:GetDocument", 
                "ssm:GetManifest", 
                "ssm:GetParameters", 
                "ssm:ListAssociations", 
                "ssm:ListInstanceAssociations", 
                "ssm:PutInventory", 
                "ssm:PutComplianceItems", 
                "ssm:PutConfigurePackageResult", 
                "ssm:UpdateAssociationStatus", 
                "ssm:UpdateInstanceAssociationStatus", 
                "ssm:UpdateInstanceInformation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2messages:AcknowledgeMessage", 
                "ec2messages:DeleteMessage", 
                "ec2messages:FailMessage", 
                "ec2messages:GetEndpoint", 
                "ec2messages:GetMessages", 
                "ec2messages:SendReply"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:PutMetricData"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeInstanceStatus"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ds:CreateComputer", 
                "ds:DescribeDirectories"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:GetObject", 
                "s3:AbortMultipartUpload", 
                "s3:ListMultipartUploadParts", 
                "s3:ListBucket", 
                "s3:ListBucketMultipartUploads"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudHSMRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:CreateTags", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DetachNetworkInterface"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSEnhancedClassicNetworkingMangementPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: IAMFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "iam:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonInspectorFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "inspector:*", 
                "ec2:DescribeInstances", 
                "ec2:DescribeTags", 
                "sns:ListTopics", 
                "events:DescribeRule", 
                "events:ListRuleNamesByTarget"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "inspector.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/inspector.amazonaws.com/AWSServiceRoleForAmazonInspector", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "inspector.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonElastiCacheFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "elasticache:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/elasticache.amazonaws.com/AWSServiceRoleForElastiCache", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "elasticache.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSAgentlessDiscoveryService
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "awsconnector:RegisterConnector", 
                "awsconnector:GetConnectorHealth"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:GetUser", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:ListBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::connector-platform-upgrade-info/*", 
                "arn:aws:s3:::connector-platform-upgrade-info", 
                "arn:aws:s3:::connector-platform-upgrade-bundles/*", 
                "arn:aws:s3:::connector-platform-upgrade-bundles", 
                "arn:aws:s3:::connector-platform-release-notes/*", 
                "arn:aws:s3:::connector-platform-release-notes", 
                "arn:aws:s3:::prod.agentless.discovery.connector.upgrade/*", 
                "arn:aws:s3:::prod.agentless.discovery.connector.upgrade"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:PutObjectAcl"
            ], 
            "Resource": [
                "arn:aws:s3:::import-to-ec2-connector-debug-logs/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "SNS:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "Discovery:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "Discovery"
        }, 
        {
            "Action": [
                "arsenal:RegisterOnPremisesAgent"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "arsenal"
        }
    ]
}
Policy Name: AWSXrayWriteOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "xray:PutTraceSegments", 
                "xray:PutTelemetryRecords"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSPriceListServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "pricing:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "autoscaling:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "autoscaling:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "cloudwatch:PutMetricAlarm", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeLaunchTemplateVersions", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcClassicLink"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "autoscaling.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonEC2RoleforAWSCodeDeploy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectVersion", 
                "s3:ListBucket"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMobileHub_ReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:DescribeTable", 
                "iam:ListSAMLProviders", 
                "lambda:ListFunctions", 
                "sns:ListTopics", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:GetBot", 
                "lex:GetBots", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases", 
                "mobilehub:ExportProject", 
                "mobilehub:GenerateProjectParameters", 
                "mobilehub:GetProject", 
                "mobilehub:GetProjectSnapshot", 
                "mobilehub:ListProjectSnapshots", 
                "mobilehub:ListAvailableConnectors", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "mobilehub:ValidateProject", 
                "mobilehub:VerifyServiceRole", 
                "mobilehub:DescribeBundle", 
                "mobilehub:ExportBundle", 
                "mobilehub:ListBundles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::*/aws-my-sample-app*.zip", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsBuiltInTargetExecutionAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:Describe*", 
                "ec2:RebootInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:CreateSnapshot"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsBuiltInTargetExecutionAccess"
        }
    ]
}
Policy Name: AutoScalingServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AttachClassicLinkVpc", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:Describe*", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RunInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "EC2InstanceManagement"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "ec2.amazonaws.com*"
                }
            }, 
            "Sid": "EC2InstanceProfileManagement"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "spot.amazonaws.com"
                }
            }, 
            "Sid": "EC2SpotManagement"
        }, 
        {
            "Action": [
                "elasticloadbalancing:Register*", 
                "elasticloadbalancing:Deregister*", 
                "elasticloadbalancing:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ELBManagement"
        }, 
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CWManagement"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSManagement"
        }
    ]
}
Policy Name: AmazonCloudDirectoryReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "clouddirectory:List*", 
                "clouddirectory:Get*", 
                "clouddirectory:LookupPolicy", 
                "clouddirectory:BatchRead"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchAgentAdminPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData", 
                "ec2:DescribeTags", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups", 
                "logs:CreateLogStream", 
                "logs:CreateLogGroup"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:GetParameter", 
                "ssm:PutParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "opsworks:*", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "iam:GetRolePolicy", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksCMInstanceProfileRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeStackResource", 
                "cloudformation:SignalResource"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:AbortMultipartUpload", 
                "s3:DeleteObject", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:ListMultipartUploadParts", 
                "s3:PutObject"
            ], 
            "Resource": "arn:aws:s3:::aws-opsworks-cm-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSBatchServiceEventTargetRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "batch:SubmitJob"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineApproverAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:GetPipeline", 
                "codepipeline:GetPipelineState", 
                "codepipeline:GetPipelineExecution", 
                "codepipeline:ListPipelineExecutions", 
                "codepipeline:ListPipelines", 
                "codepipeline:PutApprovalResult"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationDiscoveryAgentAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "arsenal:RegisterOnPremisesAgent"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ViewOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:ListCertificates", 
                "athena:List*", 
                "aws-marketplace:ViewSubscriptions", 
                "autoscaling:Describe*", 
                "batch:ListJobs", 
                "clouddirectory:ListAppliedSchemaArns", 
                "clouddirectory:ListDevelopmentSchemaArns", 
                "clouddirectory:ListDirectories", 
                "clouddirectory:ListPublishedSchemaArns", 
                "cloudformation:List*", 
                "cloudformation:DescribeStacks", 
                "cloudfront:List*", 
                "cloudhsm:ListAvailableZones", 
                "cloudhsm:ListLunaClients", 
                "cloudhsm:ListHapgs", 
                "cloudhsm:ListHsms", 
                "cloudsearch:List*", 
                "cloudsearch:DescribeDomains", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:LookupEvents", 
                "cloudwatch:List*", 
                "cloudwatch:GetMetricData", 
                "codebuild:ListBuilds*", 
                "codebuild:ListProjects", 
                "codecommit:List*", 
                "codedeploy:List*", 
                "codedeploy:Get*", 
                "codepipeline:ListPipelines", 
                "codestar:List*", 
                "codestar:Verify*", 
                "cognito-idp:List*", 
                "cognito-identity:ListIdentities", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:ListDatasets", 
                "connect:List*", 
                "config:List*", 
                "config:Describe*", 
                "datapipeline:ListPipelines", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetAccountLimits", 
                "devicefarm:List*", 
                "directconnect:Describe*", 
                "discovery:List*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListTables", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeBundleTasks", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeHost*", 
                "ec2:DescribeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeImage*", 
                "ec2:DescribeImport*", 
                "ec2:DescribeInstance*", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetwork*", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeReserved*", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshot*", 
                "ec2:DescribeSpot*", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolume*", 
                "ec2:DescribeVpc*", 
                "ec2:DescribeVpnGateways", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:List*", 
                "ecs:Describe*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:DescribeApplicationVersions", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticbeanstalk:ListAvailableSolutionStacks", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "es:DescribeElasticsearchDomain", 
                "es:DescribeElasticsearchDomains", 
                "es:ListDomainNames", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "firehose:List*", 
                "firehose:DescribeDeliveryStream", 
                "gamelift:List*", 
                "glacier:List*", 
                "iam:List*", 
                "iam:GetAccountSummary", 
                "iam:GetLoginProfile", 
                "importexport:ListJobs", 
                "inspector:List*", 
                "iot:List*", 
                "kinesis:ListStreams", 
                "kinesisanalytics:ListApplications", 
                "kms:ListKeys", 
                "lambda:List*", 
                "lex:GetBotAliases", 
                "lex:GetBotChannelAssociations", 
                "lex:GetBots", 
                "lex:GetBotVersions", 
                "lex:GetIntents", 
                "lex:GetIntentVersions", 
                "lex:GetSlotTypes", 
                "lex:GetSlotTypeVersions", 
                "lex:GetUtterancesView", 
                "lightsail:GetBlueprints", 
                "lightsail:GetBundles", 
                "lightsail:GetInstances", 
                "lightsail:GetInstanceSnapshots", 
                "lightsail:GetKeyPair", 
                "lightsail:GetRegions", 
                "lightsail:GetStaticIps", 
                "lightsail:IsVpcPeered", 
                "logs:Describe*", 
                "machinelearning:Describe*", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "opsworks:Describe*", 
                "opsworks-cm:Describe*", 
                "organizations:List*", 
                "mobiletargeting:GetApplicationSettings", 
                "mobiletargeting:GetCampaigns", 
                "mobiletargeting:GetImportJobs", 
                "mobiletargeting:GetSegments", 
                "polly:Describe*", 
                "polly:List*", 
                "rds:Describe*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeEvents", 
                "redshift:ViewQueriesInConsole", 
                "route53:List*", 
                "route53:Get*", 
                "route53domains:List*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "sdb:List*", 
                "servicecatalog:List*", 
                "ses:List*", 
                "shield:List*", 
                "states:ListActivities", 
                "states:ListStateMachines", 
                "sns:List*", 
                "sqs:ListQueues", 
                "ssm:ListAssociations", 
                "ssm:ListDocuments", 
                "storagegateway:ListGateways", 
                "storagegateway:ListLocalDisks", 
                "storagegateway:ListVolumeRecoveryPoints", 
                "storagegateway:ListVolumes", 
                "swf:List*", 
                "trustedadvisor:Describe*", 
                "waf:List*", 
                "waf-regional:List*", 
                "workdocs:DescribeAvailableDirectories", 
                "workdocs:DescribeInstances", 
                "workmail:Describe*", 
                "workspaces:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkCrowdReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "crowd:GetTask"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CrowdApiReadOnlyAccess"
        }
    ]
}
Policy Name: AmazonElasticMapReduceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteTags", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSpotPriceHistory", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcs", 
                "ec2:DetachNetworkInterface", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RunInstances", 
                "ec2:TerminateInstances", 
                "ec2:DeleteVolume", 
                "ec2:DescribeVolumeStatus", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListInstanceProfiles", 
                "iam:ListRolePolicies", 
                "iam:PassRole", 
                "s3:CreateBucket", 
                "s3:Get*", 
                "s3:List*", 
                "sdb:BatchPutAttributes", 
                "sdb:Select", 
                "sqs:CreateQueue", 
                "sqs:Delete*", 
                "sqs:GetQueue*", 
                "sqs:PurgeQueue", 
                "sqs:ReceiveMessage", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms", 
                "application-autoscaling:RegisterScalableTarget", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "spot.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonRoute53DomainsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53domains:Get*", 
                "route53domains:List*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMAutomationApproverAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:DescribeAutomationExecutions", 
                "ssm:GetAutomationExecution", 
                "ssm:SendAutomationSignal"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "iam:GetRolePolicy", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "iam:PassRole", 
                "opsworks:*", 
                "rds:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigRoleForOrganizations
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "organizations:ListAccounts", 
                "organizations:DescribeOrganization", 
                "organizations:ListAWSServiceAccessForOrganization"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ApplicationAutoScalingForAmazonAppStreamAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:UpdateFleet", 
                "appstream:DescribeFleets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DescribeAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerRegistryFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:*", 
                "cloudtrail:LookupEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: SimpleWorkflowFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "swf:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: GreengrassOTAUpdateArtifactAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::eu-central-1-greengrass-updates/*", 
                "arn:aws:s3:::us-east-1-greengrass-updates/*", 
                "arn:aws:s3:::ap-northeast-1-greengrass-updates/*", 
                "arn:aws:s3:::us-west-2-greengrass-updates/*", 
                "arn:aws:s3:::ap-southeast-2-greengrass-updates/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowsIotToAccessGreengrassOTAUpdateArtifacts"
        }
    ]
}
Policy Name: AmazonS3FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "s3:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStorageGatewayReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "storagegateway:List*", 
                "storagegateway:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeSnapshots"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: Billing
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-portal:*Billing", 
                "awsbillingconsole:*Billing", 
                "aws-portal:*Usage", 
                "awsbillingconsole:*Usage", 
                "aws-portal:*PaymentMethods", 
                "awsbillingconsole:*PaymentMethods", 
                "budgets:ViewBudget", 
                "budgets:ModifyBudget", 
                "cur:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: QuickSightAccessForS3StorageManagementAnalyticsReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectMetadata"
            ], 
            "Resource": [
                "arn:aws:s3:::s3-analytics-export-shared-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetAnalyticsConfiguration", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketLocation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerRegistryReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:GetRepositoryPolicy", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecr:DescribeImages", 
                "ecr:BatchGetImage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticMapReduceforEC2Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "dynamodb:*", 
                "ec2:Describe*", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:ListBootstrapActions", 
                "elasticmapreduce:ListClusters", 
                "elasticmapreduce:ListInstanceGroups", 
                "elasticmapreduce:ListInstances", 
                "elasticmapreduce:ListSteps", 
                "kinesis:CreateStream", 
                "kinesis:DeleteStream", 
                "kinesis:DescribeStream", 
                "kinesis:GetRecords", 
                "kinesis:GetShardIterator", 
                "kinesis:MergeShards", 
                "kinesis:PutRecord", 
                "kinesis:SplitShard", 
                "rds:Describe*", 
                "s3:*", 
                "sdb:*", 
                "sns:*", 
                "sqs:*", 
                "glue:CreateDatabase", 
                "glue:UpdateDatabase", 
                "glue:DeleteDatabase", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:CreateTable", 
                "glue:UpdateTable", 
                "glue:DeleteTable", 
                "glue:GetTable", 
                "glue:GetTables", 
                "glue:GetTableVersions", 
                "glue:CreatePartition", 
                "glue:BatchCreatePartition", 
                "glue:UpdatePartition", 
                "glue:DeletePartition", 
                "glue:BatchDeletePartition", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:BatchGetPartition", 
                "glue:CreateUserDefinedFunction", 
                "glue:UpdateUserDefinedFunction", 
                "glue:DeleteUserDefinedFunction", 
                "glue:GetUserDefinedFunction", 
                "glue:GetUserDefinedFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DatabaseAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:Describe*", 
                "cloudwatch:DisableAlarmActions", 
                "cloudwatch:EnableAlarmActions", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "cloudwatch:PutMetricAlarm", 
                "datapipeline:ActivatePipeline", 
                "datapipeline:CreatePipeline", 
                "datapipeline:DeletePipeline", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:PutPipelineDefinition", 
                "datapipeline:QueryObjects", 
                "dynamodb:*", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "elasticache:*", 
                "iam:ListRoles", 
                "iam:GetRole", 
                "kms:ListKeys", 
                "lambda:CreateEventSourceMapping", 
                "lambda:CreateFunction", 
                "lambda:DeleteEventSourceMapping", 
                "lambda:DeleteFunction", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListEventSourceMappings", 
                "lambda:ListFunctions", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:FilterLogEvents", 
                "logs:GetLogEvents", 
                "logs:Create*", 
                "logs:PutLogEvents", 
                "logs:PutMetricFilter", 
                "rds:*", 
                "redshift:*", 
                "s3:CreateBucket", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:Get*", 
                "sns:List*", 
                "sns:SetTopicAttributes", 
                "sns:Subscribe", 
                "sns:Unsubscribe"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:AbortMultipartUpload", 
                "s3:DeleteObject*", 
                "s3:Get*", 
                "s3:List*", 
                "s3:PutAccelerateConfiguration", 
                "s3:PutBucketTagging", 
                "s3:PutBucketVersioning", 
                "s3:PutBucketWebsite", 
                "s3:PutLifecycleConfiguration", 
                "s3:PutReplicationConfiguration", 
                "s3:PutObject*", 
                "s3:Replicate*", 
                "s3:RestoreObject"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/rds-monitoring-role", 
                "arn:aws:iam::*:role/rdbms-lambda-access", 
                "arn:aws:iam::*:role/lambda_exec_role", 
                "arn:aws:iam::*:role/lambda-dynamodb-*", 
                "arn:aws:iam::*:role/lambda-vpc-execution-role", 
                "arn:aws:iam::*:role/DataPipelineDefaultRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRedshiftReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "redshift:Describe*", 
                "redshift:ViewQueriesInConsole", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "sns:Get*", 
                "sns:List*", 
                "cloudwatch:Describe*", 
                "cloudwatch:List*", 
                "cloudwatch:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "ec2:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:ListMetrics", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchAgentServerPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData", 
                "ec2:DescribeTags", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups", 
                "logs:CreateLogStream", 
                "logs:CreateLogGroup"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:GetParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSXrayReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "xray:BatchGetTraces", 
                "xray:GetServiceGraph", 
                "xray:GetTraceGraph", 
                "xray:GetTraceSummaries"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkEnhancedHealth
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:GetConsoleOutput", 
                "ec2:AssociateAddress", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeSecurityGroups", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:DescribeNotificationConfigurations", 
                "sns:Publish"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:DescribeLogStreams", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*:log-stream:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticMapReduceReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:List*", 
                "elasticmapreduce:ViewEventsFromAllClustersInConsole", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "sdb:Select", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDirectoryServiceReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:Check*", 
                "ds:Describe*", 
                "ds:Get*", 
                "ds:List*", 
                "ds:Verify*", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "sns:ListTopics", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGuardDutyServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:DescribeImages"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonVPCReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeEgressOnlyInternetGateways", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroupReferences", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeStaleSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeVpcClassicLinkDnsSupport", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointConnectionNotifications", 
                "ec2:DescribeVpcEndpointConnections", 
                "ec2:DescribeVpcEndpointServiceConfigurations", 
                "ec2:DescribeVpcEndpointServicePermissions", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeStackResource", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awseb-*", 
                "arn:aws:cloudformation:*:*:stack/eb-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCloudformationReadOperationsOnElasticBeanstalkStacks"
        }, 
        {
            "Action": [
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:DescribeNotificationConfigurations", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:PutNotificationConfiguration", 
                "ec2:DescribeInstanceStatus", 
                "ec2:AssociateAddress", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "sns:Publish"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowOperations"
        }, 
        {
            "Action": [
                "logs:DescribeLogStreams", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*:log-stream:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "events:DescribeRule", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "events:TestEventPattern", 
                "events:DescribeEventBus"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsReadOnlyAccess"
        }
    ]
}
Policy Name: AWSLambdaReplicator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:DisableReplication"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:*"
            ], 
            "Effect": "Allow", 
            "Sid": "LambdaCreateDeletePermission"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLikeIfExists": {
                    "iam:PassedToService": "lambda.amazonaws.com"
                }
            }, 
            "Sid": "IamPassRolePermission"
        }, 
        {
            "Action": [
                "cloudfront:ListDistributionsByLambdaFunction"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudFrontListDistributions"
        }
    ]
}
Policy Name: AmazonAPIGatewayInvokeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "execute-api:Invoke"
            ], 
            "Resource": "arn:aws:execute-api:*:*:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSSSOServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:AttachRolePolicy", 
                "iam:CreateRole", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DetachRolePolicy", 
                "iam:GetRole", 
                "iam:ListRolePolicies", 
                "iam:PutRolePolicy", 
                "iam:ListAttachedRolePolicies"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListRoles"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "ListRolesInTheAccount"
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus", 
                "iam:DeleteRole", 
                "iam:GetRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDeletionOfServiceLinkedRoleForPeregrine"
        }, 
        {
            "Action": [
                "iam:CreateSAMLProvider", 
                "iam:GetSAMLProvider", 
                "iam:UpdateSAMLProvider", 
                "iam:DeleteSAMLProvider"
            ], 
            "Resource": [
                "arn:aws:iam::*:saml-provider/AWSSSO_*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "organizations:DescribeAccount", 
                "organizations:DescribeOrganization", 
                "organizations:ListAccounts"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisAnalyticsReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesisanalytics:Describe*", 
                "kinesisanalytics:Get*", 
                "kinesisanalytics:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesis:DescribeStream", 
                "kinesis:ListStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "firehose:DescribeDeliveryStream", 
                "firehose:ListDeliveryStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "logs:GetLogEvents", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListPolicyVersions", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "mobileanalytics:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMobileHub_FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "apigateway:GET", 
                "apigateway:GetRestApis", 
                "apigateway:GetResources", 
                "apigateway:POST", 
                "apigateway:TestInvokeMethod", 
                "cloudfront:GetDistribution", 
                "devicefarm:CreateProject", 
                "devicefarm:ListJobs", 
                "devicefarm:ListRuns", 
                "devicefarm:GetProject", 
                "devicefarm:GetRun", 
                "devicefarm:ListArtifacts", 
                "devicefarm:ListProjects", 
                "devicefarm:ScheduleRun", 
                "dynamodb:DescribeTable", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "iam:ListSAMLProviders", 
                "lambda:ListFunctions", 
                "sns:ListTopics", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:GetBot", 
                "lex:GetBots", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases", 
                "mobilehub:CreateProject", 
                "mobilehub:DeleteProject", 
                "mobilehub:UpdateProject", 
                "mobilehub:ExportProject", 
                "mobilehub:ImportProject", 
                "mobilehub:SynchronizeProject", 
                "mobilehub:GenerateProjectParameters", 
                "mobilehub:GetProject", 
                "mobilehub:GetProjectSnapshot", 
                "mobilehub:ListProjectSnapshots", 
                "mobilehub:DeleteProjectSnapshot", 
                "mobilehub:ListAvailableConnectors", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "mobilehub:ValidateProject", 
                "mobilehub:VerifyServiceRole", 
                "mobilehub:DescribeBundle", 
                "mobilehub:ExportBundle", 
                "mobilehub:ListBundles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::*/aws-my-sample-app*.zip", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject"
            ], 
            "Resource": "arn:aws:s3:::*-mobilehub-*/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:ListBucket"
            ], 
            "Resource": "arn:aws:s3:::*-mobilehub-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAPIGatewayPushToCloudWatchLogs
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:PutLogEvents", 
                "logs:GetLogEvents", 
                "logs:FilterLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDataPipelineRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "datapipeline:DescribeObjects", 
                "datapipeline:EvaluateExpression", 
                "dynamodb:BatchGetItem", 
                "dynamodb:DescribeTable", 
                "dynamodb:GetItem", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "dynamodb:UpdateTable", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:Describe*", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:DeleteSecurityGroup", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DetachNetworkInterface", 
                "elasticmapreduce:*", 
                "iam:GetInstanceProfile", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListRolePolicies", 
                "iam:ListInstanceProfiles", 
                "iam:PassRole", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "s3:CreateBucket", 
                "s3:DeleteObject", 
                "s3:Get*", 
                "s3:List*", 
                "s3:Put*", 
                "sdb:BatchPutAttributes", 
                "sdb:Select*", 
                "sns:GetTopicAttributes", 
                "sns:ListTopics", 
                "sns:Publish", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sqs:CreateQueue", 
                "sqs:Delete*", 
                "sqs:GetQueue*", 
                "sqs:PurgeQueue", 
                "sqs:ReceiveMessage"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "elasticmapreduce.amazonaws.com", 
                        "spot.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: CloudWatchFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "cloudwatch:*", 
                "logs:*", 
                "sns:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "events.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSDeepLensLambdaFunctionAccessPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListBucket", 
                "s3:GetObject", 
                "s3:ListObjects"
            ], 
            "Resource": [
                "arn:aws:s3:::deeplens*/*", 
                "arn:aws:s3:::deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensS3ObjectAccess"
        }, 
        {
            "Action": [
                "logs:CreateLogStream", 
                "logs:DescribeLogStreams", 
                "logs:PutLogEvents", 
                "logs:CreateLogGroup"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/greengrass/*", 
            "Effect": "Allow", 
            "Sid": "DeepLensGreenGrassCloudWatchAccess"
        }, 
        {
            "Action": [
                "deeplens:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAccess"
        }, 
        {
            "Action": [
                "acuity:CreateStream", 
                "acuity:DescribeStream", 
                "acuity:DeleteStream", 
                "acuity:PutMedia"
            ], 
            "Resource": [
                "arn:aws:acuity:*:*:stream/deeplens*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityStreamAccess"
        }, 
        {
            "Action": [
                "acuity:GetDataEndpoint"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityEndpointAccess"
        }
    ]
}
Policy Name: AmazonGuardDutyFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "guardduty:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "guardduty.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonRDSDirectoryServiceAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:DescribeDirectories", 
                "ds:AuthorizeApplication", 
                "ds:UnauthorizeApplication"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:GetPipeline", 
                "codepipeline:GetPipelineState", 
                "codepipeline:GetPipelineExecution", 
                "codepipeline:ListPipelineExecutions", 
                "codepipeline:ListActionTypes", 
                "codepipeline:ListPipelines", 
                "iam:ListRoles", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "codecommit:ListBranches", 
                "codecommit:ListRepositories", 
                "codedeploy:GetApplication", 
                "codedeploy:GetDeploymentGroup", 
                "codedeploy:ListApplications", 
                "codedeploy:ListDeploymentGroups", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListFunctions", 
                "opsworks:DescribeApps", 
                "opsworks:DescribeLayers", 
                "opsworks:DescribeStacks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:Describe*", 
                "acm:Get*", 
                "acm:List*", 
                "apigateway:GET", 
                "application-autoscaling:Describe*", 
                "autoscaling-plans:Describe*", 
                "appstream:Describe*", 
                "appstream:Get*", 
                "appstream:List*", 
                "athena:List*", 
                "athena:Batch*", 
                "athena:Get*", 
                "autoscaling:Describe*", 
                "batch:List*", 
                "batch:Describe*", 
                "cloud9:Describe*", 
                "cloud9:List*", 
                "clouddirectory:List*", 
                "clouddirectory:BatchRead", 
                "clouddirectory:Get*", 
                "clouddirectory:LookupPolicy", 
                "cloudformation:Describe*", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:Estimate*", 
                "cloudformation:Preview*", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "cloudhsm:List*", 
                "cloudhsm:Describe*", 
                "cloudhsm:Get*", 
                "cloudsearch:Describe*", 
                "cloudsearch:List*", 
                "cloudtrail:Describe*", 
                "cloudtrail:Get*", 
                "cloudtrail:List*", 
                "cloudtrail:LookupEvents", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "codebuild:BatchGet*", 
                "codebuild:List*", 
                "codecommit:BatchGet*", 
                "codecommit:Get*", 
                "codecommit:GitPull", 
                "codecommit:List*", 
                "codedeploy:BatchGet*", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codepipeline:List*", 
                "codepipeline:Get*", 
                "codestar:List*", 
                "codestar:Describe*", 
                "codestar:Get*", 
                "codestar:Verify*", 
                "cognito-identity:List*", 
                "cognito-identity:Describe*", 
                "cognito-identity:Lookup*", 
                "cognito-sync:List*", 
                "cognito-sync:Describe*", 
                "cognito-sync:Get*", 
                "cognito-sync:QueryRecords", 
                "cognito-idp:AdminList*", 
                "cognito-idp:List*", 
                "cognito-idp:Describe*", 
                "cognito-idp:Get*", 
                "config:Deliver*", 
                "config:Describe*", 
                "config:Get*", 
                "config:List*", 
                "connect:List*", 
                "connect:Describe*", 
                "connect:Get*", 
                "datapipeline:Describe*", 
                "datapipeline:EvaluateExpression", 
                "datapipeline:Get*", 
                "datapipeline:List*", 
                "datapipeline:QueryObjects", 
                "datapipeline:Validate*", 
                "directconnect:Describe*", 
                "devicefarm:List*", 
                "devicefarm:Get*", 
                "discovery:Describe*", 
                "discovery:List*", 
                "discovery:Get*", 
                "dms:Describe*", 
                "dms:List*", 
                "dms:Test*", 
                "ds:Check*", 
                "ds:Describe*", 
                "ds:Get*", 
                "ds:List*", 
                "ds:Verify*", 
                "dynamodb:BatchGet*", 
                "dynamodb:Describe*", 
                "dynamodb:Get*", 
                "dynamodb:List*", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "ec2:Describe*", 
                "ec2:Get*", 
                "ec2messages:Get*", 
                "ecr:BatchCheck*", 
                "ecr:BatchGet*", 
                "ecr:Describe*", 
                "ecr:Get*", 
                "ecr:List*", 
                "ecs:Describe*", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticache:List*", 
                "elasticbeanstalk:Check*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:Request*", 
                "elasticbeanstalk:Retrieve*", 
                "elasticbeanstalk:Validate*", 
                "elasticfilesystem:Describe*", 
                "elasticloadbalancing:Describe*", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:List*", 
                "elasticmapreduce:View*", 
                "elastictranscoder:List*", 
                "elastictranscoder:Read*", 
                "es:Describe*", 
                "es:List*", 
                "es:ESHttpGet", 
                "es:ESHttpHead", 
                "events:Describe*", 
                "events:List*", 
                "events:Test*", 
                "firehose:Describe*", 
                "firehose:List*", 
                "gamelift:List*", 
                "gamelift:Get*", 
                "gamelift:Describe*", 
                "gamelift:RequestUploadCredentials", 
                "gamelift:ResolveAlias", 
                "gamelift:Search*", 
                "glacier:List*", 
                "glacier:Describe*", 
                "glacier:Get*", 
                "guardduty:Get*", 
                "guardduty:List*", 
                "health:Describe*", 
                "health:Get*", 
                "health:List*", 
                "iam:Generate*", 
                "iam:Get*", 
                "iam:List*", 
                "iam:Simulate*", 
                "importexport:Get*", 
                "importexport:List*", 
                "inspector:Describe*", 
                "inspector:Get*", 
                "inspector:List*", 
                "inspector:Preview*", 
                "inspector:LocalizeText", 
                "iot:Describe*", 
                "iot:Get*", 
                "iot:List*", 
                "kinesisanalytics:Describe*", 
                "kinesisanalytics:Discover*", 
                "kinesisanalytics:Get*", 
                "kinesisanalytics:List*", 
                "kinesis:Describe*", 
                "kinesis:Get*", 
                "kinesis:List*", 
                "kms:Describe*", 
                "kms:Get*", 
                "kms:List*", 
                "lambda:List*", 
                "lambda:Get*", 
                "lex:Get*", 
                "lightsail:Get*", 
                "lightsail:Is*", 
                "lightsail:Download*", 
                "logs:Describe*", 
                "logs:Get*", 
                "logs:FilterLogEvents", 
                "logs:ListTagsLogGroup", 
                "logs:TestMetricFilter", 
                "machinelearning:Describe*", 
                "machinelearning:Get*", 
                "mobileanalytics:Get*", 
                "mobilehub:Describe*", 
                "mobilehub:Export*", 
                "mobilehub:Generate*", 
                "mobilehub:Get*", 
                "mobilehub:List*", 
                "mobilehub:Validate*", 
                "mobilehub:Verify*", 
                "mobiletargeting:Get*", 
                "opsworks:Describe*", 
                "opsworks:Get*", 
                "opsworks-cm:Describe*", 
                "organizations:Describe*", 
                "organizations:List*", 
                "polly:Describe*", 
                "polly:Get*", 
                "polly:List*", 
                "polly:SynthesizeSpeech", 
                "rekognition:CompareFaces", 
                "rekognition:Detect*", 
                "rekognition:List*", 
                "rekognition:Search*", 
                "rds:Describe*", 
                "rds:List*", 
                "rds:Download*", 
                "redshift:Describe*", 
                "redshift:View*", 
                "redshift:Get*", 
                "resource-groups:Describe*", 
                "resource-groups:Get*", 
                "resource-groups:List*", 
                "resource-groups:Search*", 
                "route53:Get*", 
                "route53:List*", 
                "route53:Test*", 
                "route53domains:Check*", 
                "route53domains:Get*", 
                "route53domains:List*", 
                "route53domains:View*", 
                "s3:Get*", 
                "s3:List*", 
                "s3:Head*", 
                "sdb:Get*", 
                "sdb:List*", 
                "sdb:Select*", 
                "servicecatalog:List*", 
                "servicecatalog:Scan*", 
                "servicecatalog:Search*", 
                "servicecatalog:Describe*", 
                "ses:Get*", 
                "ses:List*", 
                "ses:Describe*", 
                "ses:Verify*", 
                "shield:Describe*", 
                "shield:List*", 
                "snowball:Get*", 
                "snowball:Describe*", 
                "snowball:List*", 
                "sns:Get*", 
                "sns:List*", 
                "sns:Check*", 
                "sqs:Get*", 
                "sqs:List*", 
                "sqs:Receive*", 
                "ssm:Describe*", 
                "ssm:Get*", 
                "ssm:List*", 
                "states:List*", 
                "states:Describe*", 
                "states:GetExecutionHistory", 
                "storagegateway:Describe*", 
                "storagegateway:List*", 
                "sts:Get*", 
                "swf:Count*", 
                "swf:Describe*", 
                "swf:Get*", 
                "swf:List*", 
                "tag:Get*", 
                "trustedadvisor:Describe*", 
                "waf:Get*", 
                "waf:List*", 
                "waf-regional:List*", 
                "waf-regional:Get*", 
                "workdocs:Describe*", 
                "workdocs:Get*", 
                "workdocs:CheckAlias", 
                "workmail:Describe*", 
                "workmail:Get*", 
                "workmail:List*", 
                "workmail:Search*", 
                "workspaces:Describe*", 
                "xray:BatchGet*", 
                "xray:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncInvokeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appsync:GraphQL", 
                "appsync:GetGraphqlApi", 
                "appsync:ListGraphqlApis", 
                "appsync:ListApiKeys"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningBatchPredictionsAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:CreateBatchPrediction", 
                "machinelearning:DeleteBatchPrediction", 
                "machinelearning:DescribeBatchPredictions", 
                "machinelearning:GetBatchPrediction", 
                "machinelearning:UpdateBatchPrediction"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSEC2SpotFleetServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:RunInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*", 
                "arn:aws:ec2:*:*:spot-instances-request/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:ec2spot:fleet-request-id": "*"
                }
            }
        }
    ]
}
Policy Name: AmazonRekognitionReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rekognition:CompareFaces", 
                "rekognition:DetectFaces", 
                "rekognition:DetectLabels", 
                "rekognition:ListCollections", 
                "rekognition:ListFaces", 
                "rekognition:SearchFaces", 
                "rekognition:SearchFacesByImage", 
                "rekognition:DetectText", 
                "rekognition:GetCelebrityInfo", 
                "rekognition:RecognizeCelebrities", 
                "rekognition:DetectModerationLabels", 
                "rekognition:GetLabelDetection", 
                "rekognition:GetFaceDetection", 
                "rekognition:GetContentModeration", 
                "rekognition:GetPersonTracking", 
                "rekognition:GetCelebrityRecognition", 
                "rekognition:GetFaceSearch", 
                "rekognition:DescribeStreamProcessor", 
                "rekognition:ListStreamProcessors"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codedeploy:Batch*", 
                "codedeploy:Get*", 
                "codedeploy:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudSearchFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudsearch:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudHSMFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "cloudhsm:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2SpotFleetAutoscaleRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeSpotFleetRequests", 
                "ec2:ModifySpotFleetRequest"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticLoadBalancingServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAddresses", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:AttachNetworkInterface", 
                "ec2:DetachNetworkInterface", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssignIpv6Addresses", 
                "ec2:UnassignIpv6Addresses"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeBuildDeveloperAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codebuild:StartBuild", 
                "codebuild:StopBuild", 
                "codebuild:BatchGet*", 
                "codebuild:Get*", 
                "codebuild:List*", 
                "codecommit:GetBranch", 
                "codecommit:GetCommit", 
                "codecommit:GetRepository", 
                "codecommit:ListBranches", 
                "s3:GetBucketLocation", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:PutParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ElastiCacheServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSGlueServiceNotebookRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glue:CreateDatabase", 
                "glue:CreatePartition", 
                "glue:CreateTable", 
                "glue:DeleteDatabase", 
                "glue:DeletePartition", 
                "glue:DeleteTable", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:GetTable", 
                "glue:GetTableVersions", 
                "glue:GetTables", 
                "glue:UpdateDatabase", 
                "glue:UpdatePartition", 
                "glue:UpdateTable", 
                "glue:CreateBookmark", 
                "glue:GetBookmark", 
                "glue:UpdateBookmark", 
                "glue:GetMetric", 
                "glue:PutMetric", 
                "glue:CreateConnection", 
                "glue:CreateJob", 
                "glue:DeleteConnection", 
                "glue:DeleteJob", 
                "glue:GetConnection", 
                "glue:GetConnections", 
                "glue:GetDevEndpoint", 
                "glue:GetDevEndpoints", 
                "glue:GetJob", 
                "glue:GetJobs", 
                "glue:UpdateJob", 
                "glue:BatchDeleteConnection", 
                "glue:UpdateConnection", 
                "glue:GetUserDefinedFunction", 
                "glue:UpdateUserDefinedFunction", 
                "glue:GetUserDefinedFunctions", 
                "glue:DeleteUserDefinedFunction", 
                "glue:CreateUserDefinedFunction", 
                "glue:BatchGetPartition", 
                "glue:BatchDeletePartition", 
                "glue:BatchCreatePartition", 
                "glue:BatchDeleteTable", 
                "glue:UpdateDevEndpoint", 
                "s3:GetBucketLocation", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketAcl"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::crawler-public*", 
                "arn:aws:s3:::aws-glue*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:DeleteObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:network-interface/*", 
                "arn:aws:ec2:*:*:security-group/*", 
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringEquals": {
                    "aws:TagKeys": [
                        "aws-glue-service-resource"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonEC2SpotFleetRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeInstanceStatus", 
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterTargets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDataPipeline_PowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:List*", 
                "dynamodb:DescribeTable", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "sns:ListTopics", 
                "iam:ListRoles", 
                "iam:GetRolePolicy", 
                "iam:GetInstanceProfile", 
                "iam:ListInstanceProfiles", 
                "datapipeline:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultRole"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderJobsSubmitter
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elastictranscoder:Read*", 
                "elastictranscoder:List*", 
                "elastictranscoder:*Job", 
                "elastictranscoder:*Preset", 
                "s3:List*", 
                "iam:List*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeStarServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "events:PutTargets", 
                "events:RemoveTargets", 
                "events:PutRule", 
                "events:DeleteRule", 
                "events:DescribeRule"
            ], 
            "Resource": [
                "arn:aws:events:*:*:rule/awscodestar-*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectEventRules"
        }, 
        {
            "Action": [
                "cloudformation:*Stack*", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:ExecuteChangeSet", 
                "cloudformation:DeleteChangeSet", 
                "cloudformation:GetTemplate"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awscodestar-*", 
                "arn:aws:cloudformation:*:*:stack/awseb-*", 
                "arn:aws:cloudformation:*:*:stack/aws-cloud9-*", 
                "arn:aws:cloudformation:*:aws:transform/CodeStar*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectStack"
        }, 
        {
            "Action": [
                "cloudformation:GetTemplateSummary", 
                "cloudformation:DescribeChangeSet"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ProjectStackTemplate"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::awscodestar-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectQuickstarts"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-codestar-*", 
                "arn:aws:s3:::aws-codestar-*/*", 
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectS3Buckets"
        }, 
        {
            "Action": [
                "codestar:*", 
                "codecommit:*", 
                "codepipeline:*", 
                "codedeploy:*", 
                "codebuild:*", 
                "ec2:RunInstances", 
                "autoscaling:*", 
                "cloudwatch:Put*", 
                "ec2:*", 
                "elasticbeanstalk:*", 
                "elasticloadbalancing:*", 
                "iam:ListRoles", 
                "logs:*", 
                "sns:*", 
                "cloud9:CreateEnvironmentEC2", 
                "cloud9:DeleteEnvironment", 
                "cloud9:DescribeEnvironment*", 
                "cloud9:ListEnvironments"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ProjectServices"
        }, 
        {
            "Action": [
                "iam:AttachRolePolicy", 
                "iam:CreateRole", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DetachRolePolicy", 
                "iam:GetRole", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:SetDefaultPolicyVersion", 
                "iam:CreatePolicy", 
                "iam:DeletePolicy", 
                "iam:AddRoleToInstanceProfile", 
                "iam:CreateInstanceProfile", 
                "iam:DeleteInstanceProfile", 
                "iam:RemoveRoleFromInstanceProfile"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/CodeStarWorker*", 
                "arn:aws:iam::*:policy/CodeStarWorker*", 
                "arn:aws:iam::*:instance-profile/awscodestar-*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectWorkerRoles"
        }, 
        {
            "Action": [
                "iam:AttachUserPolicy", 
                "iam:DetachUserPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "ArnEquals": {
                    "iam:PolicyArn": [
                        "arn:aws:iam::*:policy/CodeStar_*"
                    ]
                }
            }, 
            "Sid": "ProjectTeamMembers"
        }, 
        {
            "Action": [
                "iam:CreatePolicy", 
                "iam:DeletePolicy", 
                "iam:CreatePolicyVersion", 
                "iam:DeletePolicyVersion", 
                "iam:ListEntitiesForPolicy", 
                "iam:ListPolicyVersions"
            ], 
            "Resource": [
                "arn:aws:iam::*:policy/CodeStar_*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectRoles"
        }, 
        {
            "Action": [
                "iam:ListAttachedRolePolicies"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-codestar-service-role", 
                "arn:aws:iam::*:role/service-role/aws-codestar-service-role"
            ], 
            "Effect": "Allow", 
            "Sid": "InspectServiceRole"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "cloud9.amazonaws.com"
                }
            }, 
            "Sid": "IAMLinkRole"
        }, 
        {
            "Action": [
                "config:DescribeConfigRules"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DescribeConfigRuleForARN"
        }
    ]
}
Policy Name: AmazonTranscribeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "transcribe:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::*transcribe*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDirectoryServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:*", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:SetTopicAttributes", 
                "sns:Subscribe", 
                "sns:Unsubscribe"
            ], 
            "Resource": "arn:aws:sns:*:*:DirectoryMonitoring*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDynamoDBFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:*", 
                "dax:*", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget", 
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarmHistory", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics", 
                "cloudwatch:PutMetricAlarm", 
                "datapipeline:ActivatePipeline", 
                "datapipeline:CreatePipeline", 
                "datapipeline:DeletePipeline", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:PutPipelineDefinition", 
                "datapipeline:QueryObjects", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "iam:GetRole", 
                "iam:ListRoles", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sns:SetTopicAttributes", 
                "lambda:CreateFunction", 
                "lambda:ListFunctions", 
                "lambda:ListEventSourceMappings", 
                "lambda:CreateEventSourceMapping", 
                "lambda:DeleteEventSourceMapping", 
                "lambda:GetFunctionConfiguration", 
                "lambda:DeleteFunction"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "application-autoscaling.amazonaws.com", 
                        "dax.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": [
                        "replication.dynamodb.amazonaws.com", 
                        "dax.amazonaws.com", 
                        "dynamodb.application-autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonSESReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ses:Get*", 
                "ses:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSWAFReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "waf:Get*", 
                "waf:List*", 
                "waf-regional:Get*", 
                "waf-regional:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingNotificationAccessRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sqs:SendMessage", 
                "sqs:GetQueueUrl", 
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mechanicalturk:Get*", 
                "mechanicalturk:Search*", 
                "mechanicalturk:List*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaReplicatorInternal
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:DisableReplication"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:*"
            ], 
            "Effect": "Allow", 
            "Sid": "LambdaCreateDeletePermission"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLikeIfExists": {
                    "iam:PassedToService": [
                        "lambda.amazonaws.com", 
                        "lambda.beta.amazonaws.com", 
                        "lambda.gamma.amazonaws.com"
                    ]
                }
            }, 
            "Sid": "IamPassRolePermission"
        }, 
        {
            "Action": [
                "cloudfront:ListDistributionsByLambdaFunction"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudFrontListDistributions"
        }
    ]
}
Policy Name: AmazonKinesisReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesis:Get*", 
                "kinesis:List*", 
                "kinesis:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "codedeploy:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchActionsEC2Access
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:Describe*", 
                "ec2:Describe*", 
                "ec2:RebootInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaDynamoDBExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:DescribeStream", 
                "dynamodb:GetRecords", 
                "dynamodb:GetShardIterator", 
                "dynamodb:ListStreams", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53DomainsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:CreateHostedZone", 
                "route53domains:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElastiCacheReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticache:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRDSServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/rds/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAthenaFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "athena:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "glue:CreateDatabase", 
                "glue:DeleteDatabase", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:UpdateDatabase", 
                "glue:CreateTable", 
                "glue:DeleteTable", 
                "glue:BatchDeleteTable", 
                "glue:UpdateTable", 
                "glue:GetTable", 
                "glue:GetTables", 
                "glue:BatchCreatePartition", 
                "glue:CreatePartition", 
                "glue:DeletePartition", 
                "glue:BatchDeletePartition", 
                "glue:UpdatePartition", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:BatchGetPartition"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts", 
                "s3:AbortMultipartUpload", 
                "s3:CreateBucket", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-athena-query-results-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::athena-examples*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkCrowdFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "crowd:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CrowdApiFullAccess"
        }
    ]
}
Policy Name: AmazonElasticFileSystemReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "elasticfilesystem:Describe*", 
                "kms:ListAliases"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudFrontFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "arn:aws:s3:::*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "acm:ListCertificates", 
                "cloudfront:*", 
                "iam:ListServerCertificates", 
                "waf:ListWebACLs", 
                "waf:GetWebACL"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9Administrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloud9:*", 
                "iam:GetUser", 
                "iam:ListUsers", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "cloud9.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonMachineLearningRoleforRedshiftDataSource
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:RevokeSecurityGroupIngress", 
                "redshift:AuthorizeClusterSecurityGroupIngress", 
                "redshift:CreateClusterSecurityGroup", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "redshift:ModifyCluster", 
                "redshift:RevokeClusterSecurityGroupIngress", 
                "s3:GetBucketLocation", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:PutBucketPolicy", 
                "s3:PutObject"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingEMRInstanceGroupPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticmapreduce:ListInstanceGroups", 
                "elasticmapreduce:ModifyInstanceGroups", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOrganizationsServiceTrustPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:DeleteRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/organizations.amazonaws.com/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDeletionOfServiceLinkedRoleForOrganizations"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowCreationOfServiceLinkedRoles"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsNon-financialReportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "mobileanalytics:GetReports", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudTrailFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:AddPermission", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListTopics", 
                "sns:SetTopicAttributes", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:ListAllMyBuckets", 
                "s3:PutBucketPolicy", 
                "s3:ListBucket", 
                "s3:GetObject", 
                "s3:GetBucketLocation", 
                "s3:GetBucketPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "cloudtrail:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole", 
                "iam:ListRoles", 
                "iam:GetRolePolicy", 
                "iam:GetUser"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kms:ListKeys", 
                "kms:ListAliases"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCognitoDeveloperAuthenticatedIdentities
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-identity:GetOpenIdTokenForDeveloperIdentity", 
                "cognito-identity:LookupDeveloperIdentity", 
                "cognito-identity:MergeDeveloperIdentities", 
                "cognito-identity:UnlinkDeveloperIdentity"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudtrail:DescribeTrails", 
                "ec2:Describe*", 
                "config:Put*", 
                "config:Get*", 
                "config:List*", 
                "config:Describe*", 
                "cloudtrail:GetTrailStatus", 
                "s3:GetObject", 
                "iam:GetAccountAuthorizationDetails", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetGroup", 
                "iam:GetGroupPolicy", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:GetUser", 
                "iam:GetUserPolicy", 
                "iam:ListAttachedGroupPolicies", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListAttachedUserPolicies", 
                "iam:ListEntitiesForPolicy", 
                "iam:ListGroupPolicies", 
                "iam:ListGroupsForUser", 
                "iam:ListInstanceProfilesForRole", 
                "iam:ListPolicyVersions", 
                "iam:ListRolePolicies", 
                "iam:ListUserPolicies", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeLoadBalancerAttributes", 
                "elasticloadbalancing:DescribeLoadBalancerPolicies", 
                "elasticloadbalancing:DescribeTags", 
                "acm:DescribeCertificate", 
                "acm:ListCertificates", 
                "acm:ListTagsForCertificate", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "rds:DescribeDBSnapshotAttributes", 
                "rds:DescribeDBSnapshots", 
                "rds:DescribeDBSubnetGroups", 
                "rds:DescribeEventSubscriptions", 
                "rds:ListTagsForResource", 
                "rds:DescribeDBClusters", 
                "s3:GetAccelerateConfiguration", 
                "s3:GetBucketAcl", 
                "s3:GetBucketCORS", 
                "s3:GetBucketLocation", 
                "s3:GetBucketLogging", 
                "s3:GetBucketNotification", 
                "s3:GetBucketPolicy", 
                "s3:GetBucketRequestPayment", 
                "s3:GetBucketTagging", 
                "s3:GetBucketVersioning", 
                "s3:GetBucketWebsite", 
                "s3:GetLifecycleConfiguration", 
                "s3:GetReplicationConfiguration", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "redshift:DescribeClusterParameterGroups", 
                "redshift:DescribeClusterParameters", 
                "redshift:DescribeClusterSecurityGroups", 
                "redshift:DescribeClusterSnapshots", 
                "redshift:DescribeClusterSubnetGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeEventSubscriptions", 
                "redshift:DescribeLoggingStatus", 
                "dynamodb:DescribeLimits", 
                "dynamodb:DescribeTable", 
                "dynamodb:ListTables", 
                "dynamodb:ListTagsOfResource", 
                "cloudwatch:DescribeAlarms", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingPolicies", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLaunchConfigurations", 
                "autoscaling:DescribeLifecycleHooks", 
                "autoscaling:DescribePolicies", 
                "autoscaling:DescribeScheduledActions", 
                "autoscaling:DescribeTags", 
                "lambda:GetFunction", 
                "lambda:GetPolicy", 
                "lambda:ListFunctions", 
                "lambda:GetAlias", 
                "lambda:ListAliases", 
                "waf-regional:GetWebACLForResource", 
                "waf-regional:GetWebACL", 
                "cloudfront:ListTagsForResource"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingAppStreamFleetPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:UpdateFleet", 
                "appstream:DescribeFleets", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSGlueServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glue:*", 
                "s3:GetBucketLocation", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketAcl", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeRouteTables", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "iam:ListRolePolicies", 
                "iam:GetRole", 
                "iam:GetRolePolicy"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*/*", 
                "arn:aws:s3:::*/*aws-glue-*/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::crawler-public*", 
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:/aws-glue/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:network-interface/*", 
                "arn:aws:ec2:*:*:security-group/*", 
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringEquals": {
                    "aws:TagKeys": [
                        "aws-glue-service-resource"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonAppStreamServiceAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeSubnets", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:ListBucket", 
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject", 
                "s3:GetObjectVersion", 
                "s3:DeleteObjectVersion", 
                "s3:PutBucketPolicy"
            ], 
            "Resource": "arn:aws:s3:::appstream2-36fb080bb8-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRedshiftFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "redshift:*", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "sns:CreateTopic", 
                "sns:Get*", 
                "sns:List*", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:EnableAlarmActions", 
                "cloudwatch:DisableAlarmActions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/redshift.amazonaws.com/AWSServiceRoleForRedshift", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "redshift.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonZocaloReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "zocalo:Describe*", 
                "ds:DescribeDirectories", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudHSMReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudhsm:Get*", 
                "cloudhsm:List*", 
                "cloudhsm:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ComprehendFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "comprehend:*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "iam:ListRoles", 
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: SystemAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:Describe*", 
                "acm:Get*", 
                "acm:List*", 
                "acm:Request*", 
                "acm:Resend*", 
                "autoscaling:*", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:ListPublicKeys", 
                "cloudtrail:ListTags", 
                "cloudtrail:LookupEvents", 
                "cloudtrail:StartLogging", 
                "cloudtrail:StopLogging", 
                "cloudwatch:*", 
                "codecommit:BatchGetRepositories", 
                "codecommit:CreateBranch", 
                "codecommit:CreateRepository", 
                "codecommit:Get*", 
                "codecommit:GitPull", 
                "codecommit:GitPush", 
                "codecommit:List*", 
                "codecommit:Put*", 
                "codecommit:Test*", 
                "codecommit:Update*", 
                "codedeploy:*", 
                "codepipeline:*", 
                "config:*", 
                "ds:*", 
                "ec2:Allocate*", 
                "ec2:AssignPrivateIpAddresses*", 
                "ec2:Associate*", 
                "ec2:Allocate*", 
                "ec2:AttachInternetGateway", 
                "ec2:AttachNetworkInterface", 
                "ec2:AttachVpnGateway", 
                "ec2:Bundle*", 
                "ec2:Cancel*", 
                "ec2:Copy*", 
                "ec2:CreateCustomerGateway", 
                "ec2:CreateDhcpOptions", 
                "ec2:CreateFlowLogs", 
                "ec2:CreateImage", 
                "ec2:CreateInstanceExportTask", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateKeyPair", 
                "ec2:CreateNatGateway", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreatePlacementGroup", 
                "ec2:CreateReservedInstancesListing", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSnapshot", 
                "ec2:CreateSpotDatafeedSubscription", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:CreateVpc", 
                "ec2:CreateVpcEndpoint", 
                "ec2:CreateVpnConnection", 
                "ec2:CreateVpnConnectionRoute", 
                "ec2:CreateVpnGateway", 
                "ec2:DeleteFlowLogs", 
                "ec2:DeleteKeyPair", 
                "ec2:DeleteNatGateway", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeletePlacementGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteSpotDatafeedSubscription", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteTags", 
                "ec2:DeleteVpc", 
                "ec2:DeleteVpcEndpoints", 
                "ec2:DeleteVpnConnection", 
                "ec2:DeleteVpnConnectionRoute", 
                "ec2:DeleteVpnGateway", 
                "ec2:DeregisterImage", 
                "ec2:Describe*", 
                "ec2:DetachInternetGateway", 
                "ec2:DetachNetworkInterface", 
                "ec2:DetachVpnGateway", 
                "ec2:DisableVgwRoutePropagation", 
                "ec2:DisableVpcClassicLinkDnsSupport", 
                "ec2:DisassociateAddress", 
                "ec2:DisassociateRouteTable", 
                "ec2:EnableVgwRoutePropagation", 
                "ec2:EnableVolumeIO", 
                "ec2:EnableVpcClassicLinkDnsSupport", 
                "ec2:GetConsoleOutput", 
                "ec2:GetHostReservationPurchasePreview", 
                "ec2:GetPasswordData", 
                "ec2:Import*", 
                "ec2:Modify*", 
                "ec2:MonitorInstances", 
                "ec2:MoveAddressToVpc", 
                "ec2:Purchase*", 
                "ec2:RegisterImage", 
                "ec2:Release*", 
                "ec2:Replace*", 
                "ec2:ReportInstanceStatus", 
                "ec2:Request*", 
                "ec2:Reset*", 
                "ec2:RestoreAddressToClassic", 
                "ec2:RunScheduledInstances", 
                "ec2:UnassignPrivateIpAddresses", 
                "ec2:UnmonitorInstances", 
                "elasticloadbalancing:*", 
                "events:*", 
                "iam:GetAccount*", 
                "iam:GetContextKeys*", 
                "iam:GetCredentialReport", 
                "iam:ListAccountAliases", 
                "iam:ListGroups", 
                "iam:ListOpenIDConnectProviders", 
                "iam:ListPolicies", 
                "iam:ListPoliciesGrantingServiceAccess", 
                "iam:ListRoles", 
                "iam:ListSAMLProviders", 
                "iam:ListServerCertificates", 
                "iam:Simulate*", 
                "iam:UpdateServerCertificate", 
                "iam:UpdateSigningCertificate", 
                "kinesis:ListStreams", 
                "kinesis:PutRecord", 
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:Describe*", 
                "kms:GenerateRandom", 
                "kms:Get*", 
                "kms:List*", 
                "kms:Encrypt", 
                "kms:ReEncrypt*", 
                "lambda:Create*", 
                "lambda:Delete*", 
                "lambda:Get*", 
                "lambda:InvokeFunction", 
                "lambda:List*", 
                "lambda:PublishVersion", 
                "lambda:Update*", 
                "logs:*", 
                "rds:Describe*", 
                "rds:ListTagsForResource", 
                "route53:*", 
                "route53domains:*", 
                "ses:*", 
                "sns:*", 
                "sqs:*", 
                "trustedadvisor:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AcceptVpcPeeringConnection", 
                "ec2:AttachClassicLinkVpc", 
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateVpcPeeringConnection", 
                "ec2:DeleteCustomerGateway", 
                "ec2:DeleteDhcpOptions", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteNetworkAcl*", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteVolume", 
                "ec2:DeleteVpcPeeringConnection", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:DetachVolume", 
                "ec2:DisableVpcClassicLink", 
                "ec2:EnableVpcClassicLink", 
                "ec2:GetConsoleScreenshot", 
                "ec2:RebootInstances", 
                "ec2:RejectVpcPeeringConnection", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "s3:*", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetAccessKeyLastUsed", 
                "iam:GetGroup*", 
                "iam:GetInstanceProfile", 
                "iam:GetLoginProfile", 
                "iam:GetOpenIDConnectProvider", 
                "iam:GetPolicy*", 
                "iam:GetRole*", 
                "iam:GetSAMLProvider", 
                "iam:GetSSHPublicKey", 
                "iam:GetServerCertificate", 
                "iam:GetServiceLastAccessed*", 
                "iam:GetUser*", 
                "iam:ListAccessKeys", 
                "iam:ListAttached*", 
                "iam:ListEntitiesForPolicy", 
                "iam:ListGroupPolicies", 
                "iam:ListGroupsForUser", 
                "iam:ListInstanceProfiles*", 
                "iam:ListMFADevices", 
                "iam:ListPolicyVersions", 
                "iam:ListRolePolicies", 
                "iam:ListSSHPublicKeys", 
                "iam:ListSigningCertificates", 
                "iam:ListUserPolicies", 
                "iam:Upload*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:ListRoles", 
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/rds-monitoring-role", 
                "arn:aws:iam::*:role/ec2-sysadmin-*", 
                "arn:aws:iam::*:role/ecr-sysadmin-*", 
                "arn:aws:iam::*:role/lamdba-sysadmin-*", 
                "arn:aws:iam::*:role/lambda-sysadmin-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceEventsRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:RunTask"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:Get*", 
                "route53:List*", 
                "route53:TestDNSAnswer"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMigrationHubDiscoveryAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "discovery:ListConfigurations", 
                "discovery:DescribeConfigurations"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ReportsAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "ec2-reports:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceAutoscaleRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:DescribeServices", 
                "ecs:UpdateService"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncSchemaAuthor
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appsync:GraphQL", 
                "appsync:CreateResolver", 
                "appsync:CreateType", 
                "appsync:DeleteResolver", 
                "appsync:DeleteType", 
                "appsync:GetResolver", 
                "appsync:GetType", 
                "appsync:GetDataSource", 
                "appsync:GetSchemaCreationStatus", 
                "appsync:GetIntrospectionSchema", 
                "appsync:GetGraphqlApi", 
                "appsync:ListTypes", 
                "appsync:ListApiKeys", 
                "appsync:ListResolvers", 
                "appsync:ListDataSources", 
                "appsync:ListGraphqlApis", 
                "appsync:StartSchemaCreation", 
                "appsync:UpdateResolver", 
                "appsync:UpdateType"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessDeviceSetup
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:RegisterDevice", 
                "a4b:CompleteRegistration", 
                "a4b:SearchDevices"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSBatchServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeImages", 
                "ec2:DescribeImageAttribute", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSpotFleetInstances", 
                "ec2:DescribeSpotFleetRequests", 
                "ec2:DescribeSpotPriceHistory", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:RequestSpotFleet", 
                "ec2:CancelSpotFleetRequests", 
                "ec2:ModifySpotFleetRequest", 
                "ec2:TerminateInstances", 
                "autoscaling:DescribeAccountLimits", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLaunchConfigurations", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:CreateLaunchConfiguration", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:UpdateAutoScalingGroup", 
                "autoscaling:SetDesiredCapacity", 
                "autoscaling:DeleteLaunchConfiguration", 
                "autoscaling:DeleteAutoScalingGroup", 
                "autoscaling:CreateOrUpdateTags", 
                "autoscaling:SuspendProcesses", 
                "autoscaling:PutNotificationConfiguration", 
                "autoscaling:TerminateInstanceInAutoScalingGroup", 
                "ecs:DescribeClusters", 
                "ecs:DescribeContainerInstances", 
                "ecs:DescribeTaskDefinition", 
                "ecs:DescribeTasks", 
                "ecs:ListClusters", 
                "ecs:ListContainerInstances", 
                "ecs:ListTaskDefinitionFamilies", 
                "ecs:ListTaskDefinitions", 
                "ecs:ListTasks", 
                "ecs:CreateCluster", 
                "ecs:DeleteCluster", 
                "ecs:RegisterTaskDefinition", 
                "ecs:DeregisterTaskDefinition", 
                "ecs:RunTask", 
                "ecs:StartTask", 
                "ecs:StopTask", 
                "ecs:UpdateContainerAgent", 
                "ecs:DeregisterContainerInstance", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogGroups", 
                "iam:GetInstanceProfile", 
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ecs-tasks.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": [
                        "spot.amazonaws.com", 
                        "spotfleet.amazonaws.com", 
                        "autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AWSElasticBeanstalkWebTier
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:Get*", 
                "s3:List*", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "BucketAccess"
        }, 
        {
            "Action": [
                "xray:PutTraceSegments", 
                "xray:PutTelemetryRecords"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "XRayAccess"
        }, 
        {
            "Action": [
                "logs:PutLogEvents", 
                "logs:CreateLogStream", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudWatchLogsAccess"
        }
    ]
}
Policy Name: AmazonSQSReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sqs:GetQueueAttributes", 
                "sqs:ListQueues"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMobileHub_ServiceUseOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateUploadBucket", 
                "cloudformation:ListStacks", 
                "cloudformation:ValidateTemplate", 
                "cloudfront:CreateDistribution", 
                "cloudfront:DeleteDistribution", 
                "cloudfront:GetDistribution", 
                "cloudfront:GetDistributionConfig", 
                "cloudfront:TagResource", 
                "cloudfront:UpdateDistribution", 
                "cognito-identity:CreateIdentityPool", 
                "cognito-identity:UpdateIdentityPool", 
                "cognito-identity:DeleteIdentityPool", 
                "cognito-identity:SetIdentityPoolRoles", 
                "cognito-idp:CreateUserPool", 
                "dynamodb:CreateTable", 
                "dynamodb:DeleteTable", 
                "dynamodb:DescribeTable", 
                "dynamodb:TagResource", 
                "dynamodb:UpdateTable", 
                "iam:AddClientIDToOpenIDConnectProvider", 
                "iam:CreateOpenIDConnectProvider", 
                "iam:GetOpenIDConnectProvider", 
                "iam:ListOpenIDConnectProviders", 
                "iam:CreateSAMLProvider", 
                "iam:GetSAMLProvider", 
                "iam:ListSAMLProvider", 
                "iam:UpdateSAMLProvider", 
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:GetFunction", 
                "mobileanalytics:CreateApp", 
                "mobileanalytics:DeleteApp", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListPlatformApplications", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "lex:PutIntent", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:PutSlotType", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:PutBot", 
                "lex:GetBot", 
                "lex:GetBots", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:CreatePlatformApplication", 
                "sns:DeletePlatformApplication", 
                "sns:GetPlatformApplicationAttributes", 
                "sns:SetPlatformApplicationAttributes"
            ], 
            "Resource": [
                "arn:aws:sns:*:*:app/*_MOBILEHUB_*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteBucketPolicy", 
                "s3:DeleteBucketWebsite", 
                "s3:ListBucket", 
                "s3:ListBucketVersions", 
                "s3:GetBucketLocation", 
                "s3:GetBucketVersioning", 
                "s3:PutBucketVersioning", 
                "s3:PutBucketWebsite", 
                "s3:PutBucketPolicy", 
                "s3:PutBucketTagging", 
                "s3:PutBucketCORS", 
                "s3:SetBucketCrossOriginConfiguration"
            ], 
            "Resource": [
                "arn:aws:s3:::*-userfiles-mobilehub-*", 
                "arn:aws:s3:::*-contentdelivery-mobilehub-*", 
                "arn:aws:s3:::*-hosting-mobilehub-*", 
                "arn:aws:s3:::*-deployments-mobilehub-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:DeleteObject", 
                "s3:DeleteVersion", 
                "s3:DeleteObjectVersion", 
                "s3:GetObject", 
                "s3:GetObjectVersion", 
                "s3:PutObject", 
                "s3:PutObjectAcl"
            ], 
            "Resource": [
                "arn:aws:s3:::*-userfiles-mobilehub-*/*", 
                "arn:aws:s3:::*-contentdelivery-mobilehub-*/*", 
                "arn:aws:s3:::*-hosting-mobilehub-*/*", 
                "arn:aws:s3:::*-deployments-mobilehub-*/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:AddPermission", 
                "lambda:CreateAlias", 
                "lambda:DeleteAlias", 
                "lambda:UpdateAlias", 
                "lambda:GetFunctionConfiguration", 
                "lambda:GetPolicy", 
                "lambda:RemovePermission", 
                "lambda:UpdateFunctionCode", 
                "lambda:UpdateFunctionConfiguration"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:*-mobilehub-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateRole", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListRolePolicies", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:UpdateAssumeRolePolicy", 
                "iam:AttachRolePolicy", 
                "iam:DetachRolePolicy"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/*_unauth_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_auth_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_consolepush_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_lambdaexecutionrole_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_smsverification_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_botexecutionrole_MOBILEHUB_*", 
                "arn:aws:iam::*:role/pinpoint-events", 
                "arn:aws:iam::*:role/service-role/pinpoint-events", 
                "arn:aws:iam::*:role/MOBILEHUB-*-lambdaexecution*", 
                "arn:aws:iam::*:role/MobileHub_Service_Role"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole", 
                "iam:GetRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/mobilehub/*:log-stream:*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListAttachedRolePolicies"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/MobileHub_Service_Role"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStacks", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStackResource", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStackResources", 
                "cloudformation:UpdateStack"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/MOBILEHUB-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "apigateway:DELETE", 
                "apigateway:GET", 
                "apigateway:HEAD", 
                "apigateway:OPTIONS", 
                "apigateway:PATCH", 
                "apigateway:POST", 
                "apigateway:PUT"
            ], 
            "Resource": [
                "arn:aws:apigateway:*::/restapis*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "apigateway:GET", 
                "apigateway:HEAD", 
                "apigateway:OPTIONS"
            ], 
            "Resource": [
                "arn:aws:apigateway:*::/domainnames*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cognito-idp:DeleteUserPool", 
                "cognito-idp:DescribeUserPool", 
                "cognito-idp:CreateUserPoolClient", 
                "cognito-idp:DescribeUserPoolClient", 
                "cognito-idp:DeleteUserPoolClient"
            ], 
            "Resource": [
                "arn:aws:cognito-idp:*:*:userpool/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mobiletargeting:UpdateApnsChannel", 
                "mobiletargeting:UpdateApnsSandboxChannel", 
                "mobiletargeting:UpdateEmailChannel", 
                "mobiletargeting:UpdateGcmChannel", 
                "mobiletargeting:UpdateSmsChannel", 
                "mobiletargeting:DeleteApnsChannel", 
                "mobiletargeting:DeleteApnsSandboxChannel", 
                "mobiletargeting:DeleteEmailChannel", 
                "mobiletargeting:DeleteGcmChannel", 
                "mobiletargeting:DeleteSmsChannel"
            ], 
            "Resource": [
                "arn:aws:mobiletargeting:*:*:apps/*/channels/*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonChimeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "chime:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticLoadBalancingClassicServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAddresses", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:AttachNetworkInterface", 
                "ec2:DetachNetworkInterface", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssignIpv6Addresses", 
                "ec2:UnassignIpv6Addresses"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMigrationHubDMSAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:CreateProgressUpdateStream"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:AssociateCreatedArtifact", 
                "mgh:DescribeMigrationTask", 
                "mgh:DisassociateCreatedArtifact", 
                "mgh:ImportMigrationTask", 
                "mgh:ListCreatedArtifacts", 
                "mgh:NotifyMigrationTaskState", 
                "mgh:PutResourceAttributes", 
                "mgh:NotifyApplicationState", 
                "mgh:DescribeApplicationState", 
                "mgh:AssociateDiscoveredResource", 
                "mgh:DisassociateDiscoveredResource", 
                "mgh:ListDiscoveredResources"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:ListMigrationTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "kinesis:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGuardDutyReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "guardduty:GetDetector", 
                "guardduty:ListDetectors", 
                "guardduty:GetIPSet", 
                "guardduty:ListIPSets", 
                "guardduty:GetThreatIntelSet", 
                "guardduty:ListThreatIntelSets", 
                "guardduty:GetFindings", 
                "guardduty:GetFindingsStatistics", 
                "guardduty:ListFindings", 
                "guardduty:GetMembers", 
                "guardduty:ListMembers", 
                "guardduty:GetMasterAccount", 
                "guardduty:ListInvitations", 
                "guardduty:GetInvitationsCount"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowAllUsersToViewAndManageThisGroup"
        }
    ]
}
Policy Name: AmazonECSServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AttachNetworkInterface", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:Describe*", 
                "ec2:DetachNetworkInterface", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DeregisterTargets", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:RegisterTargets", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateHealthCheck", 
                "route53:DeleteHealthCheck", 
                "route53:Get*", 
                "route53:List*", 
                "route53:UpdateHealthCheck", 
                "servicediscovery:DeregisterInstance", 
                "servicediscovery:Get*", 
                "servicediscovery:List*", 
                "servicediscovery:RegisterInstance", 
                "servicediscovery:UpdateInstanceCustomHealthStatus"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:Describe*", 
                "machinelearning:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRekognitionFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rekognition:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: RDSCloudHsmAuthorizationRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudhsm:CreateLunaClient", 
                "cloudhsm:GetClientConfiguration", 
                "cloudhsm:DeleteLunaClient", 
                "cloudhsm:DescribeLunaClient", 
                "cloudhsm:ModifyLunaClient", 
                "cloudhsm:DescribeHapg", 
                "cloudhsm:ModifyHapg", 
                "cloudhsm:GetConfig"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AdministratorAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningRealTimePredictionOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:Predict"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncPushToCloudWatchLogs
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMigrationHubSMSAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:CreateProgressUpdateStream"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:AssociateCreatedArtifact", 
                "mgh:DescribeMigrationTask", 
                "mgh:DisassociateCreatedArtifact", 
                "mgh:ImportMigrationTask", 
                "mgh:ListCreatedArtifacts", 
                "mgh:NotifyMigrationTaskState", 
                "mgh:PutResourceAttributes", 
                "mgh:NotifyApplicationState", 
                "mgh:DescribeApplicationState", 
                "mgh:AssociateDiscoveredResource", 
                "mgh:DisassociateDiscoveredResource", 
                "mgh:ListDiscoveredResources"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:ListMigrationTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigUserAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "config:Get*", 
                "config:Describe*", 
                "config:Deliver*", 
                "config:List*", 
                "tag:GetResources", 
                "tag:GetTagKeys", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:LookupEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTConfigAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:AcceptCertificateTransfer", 
                "iot:AddThingToThingGroup", 
                "iot:AssociateTargetsWithJob", 
                "iot:AttachPolicy", 
                "iot:AttachPrincipalPolicy", 
                "iot:AttachThingPrincipal", 
                "iot:CancelCertificateTransfer", 
                "iot:CancelJob", 
                "iot:ClearDefaultAuthorizer", 
                "iot:CreateAuthorizer", 
                "iot:CreateCertificateFromCsr", 
                "iot:CreateJob", 
                "iot:CreateKeysAndCertificate", 
                "iot:CreateOTAUpdate", 
                "iot:CreatePolicy", 
                "iot:CreatePolicyVersion", 
                "iot:CreateRoleAlias", 
                "iot:CreateStream", 
                "iot:CreateThing", 
                "iot:CreateThingGroup", 
                "iot:CreateThingType", 
                "iot:CreateTopicRule", 
                "iot:DeleteAuthorizer", 
                "iot:DeleteCACertificate", 
                "iot:DeleteCertificate", 
                "iot:DeleteOTAUpdate", 
                "iot:DeletePolicy", 
                "iot:DeletePolicyVersion", 
                "iot:DeleteRegistrationCode", 
                "iot:DeleteRoleAlias", 
                "iot:DeleteStream", 
                "iot:DeleteThing", 
                "iot:DeleteThingGroup", 
                "iot:DeleteThingType", 
                "iot:DeleteTopicRule", 
                "iot:DeleteV2LoggingLevel", 
                "iot:DeprecateThingType", 
                "iot:DescribeAuthorizer", 
                "iot:DescribeCACertificate", 
                "iot:DescribeCertificate", 
                "iot:DescribeCertificateTag", 
                "iot:DescribeDefaultAuthorizer", 
                "iot:DescribeEndpoint", 
                "iot:DescribeEventConfigurations", 
                "iot:DescribeIndex", 
                "iot:DescribeJob", 
                "iot:DescribeJobExecution", 
                "iot:DescribeRoleAlias", 
                "iot:DescribeStream", 
                "iot:DescribeThing", 
                "iot:DescribeThingGroup", 
                "iot:DescribeThingRegistrationTask", 
                "iot:DescribeThingType", 
                "iot:DetachPolicy", 
                "iot:DetachPrincipalPolicy", 
                "iot:DetachThingPrincipal", 
                "iot:DisableTopicRule", 
                "iot:EnableTopicRule", 
                "iot:GetEffectivePolicies", 
                "iot:GetIndexingConfiguration", 
                "iot:GetJobDocument", 
                "iot:GetLoggingOptions", 
                "iot:GetOTAUpdate", 
                "iot:GetPolicy", 
                "iot:GetPolicyVersion", 
                "iot:GetRegistrationCode", 
                "iot:GetTopicRule", 
                "iot:GetV2LoggingOptions", 
                "iot:ListAttachedPolicies", 
                "iot:ListAuthorizers", 
                "iot:ListCACertificates", 
                "iot:ListCertificates", 
                "iot:ListCertificatesByCA", 
                "iot:ListIndices", 
                "iot:ListJobExecutionsForJob", 
                "iot:ListJobExecutionsForThing", 
                "iot:ListJobs", 
                "iot:ListOTAUpdates", 
                "iot:ListOutgoingCertificates", 
                "iot:ListPolicies", 
                "iot:ListPolicyPrincipals", 
                "iot:ListPolicyVersions", 
                "iot:ListPrincipalPolicies", 
                "iot:ListPrincipalThings", 
                "iot:ListRoleAliases", 
                "iot:ListStreams", 
                "iot:ListTargetsForPolicy", 
                "iot:ListThingGroups", 
                "iot:ListThingGroupsForThing", 
                "iot:ListThingPrincipals", 
                "iot:ListThingRegistrationTaskReports", 
                "iot:ListThingRegistrationTasks", 
                "iot:ListThings", 
                "iot:ListThingsInThingGroup", 
                "iot:ListThingTypes", 
                "iot:ListTopicRules", 
                "iot:ListV2LoggingLevels", 
                "iot:RegisterCACertificate", 
                "iot:RegisterCertificate", 
                "iot:RegisterThing", 
                "iot:RejectCertificateTransfer", 
                "iot:RemoveThingFromThingGroup", 
                "iot:ReplaceTopicRule", 
                "iot:SearchIndex", 
                "iot:SetDefaultAuthorizer", 
                "iot:SetDefaultPolicyVersion", 
                "iot:SetLoggingOptions", 
                "iot:SetV2LoggingLevel", 
                "iot:SetV2LoggingOptions", 
                "iot:StartThingRegistrationTask", 
                "iot:StopThingRegistrationTask", 
                "iot:TestAuthorization", 
                "iot:TestInvokeAuthorizer", 
                "iot:TransferCertificate", 
                "iot:UpdateAuthorizer", 
                "iot:UpdateCACertificate", 
                "iot:UpdateCertificate", 
                "iot:UpdateCertificateTag", 
                "iot:UpdateEventConfigurations", 
                "iot:UpdateIndexingConfiguration", 
                "iot:UpdateRoleAlias", 
                "iot:UpdateStream", 
                "iot:UpdateThing", 
                "iot:UpdateThingGroup", 
                "iot:UpdateThingGroupsForThing"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: SecurityAudit
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:DescribeCertificate", 
                "acm:ListCertificates", 
                "autoscaling:Describe*", 
                "batch:DescribeComputeEnvironments", 
                "batch:DescribeJobDefinitions", 
                "clouddirectory:ListDirectories", 
                "cloudformation:DescribeStack*", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStack*", 
                "cloudformation:GetStackPolicy", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "cloudhsm:ListHapgs", 
                "cloudhsm:ListHsms", 
                "cloudhsm:ListLunaClients", 
                "cloudsearch:DescribeDomains", 
                "cloudsearch:DescribeServiceAccessPolicies", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:ListTags", 
                "cloudwatch:Describe*", 
                "codebuild:ListProjects", 
                "codecommit:BatchGetRepositories", 
                "codecommit:GetBranch", 
                "codecommit:GetObjectIdentifier", 
                "codecommit:GetRepository", 
                "codecommit:List*", 
                "codedeploy:Batch*", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codepipeline:ListPipelines", 
                "cognito-identity:ListIdentityPools", 
                "cognito-idp:ListUserPools", 
                "config:Deliver*", 
                "config:Describe*", 
                "config:Get*", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:EvaluateExpression", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:QueryObjects", 
                "datapipeline:ValidatePipelineDefinition", 
                "directconnect:Describe*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListStreams", 
                "dynamodb:ListTables", 
                "ec2:Describe*", 
                "ecr:DescribeRepositories", 
                "ecr:GetRepositoryPolicy", 
                "ecs:Describe*", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:Describe*", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticloadbalancing:Describe*", 
                "elasticmapreduce:DescribeJobFlows", 
                "elasticmapreduce:ListClusters", 
                "elasticmapreduce:ListInstances", 
                "es:Describe*", 
                "es:ListDomainNames", 
                "events:DescribeEventBus", 
                "events:ListRules", 
                "firehose:Describe*", 
                "firehose:List*", 
                "gamelift:ListBuilds", 
                "gamelift:ListFleets", 
                "glacier:DescribeVault", 
                "glacier:GetVaultAccessPolicy", 
                "glacier:ListVaults", 
                "iam:GenerateCredentialReport", 
                "iam:Get*", 
                "iam:List*", 
                "iot:ListThings", 
                "kinesis:ListStreams", 
                "kinesisanalytics:ListApplications", 
                "kms:Describe*", 
                "kms:Get*", 
                "kms:List*", 
                "lambda:GetAccountSettings", 
                "lambda:GetPolicy", 
                "lambda:ListFunctions", 
                "logs:DescribeDestinations", 
                "logs:DescribeLogGroups", 
                "logs:DescribeMetricFilters", 
                "logs:DescribeResourcePolicies", 
                "machinelearning:DescribeMLModels", 
                "mediastore:GetContainerPolicy", 
                "mediastore:ListContainers", 
                "opsworks-cm:DescribeServers", 
                "rds:Describe*", 
                "rds:DownloadDBLogFilePortion", 
                "rds:ListTagsForResource", 
                "redshift:Describe*", 
                "route53:Get*", 
                "route53:List*", 
                "route53domains:GetDomainDetail", 
                "route53domains:GetOperationDetail", 
                "route53domains:ListDomains", 
                "route53domains:ListOperations", 
                "route53domains:ListTagsForDomain", 
                "s3:GetAccelerateConfiguration", 
                "s3:GetAnalyticsConfiguration", 
                "s3:GetBucket*", 
                "s3:GetEncryptionConfiguration", 
                "s3:GetInventoryConfiguration", 
                "s3:GetLifecycleConfiguration", 
                "s3:GetMetricsConfiguration", 
                "s3:GetObjectAcl", 
                "s3:GetObjectVersionAcl", 
                "s3:GetReplicationConfiguration", 
                "s3:ListAllMyBuckets", 
                "sdb:DomainMetadata", 
                "sdb:ListDomains", 
                "serverlessrepo:GetApplicationPolicy", 
                "serverlessrepo:ListApplications", 
                "ses:GetIdentityDkimAttributes", 
                "ses:GetIdentityVerificationAttributes", 
                "ses:ListIdentities", 
                "snowball:ListClusters", 
                "snowball:ListJobs", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sqs:GetQueueAttributes", 
                "sqs:ListQueues", 
                "ssm:DescribeDocumentPermission", 
                "ssm:ListDocuments", 
                "states:ListStateMachines", 
                "storagegateway:DescribeBandwidthRateLimit", 
                "storagegateway:DescribeCache", 
                "storagegateway:DescribeCachediSCSIVolumes", 
                "storagegateway:DescribeGatewayInformation", 
                "storagegateway:DescribeMaintenanceStartTime", 
                "storagegateway:DescribeNFSFileShares", 
                "storagegateway:DescribeSnapshotSchedule", 
                "storagegateway:DescribeStorediSCSIVolumes", 
                "storagegateway:DescribeTapeArchives", 
                "storagegateway:DescribeTapeRecoveryPoints", 
                "storagegateway:DescribeTapes", 
                "storagegateway:DescribeUploadBuffer", 
                "storagegateway:DescribeVTLDevices", 
                "storagegateway:DescribeWorkingStorage", 
                "storagegateway:List*", 
                "tag:GetResources", 
                "tag:GetTagKeys", 
                "trustedadvisor:Describe*", 
                "waf:ListWebACLs", 
                "waf-regional:ListWebACLs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSResourceGroupsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "resource-groups:Describe*", 
                "resource-groups:Get*", 
                "resource-groups:List*", 
                "resource-groups:Search*", 
                "tag:Get*", 
                "cloudformation:DescribeStacks", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeVolumes", 
                "ec2:DescribeVpcs", 
                "elasticache:DescribeCacheClusters", 
                "elasticache:DescribeSnapshots", 
                "elasticache:ListTagsForResource", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticmapreduce:DescribeCluster", 
                "elasticmapreduce:ListClusters", 
                "glacier:ListVaults", 
                "glacier:DescribeVault", 
                "glacier:ListTagsForVault", 
                "kinesis:ListStreams", 
                "kinesis:DescribeStream", 
                "kinesis:ListTagsForStream", 
                "opsworks:DescribeStacks", 
                "opsworks:ListTags", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSnapshots", 
                "rds:ListTagsForResource", 
                "redshift:DescribeClusters", 
                "redshift:DescribeTags", 
                "route53domains:ListDomains", 
                "route53:ListHealthChecks", 
                "route53:GetHealthCheck", 
                "route53:ListHostedZones", 
                "route53:GetHostedZone", 
                "route53:ListTagsForResource", 
                "storagegateway:ListGateways", 
                "storagegateway:DescribeGatewayInformation", 
                "storagegateway:ListTagsForResource", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketTagging", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTags", 
                "ssm:ListDocuments"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeStarFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codestar:*", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "cloud9:DescribeEnvironment*", 
                "cloud9:ValidateEnvironmentName"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CodeStarEC2"
        }, 
        {
            "Action": [
                "cloudformation:DescribeStack*", 
                "cloudformation:GetTemplateSummary"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awscodestar-*"
            ], 
            "Effect": "Allow", 
            "Sid": "CodeStarCF"
        }
    ]
}
Policy Name: AmazonSSMServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:CancelCommand", 
                "ssm:GetCommandInvocation", 
                "ssm:ListCommandInvocations", 
                "ssm:ListCommands", 
                "ssm:SendCommand"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "resource-groups:ListGroups", 
                "resource-groups:ListGroupResources"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "tag:GetResources"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDataPipeline_FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:List*", 
                "dynamodb:DescribeTable", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "sns:ListTopics", 
                "sns:Subscribe", 
                "iam:ListRoles", 
                "iam:GetRolePolicy", 
                "iam:GetInstanceProfile", 
                "iam:ListInstanceProfiles", 
                "datapipeline:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultRole"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDynamoDBReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "cloudwatch:DescribeAlarmHistory", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:QueryObjects", 
                "dynamodb:BatchGetItem", 
                "dynamodb:DescribeTable", 
                "dynamodb:GetItem", 
                "dynamodb:ListTables", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "dynamodb:DescribeReservedCapacity", 
                "dynamodb:DescribeReservedCapacityOfferings", 
                "dynamodb:ListTagsOfResource", 
                "dynamodb:DescribeTimeToLive", 
                "dynamodb:DescribeLimits", 
                "dynamodb:ListGlobalTables", 
                "dynamodb:DescribeGlobalTable", 
                "dynamodb:DescribeBackup", 
                "dynamodb:ListBackups", 
                "dynamodb:DescribeContinuousBackups", 
                "dax:Describe*", 
                "dax:List*", 
                "dax:GetItem", 
                "dax:BatchGetItem", 
                "dax:Query", 
                "dax:Scan", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "iam:GetRole", 
                "iam:ListRoles", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "lambda:ListFunctions", 
                "lambda:ListEventSourceMappings", 
                "lambda:GetFunctionConfiguration"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingConsoleFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateKeyPair", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeLaunchTemplateVersions", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:ImportKeyPair"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:ListMetrics", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:ListSubscriptions", 
                "sns:ListTopics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:ListRoles", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "autoscaling.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSElementalMediaPackageFullAccess
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": "mediapackage:*", 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AmazonKinesisVideoStreamsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "kinesisvideo:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSNSReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:GetTopicAttributes", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSEC2SpotServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonElasticMapReduceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackEvents", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateRoute", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DeleteRoute", 
                "ec2:DeleteTags", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSpotPriceHistory", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeNetworkAcls", 
                "ec2:CreateVpcEndpoint", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RunInstances", 
                "ec2:TerminateInstances", 
                "elasticmapreduce:*", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "kms:List*", 
                "s3:*", 
                "sdb:*", 
                "support:CreateCase", 
                "support:DescribeServices", 
                "support:DescribeSeverityLevels"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "elasticmapreduce.amazonaws.com", 
                        "elasticmapreduce.amazonaws.com.cn"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonS3ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:Get*", 
                "s3:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticbeanstalk:*", 
                "ec2:*", 
                "ecs:*", 
                "ecr:*", 
                "elasticloadbalancing:*", 
                "autoscaling:*", 
                "cloudwatch:*", 
                "s3:*", 
                "sns:*", 
                "cloudformation:*", 
                "dynamodb:*", 
                "rds:*", 
                "sqs:*", 
                "logs:*", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:PassRole", 
                "iam:ListRolePolicies", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:ListServerCertificates", 
                "acm:DescribeCertificate", 
                "acm:ListCertificates", 
                "codebuild:CreateProject", 
                "codebuild:DeleteProject", 
                "codebuild:BatchGetBuilds", 
                "codebuild:StartBuild"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:AddRoleToInstanceProfile", 
                "iam:CreateInstanceProfile", 
                "iam:CreateRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-elasticbeanstalk*", 
                "arn:aws:iam::*:instance-profile/aws-elasticbeanstalk*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "autoscaling.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "elasticbeanstalk.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:AttachRolePolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PolicyArn": [
                        "arn:aws:iam::aws:policy/AWSElasticBeanstalk*", 
                        "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalk*"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonWorkSpacesAdmin
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "workspaces:CreateWorkspaces", 
                "workspaces:DescribeWorkspaces", 
                "workspaces:RebootWorkspaces", 
                "workspaces:RebuildWorkspaces", 
                "workspaces:TerminateWorkspaces", 
                "workspaces:DescribeWorkspaceDirectories", 
                "workspaces:DescribeWorkspaceBundles", 
                "workspaces:ModifyWorkspaceProperties", 
                "workspaces:StopWorkspaces", 
                "workspaces:StartWorkspaces", 
                "workspaces:DescribeWorkspacesConnectionStatus", 
                "workspaces:CreateTags", 
                "workspaces:DeleteTags", 
                "workspaces:DescribeTags", 
                "kms:ListKeys", 
                "kms:ListAliases", 
                "kms:DescribeKey"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:CompleteLifecycleAction", 
                "autoscaling:DeleteLifecycleHook", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLifecycleHooks", 
                "autoscaling:PutLifecycleHook", 
                "autoscaling:RecordLifecycleActionHeartbeat", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:UpdateAutoScalingGroup", 
                "autoscaling:EnableMetricsCollection", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribePolicies", 
                "autoscaling:DescribeScheduledActions", 
                "autoscaling:DescribeNotificationConfigurations", 
                "autoscaling:DescribeLifecycleHooks", 
                "autoscaling:SuspendProcesses", 
                "autoscaling:ResumeProcesses", 
                "autoscaling:AttachLoadBalancers", 
                "autoscaling:PutScalingPolicy", 
                "autoscaling:PutScheduledUpdateGroupAction", 
                "autoscaling:PutNotificationConfiguration", 
                "autoscaling:PutLifecycleHook", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:DeleteAutoScalingGroup", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:TerminateInstances", 
                "tag:GetTags", 
                "tag:GetResources", 
                "sns:Publish", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticloadbalancing:RegisterTargets", 
                "elasticloadbalancing:DeregisterTargets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSESFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ses:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchLogsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:Describe*", 
                "logs:Get*", 
                "logs:List*", 
                "logs:TestMetricFilter", 
                "logs:FilterLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisFirehoseReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "firehose:Describe*", 
                "firehose:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksRegisterCLI
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "opsworks:AssignInstance", 
                "opsworks:CreateStack", 
                "opsworks:CreateLayer", 
                "opsworks:DeregisterInstance", 
                "opsworks:DescribeInstances", 
                "opsworks:DescribeStackProvisioningParameters", 
                "opsworks:DescribeStacks", 
                "opsworks:UnassignInstance"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:AddUserToGroup", 
                "iam:CreateAccessKey", 
                "iam:CreateGroup", 
                "iam:CreateUser", 
                "iam:ListInstanceProfiles", 
                "iam:PassRole", 
                "iam:PutUserPolicy"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDynamoDBFullAccesswithDataPipeline
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarmHistory", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics", 
                "cloudwatch:PutMetricAlarm", 
                "dynamodb:*", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sns:SetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "DDBConsole"
        }, 
        {
            "Action": [
                "lambda:*", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "DDBConsoleTriggers"
        }, 
        {
            "Action": [
                "datapipeline:*", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "DDBConsoleImportExport"
        }, 
        {
            "Action": [
                "iam:GetRolePolicy", 
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "IAMEDPRoles"
        }, 
        {
            "Action": [
                "ec2:CreateTags", 
                "ec2:DescribeInstances", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "elasticmapreduce:*", 
                "datapipeline:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "EMR"
        }, 
        {
            "Action": [
                "s3:DeleteObject", 
                "s3:Get*", 
                "s3:List*", 
                "s3:Put*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "S3"
        }
    ]
}
Policy Name: AmazonEC2RoleforDataPipelineRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "datapipeline:*", 
                "dynamodb:*", 
                "ec2:Describe*", 
                "elasticmapreduce:AddJobFlowSteps", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:ListInstance*", 
                "elasticmapreduce:ModifyInstanceGroups", 
                "rds:Describe*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "s3:*", 
                "sdb:*", 
                "sns:*", 
                "sqs:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchLogsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElementalMediaPackageReadOnly
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "mediapackage:List*", 
            "mediapackage:Describe*"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AWSElasticBeanstalkMulticontainerDocker
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:Poll", 
                "ecs:StartTask", 
                "ecs:StopTask", 
                "ecs:DiscoverPollEndpoint", 
                "ecs:StartTelemetrySession", 
                "ecs:RegisterContainerInstance", 
                "ecs:DeregisterContainerInstance", 
                "ecs:DescribeContainerInstances", 
                "ecs:Submit*", 
                "ecs:DescribeTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ECSAccess"
        }
    ]
}
Policy Name: AWSMigrationHubFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:*", 
                "discovery:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elastictranscoder:*", 
                "cloudfront:*", 
                "s3:List*", 
                "s3:Put*", 
                "s3:Get*", 
                "s3:*MultipartUpload*", 
                "iam:CreateRole", 
                "iam:GetRolePolicy", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:List*", 
                "sns:CreateTopic", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: IAMUserChangePassword
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:ChangePassword"
            ], 
            "Resource": [
                "arn:aws:iam::*:user/${aws:username}"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetAccountPasswordPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAPIGatewayAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "apigateway:*"
            ], 
            "Resource": "arn:aws:apigateway:*::/*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonVPCCrossAccountNetworkInterfaceOperations
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeRouteTables", 
                "ec2:CreateRoute", 
                "ec2:DeleteRoute", 
                "ec2:ReplaceRoute"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeNetworkInterfaces", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AssignPrivateIpAddresses", 
                "ec2:UnassignPrivateIpAddresses"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ServiceCatalogEndUserAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "catalog-user:*", 
                "s3:GetObject", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:SearchProducts"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:DescribeProvisionedProduct", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ScanProvisionedProducts"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "servicecatalog:userLevel": "self"
                }
            }
        }
    ]
}
Policy Name: AmazonMacieSetupRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetEventSelectors", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:ListTags", 
                "cloudtrail:LookupEvents", 
                "iam:ListAccountAliases", 
                "s3:GetBucket*", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudtrail:CreateTrail", 
                "cloudtrail:StartLogging", 
                "cloudtrail:StopLogging", 
                "cloudtrail:UpdateTrail", 
                "cloudtrail:DeleteTrail", 
                "cloudtrail:PutEventSelectors"
            ], 
            "Resource": "arn:aws:cloudtrail:*:*:trail/AWSMacieTrail-DO-NOT-EDIT", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteBucketPolicy", 
                "s3:DeleteBucketWebsite", 
                "s3:DeleteObject", 
                "s3:DeleteObjectTagging", 
                "s3:DeleteObjectVersion", 
                "s3:DeleteObjectVersionTagging", 
                "s3:DeleteReplicationConfiguration", 
                "s3:PutBucketPolicy"
            ], 
            "Resource": [
                "arn:aws:s3:::awsmacie-*", 
                "arn:aws:s3:::awsmacietrail-*", 
                "arn:aws:s3:::*-awsmacietrail-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonPollyReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "polly:DescribeVoices", 
                "polly:GetLexicon", 
                "polly:ListLexicons", 
                "polly:SynthesizeSpeech"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsWriteOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "mobileanalytics:PutEvents", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2SpotFleetTaggingRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:CreateTags"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterTargets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DataScientist
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:*", 
                "cloudwatch:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackEvents", 
                "datapipeline:Describe*", 
                "datapipeline:ListPipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:QueryObjects", 
                "dynamodb:*", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CancelSpotFleetRequests", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:Describe*", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:ModifySpotFleetRequest", 
                "ec2:RequestSpotInstances", 
                "ec2:RequestSpotFleet", 
                "elasticfilesystem:*", 
                "elasticmapreduce:*", 
                "es:*", 
                "firehose:*", 
                "iam:GetInstanceProfile", 
                "iam:GetRole", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:ListRoles", 
                "kinesis:*", 
                "kms:List*", 
                "lambda:Create*", 
                "lambda:Delete*", 
                "lambda:Get*", 
                "lambda:InvokeFunction", 
                "lambda:PublishVersion", 
                "lambda:Update*", 
                "lambda:List*", 
                "machinelearning:*", 
                "sdb:*", 
                "rds:*", 
                "sns:ListSubscriptions", 
                "sns:ListTopics", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents", 
                "redshift:*", 
                "s3:CreateBucket", 
                "sns:CreateTopic", 
                "sns:Get*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:Abort*", 
                "s3:DeleteObject", 
                "s3:Get*", 
                "s3:List*", 
                "s3:PutAccelerateConfiguration", 
                "s3:PutBucketLogging", 
                "s3:PutBucketNotification", 
                "s3:PutBucketTagging", 
                "s3:PutObject", 
                "s3:Replicate*", 
                "s3:RestoreObject"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:RunInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/DataPipelineDefaultRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole", 
                "arn:aws:iam::*:role/EMR_EC2_DefaultRole", 
                "arn:aws:iam::*:role/EMR_DefaultRole", 
                "arn:aws:iam::*:role/kinesis-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceMeteringFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:MeterUsage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksCMServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteObject", 
                "s3:DeleteBucket", 
                "s3:GetObject", 
                "s3:HeadBucket", 
                "s3:ListBucket", 
                "s3:ListObjects", 
                "s3:PutBucketPolicy"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:DescribeInstanceInformation", 
                "ssm:GetCommandInvocation", 
                "ssm:ListCommandInvocations", 
                "ssm:ListCommands"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:SendCommand"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ssm:resourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
                }
            }
        }, 
        {
            "Action": [
                "ssm:SendCommand"
            ], 
            "Resource": [
                "arn:aws:ssm:*::document/*", 
                "arn:aws:s3:::aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AllocateAddress", 
                "ec2:AssociateAddress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateImage", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeregisterImage", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DisassociateAddress", 
                "ec2:ReleaseAddress", 
                "ec2:RunInstances", 
                "ec2:StopInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
                }
            }
        }, 
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:UpdateStack"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-opsworks-cm-*", 
                "arn:aws:iam::*:role/service-role/aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConnector
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "iam:GetUser", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteObject", 
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:PutObject", 
                "s3:PutObjectAcl", 
                "s3:AbortMultipartUpload", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts"
            ], 
            "Resource": "arn:aws:s3:::import-to-ec2-*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CancelConversionTask", 
                "ec2:CancelExportTask", 
                "ec2:CreateImage", 
                "ec2:CreateInstanceExportTask", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:DeleteTags", 
                "ec2:DeleteVolume", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeRegions", 
                "ec2:DescribeTags", 
                "ec2:DetachVolume", 
                "ec2:ImportInstance", 
                "ec2:ImportVolume", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:ImportImage", 
                "ec2:DescribeImportImageTasks", 
                "ec2:DeregisterImage", 
                "ec2:DescribeSnapshots", 
                "ec2:DeleteSnapshot", 
                "ec2:CancelImportTask", 
                "ec2:ImportSnapshot", 
                "ec2:DescribeImportSnapshotTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "SNS:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSBatchFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "batch:*", 
                "cloudwatch:GetMetricStatistics", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeKeyPairs", 
                "ecs:DescribeClusters", 
                "ecs:Describe*", 
                "ecs:List*", 
                "logs:Describe*", 
                "logs:Get*", 
                "logs:TestMetricFilter", 
                "logs:FilterLogEvents", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/AWSBatchServiceRole", 
                "arn:aws:iam::*:role/service-role/AWSBatchServiceRole", 
                "arn:aws:iam::*:role/ecsInstanceRole", 
                "arn:aws:iam::*:role/iaws-ec2-spot-fleet-role", 
                "arn:aws:iam::*:role/aws-ec2-spot-fleet-role", 
                "arn:aws:iam::*:role/AWSBatchJobRole*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonECS_FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget", 
                "autoscaling:UpdateAutoScalingGroup", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:CreateLaunchConfiguration", 
                "autoscaling:DeleteAutoScalingGroup", 
                "autoscaling:DeleteLaunchConfiguration", 
                "autoscaling:Describe*", 
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStack*", 
                "cloudformation:UpdateStack", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm", 
                "ec2:AssociateRouteTable", 
                "ec2:AttachInternetGateway", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CancelSpotFleetRequests", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateVpc", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteVpc", 
                "ec2:Describe*", 
                "ec2:DetachInternetGateway", 
                "ec2:DisassociateRouteTable", 
                "ec2:ModifySubnetAttribute", 
                "ec2:ModifyVpcAttribute", 
                "ec2:RequestSpotFleet", 
                "elasticloadbalancing:CreateListener", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:CreateRule", 
                "elasticloadbalancing:CreateTargetGroup", 
                "elasticloadbalancing:DeleteListener", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:DeleteRule", 
                "elasticloadbalancing:DeleteTargetGroup", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeRules", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "ecs:*", 
                "events:DescribeRule", 
                "events:DeleteRule", 
                "events:ListRuleNamesByTarget", 
                "events:ListTargetsByRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "logs:CreateLogGroup", 
                "logs:DescribeLogGroups", 
                "logs:FilterLogEvents", 
                "route53:GetHostedZone", 
                "route53:ListHostedZonesByName", 
                "route53:CreateHostedZone", 
                "route53:DeleteHostedZone", 
                "route53:GetHealthCheck", 
                "servicediscovery:CreatePrivateDnsNamespace", 
                "servicediscovery:CreateService", 
                "servicediscovery:GetNamespace", 
                "servicediscovery:GetOperation", 
                "servicediscovery:GetService", 
                "servicediscovery:ListNamespaces", 
                "servicediscovery:ListServices", 
                "servicediscovery:UpdateService"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:GetParametersByPath", 
                "ssm:GetParameters", 
                "ssm:GetParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/aws/service/ecs*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-name": "EC2ContainerService-*"
                }
            }
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "ecs-tasks.amazonaws.com"
                }
            }
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/ecsInstanceRole*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/ecsAutoscaleRole*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "application-autoscaling.amazonaws.com", 
                        "application-autoscaling.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "ecs.amazonaws.com", 
                        "spot.amazonaws.com", 
                        "spotfleet.amazonaws.com", 
                        "ecs.application-autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: ServiceCatalogAdminReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "catalog-admin:DescribeConstraints", 
                "catalog-admin:DescribeListingForProduct", 
                "catalog-admin:DescribeListings", 
                "catalog-admin:DescribePortfolios", 
                "catalog-admin:DescribeProductVersions", 
                "catalog-admin:GetPortfolioCount", 
                "catalog-admin:GetPortfolios", 
                "catalog-admin:GetProductCounts", 
                "catalog-admin:ListAllPortfolioConstraints", 
                "catalog-admin:ListPortfolioConstraints", 
                "catalog-admin:ListPortfolios", 
                "catalog-admin:ListPrincipalConstraints", 
                "catalog-admin:ListProductConstraints", 
                "catalog-admin:ListResourceUsers", 
                "catalog-admin:ListTagsForResource", 
                "catalog-admin:SearchListings", 
                "catalog-user:*", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplateSummary", 
                "iam:GetGroup", 
                "iam:GetRole", 
                "iam:GetUser", 
                "iam:ListGroups", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "s3:GetObject", 
                "servicecatalog:DescribeTagOption", 
                "servicecatalog:GetTagOptionMigrationStatus", 
                "servicecatalog:ListResourcesForTagOption", 
                "servicecatalog:ListTagOptions", 
                "servicecatalog:AccountLevelDescribeRecord", 
                "servicecatalog:AccountLevelListRecordHistory", 
                "servicecatalog:AccountLevelScanProvisionedProducts", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:DescribeProvisionedProduct", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:ScanProvisionedProducts", 
                "servicecatalog:SearchProducts", 
                "servicecatalog:DescribeConstraint", 
                "servicecatalog:DescribeProductAsAdmin", 
                "servicecatalog:DescribePortfolio", 
                "servicecatalog:DescribeProvisioningArtifact", 
                "servicecatalog:ListAcceptedPortfolioShares", 
                "servicecatalog:ListConstraintsForPortfolio", 
                "servicecatalog:ListPortfolioAccess", 
                "servicecatalog:ListPortfolios", 
                "servicecatalog:ListPortfoliosForProduct", 
                "servicecatalog:ListPrincipalsForPortfolio", 
                "servicecatalog:ListProvisioningArtifacts", 
                "servicecatalog:SearchProductsAsAdmin"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingRDSClusterPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:AddTagsToResource", 
                "rds:CreateDBInstance", 
                "rds:DeleteDBInstance", 
                "rds:DescribeDBClusters", 
                "rds:DescribeDBInstances", 
                "rds:ModifyDBCluster", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSServiceRoleForEC2ScheduledInstances
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringEquals": {
                    "aws:TagKeys": [
                        "aws:ec2sri:scheduledInstanceId"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:ec2sri:scheduledInstanceId": "*"
                }
            }
        }
    ]
}
Policy Name: AWSCodeDeployRoleForLambda
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "lambda:UpdateAlias", 
                "lambda:GetAlias", 
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectVersion"
            ], 
            "Resource": "arn:aws:s3:::*/CodeDeploy/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectVersion"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "s3:ExistingObjectTag/UseWithCodeDeploy": "true"
                }
            }
        }, 
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": "arn:aws:lambda:*:*:function:CodeDeployHook_*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData", 
                "ds:CreateComputer", 
                "ds:DescribeDirectories", 
                "ec2:DescribeInstanceStatus", 
                "logs:*", 
                "ssm:*", 
                "ec2messages:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeCommitReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codecommit:BatchGet*", 
                "codecommit:Get*", 
                "codecommit:Describe*", 
                "codecommit:List*", 
                "codecommit:GitPull"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "events:DescribeRule", 
                "events:ListTargetsByRule"
            ], 
            "Resource": "arn:aws:events:*:*:rule/codecommit*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsCodeCommitRulesReadOnlyAccess"
        }, 
        {
            "Action": [
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSSubscriptionAccess"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "LambdaReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListAccessKeys", 
                "iam:ListSSHPublicKeys", 
                "iam:ListServiceSpecificCredentials", 
                "iam:ListAccessKeys", 
                "iam:GetSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyConsoleAccess"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "autoscaling:UpdateAutoScalingGroup", 
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStack*", 
                "cloudformation:UpdateStack", 
                "cloudwatch:GetMetricStatistics", 
                "ec2:Describe*", 
                "elasticloadbalancing:*", 
                "ecs:*", 
                "events:DescribeRule", 
                "events:DeleteRule", 
                "events:ListRuleNamesByTarget", 
                "events:ListTargetsByRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonFreeRTOSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "freertos:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCognitoReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-identity:Describe*", 
                "cognito-identity:Get*", 
                "cognito-identity:List*", 
                "cognito-idp:Describe*", 
                "cognito-idp:AdminGetUser", 
                "cognito-idp:List*", 
                "cognito-sync:Describe*", 
                "cognito-sync:Get*", 
                "cognito-sync:List*", 
                "iam:ListOpenIdConnectProviders", 
                "iam:ListRoles", 
                "sns:ListPlatformApplications"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDMSCloudWatchLogsRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:DescribeLogGroups"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDescribeOnAllLogGroups"
        }, 
        {
            "Action": [
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDescribeOfAllLogStreamsOnDmsTasksLogGroup"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCreationOfDmsTasksLogGroups"
        }, 
        {
            "Action": [
                "logs:CreateLogStream"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCreationOfDmsTaskLogStream"
        }, 
        {
            "Action": [
                "logs:PutLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowUploadOfLogEventsToDmsTaskLogStream"
        }
    ]
}
Policy Name: AWSApplicationDiscoveryServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:*", 
                "discovery:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53AutoNamingReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "servicediscovery:Get*", 
                "servicediscovery:List*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonVPCFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AcceptVpcPeeringConnection", 
                "ec2:AcceptVpcEndpointConnections", 
                "ec2:AllocateAddress", 
                "ec2:AssignIpv6Addresses", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssociateAddress", 
                "ec2:AssociateDhcpOptions", 
                "ec2:AssociateRouteTable", 
                "ec2:AssociateSubnetCidrBlock", 
                "ec2:AssociateVpcCidrBlock", 
                "ec2:AttachClassicLinkVpc", 
                "ec2:AttachInternetGateway", 
                "ec2:AttachNetworkInterface", 
                "ec2:AttachVpnGateway", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateCustomerGateway", 
                "ec2:CreateDefaultSubnet", 
                "ec2:CreateDefaultVpc", 
                "ec2:CreateDhcpOptions", 
                "ec2:CreateEgressOnlyInternetGateway", 
                "ec2:CreateFlowLogs", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateNatGateway", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAclEntry", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:CreateVpcEndpoint", 
                "ec2:CreateVpcEndpointConnectionNotification", 
                "ec2:CreateVpcEndpointServiceConfiguration", 
                "ec2:CreateVpcPeeringConnection", 
                "ec2:CreateVpnConnection", 
                "ec2:CreateVpnConnectionRoute", 
                "ec2:CreateVpnGateway", 
                "ec2:DeleteCustomerGateway", 
                "ec2:DeleteDhcpOptions", 
                "ec2:DeleteEgressOnlyInternetGateway", 
                "ec2:DeleteFlowLogs", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteNatGateway", 
                "ec2:DeleteNetworkAcl", 
                "ec2:DeleteNetworkAclEntry", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteTags", 
                "ec2:DeleteVpc", 
                "ec2:DeleteVpcEndpoints", 
                "ec2:DeleteVpcEndpointConnectionNotifications", 
                "ec2:DeleteVpcEndpointServiceConfigurations", 
                "ec2:DeleteVpcPeeringConnection", 
                "ec2:DeleteVpnConnection", 
                "ec2:DeleteVpnConnectionRoute", 
                "ec2:DeleteVpnGateway", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeEgressOnlyInternetGateways", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroupReferences", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeStaleSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeVpcClassicLinkDnsSupport", 
                "ec2:DescribeVpcEndpointConnectionNotifications", 
                "ec2:DescribeVpcEndpointConnections", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointServiceConfigurations", 
                "ec2:DescribeVpcEndpointServicePermissions", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:DetachInternetGateway", 
                "ec2:DetachNetworkInterface", 
                "ec2:DetachVpnGateway", 
                "ec2:DisableVgwRoutePropagation", 
                "ec2:DisableVpcClassicLink", 
                "ec2:DisableVpcClassicLinkDnsSupport", 
                "ec2:DisassociateAddress", 
                "ec2:DisassociateRouteTable", 
                "ec2:DisassociateSubnetCidrBlock", 
                "ec2:DisassociateVpcCidrBlock", 
                "ec2:EnableVgwRoutePropagation", 
                "ec2:EnableVpcClassicLink", 
                "ec2:EnableVpcClassicLinkDnsSupport", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:ModifySubnetAttribute", 
                "ec2:ModifyVpcAttribute", 
                "ec2:ModifyVpcEndpoint", 
                "ec2:ModifyVpcEndpointConnectionNotification", 
                "ec2:ModifyVpcEndpointServiceConfiguration", 
                "ec2:ModifyVpcEndpointServicePermissions", 
                "ec2:ModifyVpcPeeringConnectionOptions", 
                "ec2:ModifyVpcTenancy", 
                "ec2:MoveAddressToVpc", 
                "ec2:RejectVpcEndpointConnections", 
                "ec2:RejectVpcPeeringConnection", 
                "ec2:ReleaseAddress", 
                "ec2:ReplaceNetworkAclAssociation", 
                "ec2:ReplaceNetworkAclEntry", 
                "ec2:ReplaceRoute", 
                "ec2:ReplaceRouteTableAssociation", 
                "ec2:ResetNetworkInterfaceAttribute", 
                "ec2:RestoreAddressToClassic", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:UnassignIpv6Addresses", 
                "ec2:UnassignPrivateIpAddresses", 
                "ec2:UpdateSecurityGroupRuleDescriptionsEgress", 
                "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appsync:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "appsync.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AWSEC2FleetServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:RunInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*", 
                "arn:aws:ec2:*:*:spot-instances-request/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:ec2:fleet-id": "*"
                }
            }
        }
    ]
}
Policy Name: AmazonRoute53AutoNamingFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:GetHostedZone", 
                "route53:ListHostedZonesByName", 
                "route53:CreateHostedZone", 
                "route53:DeleteHostedZone", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateHealthCheck", 
                "route53:GetHealthCheck", 
                "route53:DeleteHealthCheck", 
                "route53:UpdateHealthCheck", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeRegions", 
                "servicediscovery:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSImportExportFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "importexport:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DynamoDBReplicationServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:GetItem", 
                "dynamodb:PutItem", 
                "dynamodb:UpdateItem", 
                "dynamodb:DeleteItem", 
                "dynamodb:DescribeTable", 
                "dynamodb:Scan", 
                "dynamodb:DescribeStream", 
                "dynamodb:GetRecords", 
                "dynamodb:GetShardIterator", 
                "dynamodb:DescribeTimeToLive", 
                "application-autoscaling:DescribeScalableTargets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mechanicalturk:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerRegistryPowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:GetRepositoryPolicy", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecr:DescribeImages", 
                "ecr:BatchGetImage", 
                "ecr:InitiateLayerUpload", 
                "ecr:UploadLayerPart", 
                "ecr:CompleteLayerUpload", 
                "ecr:PutImage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningCreateOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:Add*", 
                "machinelearning:Create*", 
                "machinelearning:Delete*", 
                "machinelearning:Describe*", 
                "machinelearning:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisVideoStreamsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesisvideo:Describe*", 
                "kinesisvideo:Get*", 
                "kinesisvideo:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudTrailReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetBucketLocation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:LookupEvents", 
                "cloudtrail:ListTags", 
                "cloudtrail:ListPublicKeys", 
                "cloudtrail:GetEventSelectors", 
                "s3:ListAllMyBuckets", 
                "kms:ListAliases", 
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaExecute
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:*"
            ], 
            "Resource": "arn:aws:logs:*:*:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject"
            ], 
            "Resource": "arn:aws:s3:::*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTRuleActions
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "dynamodb:PutItem", 
            "kinesis:PutRecord", 
            "iot:Publish", 
            "s3:PutObject", 
            "sns:Publish", 
            "sqs:SendMessage*", 
            "cloudwatch:SetAlarmState", 
            "cloudwatch:PutMetricData", 
            "es:ESHttpPut", 
            "firehose:PutRecord"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AWSQuickSightDescribeRedshift
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "redshift:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticsearchServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "Stmt1480452973134"
        }
    ]
}
Policy Name: AmazonMQReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mq:Describe*", 
                "mq:List*", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: VMImportExportRoleForAWSConnector
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::import-to-ec2-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:ModifySnapshotAttribute", 
                "ec2:CopySnapshot", 
                "ec2:RegisterImage", 
                "ec2:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineCustomActionAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:AcknowledgeJob", 
                "codepipeline:GetJobDetails", 
                "codepipeline:PollForJobs", 
                "codepipeline:PutJobFailureResult", 
                "codepipeline:PutJobSuccessResult"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9ServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:RunInstances", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeInstances", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStacks", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStackResources"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances", 
                "ec2:DeleteSecurityGroup", 
                "ec2:AuthorizeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:DeleteStack"
            ], 
            "Resource": "arn:aws:cloudformation:*:*:stack/aws-cloud9-*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": "arn:aws:ec2:*:*:instance/*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "aws:RequestTag/Name": "aws-cloud9-*"
                }
            }
        }, 
        {
            "Action": [
                "ec2:StartInstances", 
                "ec2:StopInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-cloud9-*"
                }
            }
        }
    ]
}
Policy Name: AWSApplicationAutoscalingECSServicePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:DescribeServices", 
                "ecs:UpdateService", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksInstanceRegistration
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "opsworks:DescribeStackProvisioningParameters", 
                "opsworks:DescribeStacks", 
                "opsworks:RegisterInstance"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCloudDirectoryFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "clouddirectory:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonECSTaskExecutionRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:BatchGetImage", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStorageGatewayFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "storagegateway:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeSnapshots", 
                "ec2:DeleteSnapshot"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonLexReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lex:GetBot", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases", 
                "lex:GetBots", 
                "lex:GetBotChannelAssociation", 
                "lex:GetBotChannelAssociations", 
                "lex:GetBotVersions", 
                "lex:GetBuiltinIntent", 
                "lex:GetBuiltinIntents", 
                "lex:GetBuiltinSlotTypes", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:GetIntentVersions", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:GetSlotTypeVersions", 
                "lex:GetUtterancesView"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonChimeUserManagement
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "chime:ListAccounts", 
                "chime:GetAccount", 
                "chime:GetAccountSettings", 
                "chime:UpdateAccountSettings", 
                "chime:ListUsers", 
                "chime:GetUser", 
                "chime:GetUserByEmail", 
                "chime:InviteUsers", 
                "chime:SuspendUsers", 
                "chime:ActivateUsers", 
                "chime:UpdateUserLicenses", 
                "chime:ResetPersonalPIN", 
                "chime:LogoutUser", 
                "chime:ListDomains", 
                "chime:GetDomain", 
                "chime:ListDirectories", 
                "chime:ListGroups", 
                "chime:SubmitSupportRequest", 
                "chime:ListDelegates", 
                "chime:ListAccountUsageReportData", 
                "chime:GetMeetingDetail", 
                "chime:ListMeetingEvents", 
                "chime:ListMeetingsReportData", 
                "chime:GetUserActivityReportData"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elastictranscoder:Read*", 
                "elastictranscoder:List*", 
                "s3:List*", 
                "iam:List*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSTrustedAdvisorServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:DescribeAccountLimits", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLaunchConfigurations", 
                "cloudformation:DescribeAccountLimits", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListStacks", 
                "cloudfront:ListDistributions", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "dynamodb:DescribeTable", 
                "dynamodb:ListTables", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeReservedInstances", 
                "ec2:DescribeInstances", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeImages", 
                "ec2:DescribeVolumes", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeReservedInstancesOfferings", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancerAttributes", 
                "elasticloadbalancing:DescribeLoadBalancerPolicies", 
                "elasticloadbalancing:DescribeLoadBalancerPolicyTypes", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "iam:GenerateCredentialReport", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetCredentialReport", 
                "iam:GetServerCertificate", 
                "iam:ListServerCertificates", 
                "kinesis:DescribeLimits", 
                "rds:DescribeAccountAttributes", 
                "rds:DescribeDBClusters", 
                "rds:DescribeDBEngineVersions", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBParameterGroups", 
                "rds:DescribeDBParameters", 
                "rds:DescribeDBSecurityGroups", 
                "rds:DescribeDBSnapshots", 
                "rds:DescribeDBSubnetGroups", 
                "rds:DescribeEngineDefaultParameters", 
                "rds:DescribeEvents", 
                "rds:DescribeOptionGroupOptions", 
                "rds:DescribeOptionGroups", 
                "rds:DescribeOrderableDBInstanceOptions", 
                "rds:DescribeReservedDBInstances", 
                "rds:DescribeReservedDBInstancesOfferings", 
                "rds:ListTagsForResource", 
                "redshift:DescribeClusters", 
                "redshift:DescribeReservedNodeOfferings", 
                "redshift:DescribeReservedNodes", 
                "route53:GetHealthCheck", 
                "route53:GetHostedZone", 
                "route53:ListHealthChecks", 
                "route53:ListHostedZones", 
                "route53:ListHostedZonesByName", 
                "route53:ListResourceRecordSets", 
                "s3:GetBucketAcl", 
                "s3:GetBucketPolicy", 
                "s3:GetBucketLocation", 
                "s3:GetBucketLogging", 
                "s3:GetBucketVersioning", 
                "s3:ListBucket", 
                "s3:ListObjects", 
                "s3:ListAllMyBuckets", 
                "ses:GetSendQuota", 
                "sqs:ListQueues", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTConfigReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:DescribeAuthorizer", 
                "iot:DescribeCACertificate", 
                "iot:DescribeCertificate", 
                "iot:DescribeCertificateTag", 
                "iot:DescribeDefaultAuthorizer", 
                "iot:DescribeEndpoint", 
                "iot:DescribeEventConfigurations", 
                "iot:DescribeIndex", 
                "iot:DescribeJob", 
                "iot:DescribeJobExecution", 
                "iot:DescribeRoleAlias", 
                "iot:DescribeStream", 
                "iot:DescribeThing", 
                "iot:DescribeThingGroup", 
                "iot:DescribeThingRegistrationTask", 
                "iot:DescribeThingType", 
                "iot:GetEffectivePolicies", 
                "iot:GetIndexingConfiguration", 
                "iot:GetJobDocument", 
                "iot:GetLoggingOptions", 
                "iot:GetOTAUpdate", 
                "iot:GetPolicy", 
                "iot:GetPolicyVersion", 
                "iot:GetRegistrationCode", 
                "iot:GetTopicRule", 
                "iot:GetV2LoggingOptions", 
                "iot:ListAttachedPolicies", 
                "iot:ListAuthorizers", 
                "iot:ListCACertificates", 
                "iot:ListCertificates", 
                "iot:ListCertificatesByCA", 
                "iot:ListIndices", 
                "iot:ListJobExecutionsForJob", 
                "iot:ListJobExecutionsForThing", 
                "iot:ListJobs", 
                "iot:ListOTAUpdates", 
                "iot:ListOutgoingCertificates", 
                "iot:ListPolicies", 
                "iot:ListPolicyPrincipals", 
                "iot:ListPolicyVersions", 
                "iot:ListPrincipalPolicies", 
                "iot:ListPrincipalThings", 
                "iot:ListRoleAliases", 
                "iot:ListStreams", 
                "iot:ListTargetsForPolicy", 
                "iot:ListThingGroups", 
                "iot:ListThingGroupsForThing", 
                "iot:ListThingPrincipals", 
                "iot:ListThingRegistrationTaskReports", 
                "iot:ListThingRegistrationTasks", 
                "iot:ListThings", 
                "iot:ListThingsInThingGroup", 
                "iot:ListThingTypes", 
                "iot:ListTopicRules", 
                "iot:ListV2LoggingLevels", 
                "iot:SearchIndex", 
                "iot:TestAuthorization", 
                "iot:TestInvokeAuthorizer"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonWorkMailReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ses:Describe*", 
                "ses:Get*", 
                "workmail:Describe*", 
                "workmail:Get*", 
                "workmail:List*", 
                "workmail:Search*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDMSVPCManagementRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaKinesisExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesis:DescribeStream", 
                "kinesis:GetRecords", 
                "kinesis:GetShardIterator", 
                "kinesis:ListStreams", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ResourceGroupsandTagEditorReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "tag:getResources", 
                "tag:getTagKeys", 
                "tag:getTagValues"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRekognitionServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:AmazonRekognition*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesis:PutRecord", 
                "kinesis:PutRecords"
            ], 
            "Resource": "arn:aws:kinesis:*:*:stream/AmazonRekognition*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesisvideo:GetDataEndpoint", 
                "kinesisvideo:GetMedia"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMAutomationRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:Automation*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateImage", 
                "ec2:CopyImage", 
                "ec2:DeregisterImage", 
                "ec2:DescribeImages", 
                "ec2:DeleteSnapshot", 
                "ec2:StartInstances", 
                "ec2:RunInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:DescribeTags", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:UpdateStack", 
                "cloudformation:DeleteStack"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": [
                "arn:aws:sns:*:*:Automation*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudHSMServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ComprehendReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "comprehend:DetectDominantLanguage", 
                "comprehend:BatchDetectDominantLanguage", 
                "comprehend:DetectEntities", 
                "comprehend:BatchDetectEntities", 
                "comprehend:DetectKeyPhrases", 
                "comprehend:BatchDetectKeyPhrases", 
                "comprehend:DetectSentiment", 
                "comprehend:BatchDetectSentiment", 
                "comprehend:DescribeTopicsDetectionJob", 
                "comprehend:ListTopicsDetectionJobs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStepFunctionsConsoleFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "states:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:ListRoles", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/service-role/StatesExecutionRole*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "lambda:ListFunctions", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSQuickSightIoTAnalyticsAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iotanalytics:ListDatasets", 
                "iotanalytics:DescribeDataset", 
                "iotanalytics:GetDatasetContent"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeBuildReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codebuild:BatchGet*", 
                "codebuild:Get*", 
                "codebuild:List*", 
                "codecommit:GetBranch", 
                "codecommit:GetCommit", 
                "codecommit:GetRepository"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: LexBotPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "polly:SynthesizeSpeech"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMacieFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "macie:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningManageRealTimeEndpointOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:CreateRealtimeEndpoint", 
                "machinelearning:DeleteRealtimeEndpoint"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsInvocationAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesis:PutRecord"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsInvocationAccess"
        }
    ]
}
Policy Name: CloudFrontReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:ListCertificates", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "iam:ListServerCertificates", 
                "route53:List*", 
                "waf:ListWebACLs", 
                "waf:GetWebACL"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDeepLensServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:CreateThing", 
                "iot:DeleteThing", 
                "iot:DeleteThingShadow", 
                "iot:DescribeThing", 
                "iot:GetThingShadow", 
                "iot:UpdateThing", 
                "iot:UpdateThingShadow"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTThingAccess"
        }, 
        {
            "Action": [
                "iot:AttachThingPrincipal", 
                "iot:DetachThingPrincipal"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*", 
                "arn:aws:iot:*:*:cert/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTCertificateAccess"
        }, 
        {
            "Action": [
                "iot:CreateKeysAndCertificate", 
                "iot:CreatePolicy", 
                "iot:CreatePolicyVersion"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTCreateCertificateAndPolicyAccess"
        }, 
        {
            "Action": [
                "iot:AttachPrincipalPolicy"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:policy/deeplens*", 
                "arn:aws:iot:*:*:cert/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTAttachCertificatePolicyAccess"
        }, 
        {
            "Action": [
                "iot:GetThingShadow", 
                "iot:UpdateThingShadow"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTDataAccess"
        }, 
        {
            "Action": [
                "iot:DescribeEndpoint"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTEndpointAccess"
        }, 
        {
            "Action": [
                "deeplens:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAccess"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::deeplens*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensS3ObjectAccess"
        }, 
        {
            "Action": [
                "s3:DeleteBucket", 
                "s3:ListBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensS3Buckets"
        }, 
        {
            "Action": [
                "s3:CreateBucket"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensCreateS3Buckets"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "greengrass.amazonaws.com", 
                        "sagemaker.amazonaws.com"
                    ]
                }
            }, 
            "Sid": "DeepLensIAMPassRoleAccess"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/AWSDeepLens*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEqualsIfExists": {
                    "iam:PassedToService": "lambda.amazonaws.com"
                }
            }, 
            "Sid": "DeepLensIAMLambdaPassRoleAccess"
        }, 
        {
            "Action": [
                "greengrass:AssociateRoleToGroup", 
                "greengrass:AssociateServiceRoleToAccount", 
                "greengrass:CreateResourceDefinition", 
                "greengrass:CreateResourceDefinitionVersion", 
                "greengrass:CreateCoreDefinition", 
                "greengrass:CreateCoreDefinitionVersion", 
                "greengrass:CreateDeployment", 
                "greengrass:CreateFunctionDefinition", 
                "greengrass:CreateFunctionDefinitionVersion", 
                "greengrass:CreateGroup", 
                "greengrass:CreateGroupCertificateAuthority", 
                "greengrass:CreateGroupVersion", 
                "greengrass:CreateLoggerDefinition", 
                "greengrass:CreateLoggerDefinitionVersion", 
                "greengrass:CreateSubscriptionDefinition", 
                "greengrass:CreateSubscriptionDefinitionVersion", 
                "greengrass:DeleteCoreDefinition", 
                "greengrass:DeleteFunctionDefinition", 
                "greengrass:DeleteGroup", 
                "greengrass:DeleteLoggerDefinition", 
                "greengrass:DeleteSubscriptionDefinition", 
                "greengrass:DisassociateRoleFromGroup", 
                "greengrass:DisassociateServiceRoleFromAccount", 
                "greengrass:GetAssociatedRole", 
                "greengrass:GetConnectivityInfo", 
                "greengrass:GetCoreDefinition", 
                "greengrass:GetCoreDefinitionVersion", 
                "greengrass:GetDeploymentStatus", 
                "greengrass:GetDeviceDefinition", 
                "greengrass:GetDeviceDefinitionVersion", 
                "greengrass:GetFunctionDefinition", 
                "greengrass:GetFunctionDefinitionVersion", 
                "greengrass:GetGroup", 
                "greengrass:GetGroupCertificateAuthority", 
                "greengrass:GetGroupCertificateConfiguration", 
                "greengrass:GetGroupVersion", 
                "greengrass:GetLoggerDefinition", 
                "greengrass:GetLoggerDefinitionVersion", 
                "greengrass:GetServiceRoleForAccount", 
                "greengrass:GetSubscriptionDefinition", 
                "greengrass:GetSubscriptionDefinitionVersion", 
                "greengrass:ListCoreDefinitionVersions", 
                "greengrass:ListCoreDefinitions", 
                "greengrass:ListDeployments", 
                "greengrass:ListDeviceDefinitionVersions", 
                "greengrass:ListDeviceDefinitions", 
                "greengrass:ListFunctionDefinitionVersions", 
                "greengrass:ListFunctionDefinitions", 
                "greengrass:ListGroupCertificateAuthorities", 
                "greengrass:ListGroupVersions", 
                "greengrass:ListGroups", 
                "greengrass:ListLoggerDefinitionVersions", 
                "greengrass:ListLoggerDefinitions", 
                "greengrass:ListSubscriptionDefinitionVersions", 
                "greengrass:ListSubscriptionDefinitions", 
                "greengrass:ResetDeployments", 
                "greengrass:UpdateConnectivityInfo", 
                "greengrass:UpdateCoreDefinition", 
                "greengrass:UpdateDeviceDefinition", 
                "greengrass:UpdateFunctionDefinition", 
                "greengrass:UpdateGroup", 
                "greengrass:UpdateGroupCertificateConfiguration", 
                "greengrass:UpdateLoggerDefinition", 
                "greengrass:UpdateSubscriptionDefinition"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensGreenGrassAccess"
        }, 
        {
            "Action": [
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:GetFunction", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListFunctions", 
                "lambda:ListVersionsByFunction", 
                "lambda:PublishVersion", 
                "lambda:UpdateFunctionCode", 
                "lambda:UpdateFunctionConfiguration"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensLambdaAdminFunctionAccess"
        }, 
        {
            "Action": [
                "sagemaker:CreateTrainingJob", 
                "sagemaker:DescribeTrainingJob", 
                "sagemaker:StopTrainingJob"
            ], 
            "Resource": [
                "arn:aws:sagemaker:*:*:training-job/deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensSageMakerAccess"
        }, 
        {
            "Action": [
                "acuity:CreateStream", 
                "acuity:DescribeStream", 
                "acuity:DeleteStream"
            ], 
            "Resource": [
                "arn:aws:acuity:*:*:stream/deeplens*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityStreamAccess"
        }, 
        {
            "Action": [
                "acuity:GetDataEndpoint"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityEndpointAccess"
        }
    ]
}
Policy Name: AmazonSNSRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:PutMetricFilter", 
                "logs:PutRetentionPolicy"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonInspectorServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeInstances", 
                "ec2:DescribeTags", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeLoadBalancerAttributes", 
                "elasticloadbalancing:DescribeRules", 
                "elasticloadbalancing:DescribeTags", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsFinancialReportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mobileanalytics:GetReports", 
                "mobileanalytics:GetFinancialReports"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkService
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:*"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awseb-*", 
                "arn:aws:cloudformation:*:*:stack/eb-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCloudformationOperationsOnElasticBeanstalkStacks"
        }, 
        {
            "Action": [
                "logs:DeleteLogGroup"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDeleteCloudwatchLogGroups"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowS3OperationsOnElasticBeanstalkBuckets"
        }, 
        {
            "Action": [
                "autoscaling:AttachInstances", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:CreateLaunchConfiguration", 
                "autoscaling:DeleteLaunchConfiguration", 
                "autoscaling:DeleteAutoScalingGroup", 
                "autoscaling:DeleteScheduledAction", 
                "autoscaling:DescribeAccountLimits", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:DescribeLaunchConfigurations", 
                "autoscaling:DescribeLoadBalancers", 
                "autoscaling:DescribeNotificationConfigurations", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:DescribeScheduledActions", 
                "autoscaling:DetachInstances", 
                "autoscaling:PutScheduledUpdateGroupAction", 
                "autoscaling:ResumeProcesses", 
                "autoscaling:SetDesiredCapacity", 
                "autoscaling:SuspendProcesses", 
                "autoscaling:TerminateInstanceInAutoScalingGroup", 
                "autoscaling:UpdateAutoScalingGroup", 
                "cloudwatch:PutMetricAlarm", 
                "ec2:AssociateAddress", 
                "ec2:AllocateAddress", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DisassociateAddress", 
                "ec2:ReleaseAddress", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:TerminateInstances", 
                "ecs:CreateCluster", 
                "ecs:DeleteCluster", 
                "ecs:DescribeClusters", 
                "ecs:RegisterTaskDefinition", 
                "elasticbeanstalk:*", 
                "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer", 
                "elasticloadbalancing:ConfigureHealthCheck", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:RegisterTargets", 
                "elasticloadbalancing:DeregisterTargets", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "logs:CreateLogGroup", 
                "logs:PutRetentionPolicy", 
                "rds:DescribeDBEngineVersions", 
                "rds:DescribeDBInstances", 
                "rds:DescribeOrderableDBInstanceOptions", 
                "s3:CopyObject", 
                "s3:GetObject", 
                "s3:GetObjectAcl", 
                "s3:GetObjectMetadata", 
                "s3:ListBucket", 
                "s3:listBuckets", 
                "s3:ListObjects", 
                "sns:CreateTopic", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptionsByTopic", 
                "sns:Subscribe", 
                "sns:SetTopicAttributes", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "codebuild:CreateProject", 
                "codebuild:DeleteProject", 
                "codebuild:BatchGetBuilds", 
                "codebuild:StartBuild"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowOperations"
        }
    ]
}
Policy Name: IAMReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:Get*", 
                "iam:List*", 
                "iam:SimulateCustomPolicy", 
                "iam:SimulatePrincipalPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRDSReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:Describe*", 
                "rds:ListTagsForResource", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCognitoPowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-identity:*", 
                "cognito-idp:*", 
                "cognito-sync:*", 
                "iam:ListRoles", 
                "iam:ListOpenIdConnectProviders", 
                "sns:ListPlatformApplications"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53AutoNamingRegistrantAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:GetHostedZone", 
                "route53:ListHostedZonesByName", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateHealthCheck", 
                "route53:GetHealthCheck", 
                "route53:DeleteHealthCheck", 
                "route53:UpdateHealthCheck", 
                "servicediscovery:Get*", 
                "servicediscovery:List*", 
                "servicediscovery:RegisterInstance", 
                "servicediscovery:DeregisterInstance"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticFileSystemFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "elasticfilesystem:*", 
                "kms:DescribeKey", 
                "kms:ListAliases"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: LexChannelPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lex:PostText"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ServerMigrationConnector
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "iam:GetUser", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sms:SendMessage", 
                "sms:GetMessages"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteObject", 
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:PutObject", 
                "s3:PutObjectAcl", 
                "s3:PutLifecycleConfiguration", 
                "s3:AbortMultipartUpload", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts"
            ], 
            "Resource": [
                "arn:aws:s3:::sms-b-*", 
                "arn:aws:s3:::import-to-ec2-*", 
                "arn:aws:s3:::server-migration-service-upgrade", 
                "arn:aws:s3:::server-migration-service-upgrade/*", 
                "arn:aws:s3:::connector-platform-upgrade-info/*", 
                "arn:aws:s3:::connector-platform-upgrade-info", 
                "arn:aws:s3:::connector-platform-upgrade-bundles/*", 
                "arn:aws:s3:::connector-platform-upgrade-bundles", 
                "arn:aws:s3:::connector-platform-release-notes/*", 
                "arn:aws:s3:::connector-platform-release-notes"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "awsconnector:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "SNS:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonESCognitoAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-idp:DescribeUserPool", 
                "cognito-idp:CreateUserPoolClient", 
                "cognito-idp:DeleteUserPoolClient", 
                "cognito-idp:DescribeUserPoolClient", 
                "cognito-idp:AdminInitiateAuth", 
                "cognito-idp:AdminUserGlobalSignOut", 
                "cognito-idp:ListUserPoolClients", 
                "cognito-identity:DescribeIdentityPool", 
                "cognito-identity:UpdateIdentityPool", 
                "cognito-identity:SetIdentityPoolRoles", 
                "cognito-identity:GetIdentityPoolRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "cognito-identity.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonChimeReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "chime:ListAccounts", 
                "chime:GetAccount", 
                "chime:GetAccountSettings", 
                "chime:ListUsers", 
                "chime:GetUser", 
                "chime:GetUserByEmail", 
                "chime:ListDomains", 
                "chime:GetDomain", 
                "chime:ListGroups", 
                "chime:ListDirectories", 
                "chime:ListCDRBucket", 
                "chime:GetCDRBucket", 
                "chime:ListDelegates", 
                "chime:GetAccountResource", 
                "chime:ValidateDelegate", 
                "chime:ListAccountUsageReportData", 
                "chime:GetUserActivityReportData"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonZocaloFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "zocalo:*", 
                "ds:*", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeChangeSet", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStackResources", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:GetCognitoEvents", 
                "dynamodb:BatchGetItem", 
                "dynamodb:DescribeStream", 
                "dynamodb:DescribeTable", 
                "dynamodb:GetItem", 
                "dynamodb:ListStreams", 
                "dynamodb:ListTables", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "events:Describe*", 
                "events:List*", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListRolePolicies", 
                "iam:ListRoles", 
                "iot:DescribeEndpoint", 
                "iot:GetTopicRules", 
                "iot:ListPolicies", 
                "iot:ListThings", 
                "iot:ListTopicRules", 
                "kinesis:DescribeStream", 
                "kinesis:ListStreams", 
                "kms:ListAliases", 
                "lambda:Get*", 
                "lambda:List*", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:DescribeMetricFilters", 
                "logs:GetLogEvents", 
                "s3:Get*", 
                "s3:List*", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sqs:ListQueues", 
                "tag:GetResources"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAccountUsageReportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-portal:ViewUsage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTOTAUpdate
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "iot:CreateJob", 
            "signer:DescribeSigningJob"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AmazonMQFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mq:*", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:DetachNetworkInterface", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceGetEntitlements
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:GetEntitlements"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceforEC2Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:CreateCluster", 
                "ecs:DeregisterContainerInstance", 
                "ecs:DiscoverPollEndpoint", 
                "ecs:Poll", 
                "ecs:RegisterContainerInstance", 
                "ecs:StartTelemetrySession", 
                "ecs:UpdateContainerInstancesState", 
                "ecs:Submit*", 
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:BatchGetImage", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAppStreamFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:ListRoles", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/service-role/ApplicationAutoScalingForAmazonAppStreamAccess", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "application-autoscaling.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSIoTDataAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:Connect", 
                "iot:Publish", 
                "iot:Subscribe", 
                "iot:Receive", 
                "iot:GetThingShadow", 
                "iot:UpdateThingShadow", 
                "iot:DeleteThingShadow"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonTranscribeReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "transcribe:Get*", 
                "transcribe:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonESFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "es:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ServerMigrationServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:ModifySnapshotAttribute", 
                "ec2:CopySnapshot", 
                "ec2:CopyImage", 
                "ec2:Describe*", 
                "ec2:DeleteSnapshot", 
                "ec2:DeregisterImage", 
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSWAFFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "waf:*", 
                "waf-regional:*", 
                "elasticloadbalancing:SetWebACL"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSArtifactAccountSync
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "organizations:ListAccounts", 
                "organizations:DescribeOrganization"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisFirehoseFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "firehose:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "logs:Get*", 
                "logs:List*", 
                "logs:Describe*", 
                "logs:TestMetricFilter", 
                "sns:Get*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaBasicExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ResourceGroupsandTagEditorFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "tag:getResources", 
                "tag:getTagKeys", 
                "tag:getTagValues", 
                "tag:TagResources", 
                "tag:UntagResources", 
                "tag:AddResourceTags", 
                "tag:RemoveResourceTags"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSKeyManagementServicePowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:Describe*", 
                "kms:GenerateRandom", 
                "kms:Get*", 
                "kms:List*", 
                "kms:TagResource", 
                "kms:UntagResource", 
                "iam:ListGroups", 
                "iam:ListRoles", 
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingEC2SpotFleetRequestPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeSpotFleetRequests", 
                "ec2:ModifySpotFleetRequest", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSImportExportReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "importexport:ListJobs", 
                "importexport:GetStatus"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeVolumeStatus", 
                "ec2:DescribeVolumes", 
                "ec2:RebootInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:CreateSnapshot"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListBucket", 
                "s3:Put*", 
                "s3:Get*", 
                "s3:*MultipartUpload*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "1"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "2"
        }, 
        {
            "Action": [
                "s3:*Policy*", 
                "sns:*Permission*", 
                "sns:*Delete*", 
                "s3:*Delete*", 
                "sns:*Remove*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Deny", 
            "Sid": "3"
        }
    ]
}
Policy Name: AWSGlueConsoleFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glue:*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSubnetGroups", 
                "iam:ListRoles", 
                "iam:ListRolePolicies", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeInstances", 
                "rds:DescribeDBInstances", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:GetBucketAcl", 
                "s3:GetBucketLocation", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplateSummary", 
                "dynamodb:ListTables"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*/*", 
                "arn:aws:s3:::*/*aws-glue-*/*", 
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:/aws-glue/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack"
            ], 
            "Resource": "arn:aws:cloudformation:*:*:stack/aws-glue*/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:RunInstances"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*", 
                "arn:aws:ec2:*:*:key-pair/*", 
                "arn:aws:ec2:*:*:image/*", 
                "arn:aws:ec2:*:*:security-group/*", 
                "arn:aws:ec2:*:*:network-interface/*", 
                "arn:aws:ec2:*:*:subnet/*", 
                "arn:aws:ec2:*:*:volume/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances", 
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/aws-glue-*/*"
                }, 
                "StringEquals": {
                    "ec2:ResourceTag/aws:cloudformation:logical-id": "ZeppelinInstance"
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "arn:aws:iam::*:role/AWSGlueServiceRole*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "glue.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "arn:aws:iam::*:role/AWSGlueServiceNotebookRole*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/service-role/AWSGlueServiceRole*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "glue.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:Describe*", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DeregisterTargets", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:RegisterTargets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDeviceFarmFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "devicefarm:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:Describe*", 
                "ssm:Get*", 
                "ssm:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStepFunctionsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "states:ListStateMachines", 
                "states:ListActivities", 
                "states:DescribeStateMachine", 
                "states:DescribeStateMachineForExecution", 
                "states:ListExecutions", 
                "states:DescribeExecution", 
                "states:GetExecutionHistory", 
                "states:DescribeActivity"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceRead-only
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:ViewSubscriptions", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingDynamoDBTablePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:DescribeTable", 
                "dynamodb:UpdateTable", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:*", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "s3:CreateBucket", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:PutBucketPolicy", 
                "codecommit:ListBranches", 
                "codecommit:ListRepositories", 
                "codedeploy:GetApplication", 
                "codedeploy:GetDeploymentGroup", 
                "codedeploy:ListApplications", 
                "codedeploy:ListDeploymentGroups", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListFunctions", 
                "opsworks:DescribeApps", 
                "opsworks:DescribeLayers", 
                "opsworks:DescribeStacks", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListChangeSets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9User
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloud9:CreateEnvironment*", 
                "cloud9:ValidateEnvironmentName", 
                "cloud9:GetUserPublicKey", 
                "cloud9:UpdateUserSettings", 
                "cloud9:GetUserSettings", 
                "iam:GetUser", 
                "iam:ListUsers", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloud9:DescribeEnvironmentMemberships"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "Null": {
                    "cloud9:UserArn": "true", 
                    "cloud9:EnvironmentId": "true"
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "cloud9.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSGreengrassResourceAccessRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:DeleteThingShadow", 
                "iot:GetThingShadow", 
                "iot:UpdateThingShadow"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/GG_*", 
                "arn:aws:iot:*:*:thing/*-gcm", 
                "arn:aws:iot:*:*:thing/*-gda", 
                "arn:aws:iot:*:*:thing/*-gci"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToShadows"
        }, 
        {
            "Action": [
                "iot:DescribeThing"
            ], 
            "Resource": "arn:aws:iot:*:*:thing/*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToDescribeThings"
        }, 
        {
            "Action": [
                "iot:DescribeCertificate"
            ], 
            "Resource": "arn:aws:iot:*:*:cert/*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToDescribeCertificates"
        }, 
        {
            "Action": [
                "greengrass:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToCallGreengrassServices"
        }, 
        {
            "Action": [
                "lambda:GetFunction", 
                "lambda:GetFunctionConfiguration"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToGetLambdaFunctions"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::*Greengrass*", 
                "arn:aws:s3:::*GreenGrass*", 
                "arn:aws:s3:::*greengrass*", 
                "arn:aws:s3:::*Sagemaker*", 
                "arn:aws:s3:::*SageMaker*", 
                "arn:aws:s3:::*sagemaker*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToS3Objects"
        }, 
        {
            "Action": [
                "s3:GetBucketLocation"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToS3BucketLocation"
        }, 
        {
            "Action": [
                "sagemaker:DescribeTrainingJob"
            ], 
            "Resource": [
                "arn:aws:sagemaker:*:*:training-job/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToSageMakerTrainingJobs"
        }
    ]
}
Policy Name: NetworkAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "ec2:AllocateAddress", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssociateAddress", 
                "ec2:AssociateDhcpOptions", 
                "ec2:AssociateRouteTable", 
                "ec2:AttachInternetGateway", 
                "ec2:AttachNetworkInterface", 
                "ec2:AttachVpnGateway", 
                "ec2:CreateCustomerGateway", 
                "ec2:CreateDhcpOptions", 
                "ec2:CreateFlowLogs", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateNatGateway", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAclEntry", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:CreateVpcEndpoint", 
                "ec2:CreateVpnConnection", 
                "ec2:CreateVpnConnectionRoute", 
                "ec2:CreateVpnGateway", 
                "ec2:CreatePlacementGroup", 
                "ec2:DeletePlacementGroup", 
                "ec2:DescribePlacementGroups", 
                "ec2:DeleteFlowLogs", 
                "ec2:DeleteNatGateway", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteTags", 
                "ec2:DeleteVpc", 
                "ec2:DeleteVpcEndpoints", 
                "ec2:DeleteVpnConnection", 
                "ec2:DeleteVpnConnectionRoute", 
                "ec2:DeleteVpnGateway", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeVpcClassicLinkDnsSupport", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "ec2:DetachInternetGateway", 
                "ec2:DetachNetworkInterface", 
                "ec2:DetachVpnGateway", 
                "ec2:DisableVgwRoutePropagation", 
                "ec2:DisassociateAddress", 
                "ec2:DisassociateRouteTable", 
                "ec2:EnableVgwRoutePropagation", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:ModifySubnetAttribute", 
                "ec2:ModifyVpcAttribute", 
                "ec2:ModifyVpcEndpoint", 
                "ec2:MoveAddressToVpc", 
                "ec2:ReleaseAddress", 
                "ec2:ReplaceNetworkAclAssociation", 
                "ec2:ReplaceNetworkAclEntry", 
                "ec2:ReplaceRoute", 
                "ec2:ReplaceRouteTableAssociation", 
                "ec2:ResetNetworkInterfaceAttribute", 
                "ec2:RestoreAddressToClassic", 
                "ec2:UnassignPrivateIpAddresses", 
                "directconnect:*", 
                "route53:*", 
                "route53domains:*", 
                "cloudfront:ListDistributions", 
                "elasticloadbalancing:*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:RetrieveEnvironmentInfo", 
                "elasticbeanstalk:RequestEnvironmentInfo", 
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:CreateTopic", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AcceptVpcPeeringConnection", 
                "ec2:AttachClassicLinkVpc", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateVpcPeeringConnection", 
                "ec2:DeleteCustomerGateway", 
                "ec2:DeleteDhcpOptions", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteNetworkAcl", 
                "ec2:DeleteNetworkAclEntry", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteVolume", 
                "ec2:DeleteVpcPeeringConnection", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:DisableVpcClassicLink", 
                "ec2:EnableVpcClassicLink", 
                "ec2:GetConsoleScreenshot", 
                "ec2:RejectVpcPeeringConnection", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "s3:GetBucketWebsiteConfiguration"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:ListRoles", 
                "iam:PassRole"
            ], 
            "Resource": "arn:aws:iam::*:role/flow-logs-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonWorkSpacesApplicationManagerAdminAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "wam:AuthenticatePackager", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDRSVPCManagement
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRedshiftServiceLinkedRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeAddresses", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSXrayFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "xray:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkWorkerTier
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "MetricsAccess"
        }, 
        {
            "Action": [
                "xray:PutTraceSegments", 
                "xray:PutTelemetryRecords"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "XRayAccess"
        }, 
        {
            "Action": [
                "sqs:ChangeMessageVisibility", 
                "sqs:DeleteMessage", 
                "sqs:ReceiveMessage", 
                "sqs:SendMessage"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "QueueAccess"
        }, 
        {
            "Action": [
                "s3:Get*", 
                "s3:List*", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "BucketAccess"
        }, 
        {
            "Action": [
                "dynamodb:BatchGetItem", 
                "dynamodb:BatchWriteItem", 
                "dynamodb:DeleteItem", 
                "dynamodb:GetItem", 
                "dynamodb:PutItem", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "dynamodb:UpdateItem"
            ], 
            "Resource": [
                "arn:aws:dynamodb:*:*:table/*-stack-AWSEBWorkerCronLeaderRegistry*"
            ], 
            "Effect": "Allow", 
            "Sid": "DynamoPeriodicTasks"
        }, 
        {
            "Action": [
                "logs:PutLogEvents", 
                "logs:CreateLogStream"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudWatchLogsAccess"
        }
    ]
}
Policy Name: AWSDirectConnectFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "directconnect:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeBuildAdminAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codebuild:*", 
                "codecommit:GetBranch", 
                "codecommit:GetCommit", 
                "codecommit:GetRepository", 
                "codecommit:ListBranches", 
                "codecommit:ListRepositories", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "s3:GetBucketLocation", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:PutParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisAnalyticsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "kinesisanalytics:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesis:CreateStream", 
                "kinesis:DeleteStream", 
                "kinesis:DescribeStream", 
                "kinesis:ListStreams", 
                "kinesis:PutRecord", 
                "kinesis:PutRecords"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "firehose:DescribeDeliveryStream", 
                "firehose:ListDeliveryStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "logs:GetLogEvents", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListPolicyVersions", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/service-role/kinesis-analytics*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: APIGatewayServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticloadbalancing:AddListenerCertificates", 
                "elasticloadbalancing:RemoveListenerCertificates", 
                "elasticloadbalancing:ModifyListener"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAccountActivityAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-portal:ViewBilling"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGlacierFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "glacier:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonWorkMailFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:AuthorizeApplication", 
                "ds:CheckAlias", 
                "ds:CreateAlias", 
                "ds:CreateDirectory", 
                "ds:CreateIdentityPoolDirectory", 
                "ds:CreateDomain", 
                "ds:DeleteAlias", 
                "ds:DeleteDirectory", 
                "ds:DescribeDirectories", 
                "ds:ExtendDirectory", 
                "ds:GetDirectoryLimits", 
                "ds:ListAuthorizedApplications", 
                "ds:UnauthorizeApplication", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteVpc", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeDomains", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "kms:DescribeKey", 
                "kms:ListAliases", 
                "ses:*", 
                "workmail:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DAXServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceManageSubscriptions
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:ViewSubscriptions", 
                "aws-marketplace:Subscribe", 
                "aws-marketplace:Unsubscribe"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkCustomPlatformforEC2Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CopyImage", 
                "ec2:CreateImage", 
                "ec2:CreateKeypair", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:DeleteKeypair", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteVolume", 
                "ec2:DeregisterImage", 
                "ec2:DescribeImageAttribute", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeRegions", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "ec2:GetPasswordData", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:ModifySnapshotAttribute", 
                "ec2:RegisterImage", 
                "ec2:RunInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "EC2Access"
        }, 
        {
            "Action": [
                "s3:Get*", 
                "s3:List*", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "BucketAccess"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/platform/*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchLogsAccess"
        }
    ]
}
Policy Name: AWSSupportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "support:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticMapReduceforAutoScalingRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "elasticmapreduce:ListInstanceGroups", 
                "elasticmapreduce:ModifyInstanceGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaInvocation-DynamoDB
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "dynamodb:DescribeStream", 
                "dynamodb:GetRecords", 
                "dynamodb:GetShardIterator", 
                "dynamodb:ListStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSServiceCatalogEndUserFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:SetStackPolicy", 
                "cloudformation:ValidateTemplate", 
                "cloudformation:UpdateStack", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:DescribeChangeSet", 
                "cloudformation:ExecuteChangeSet", 
                "cloudformation:ListChangeSets", 
                "cloudformation:DeleteChangeSet"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/SC-*", 
                "arn:aws:cloudformation:*:*:changeSet/SC-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:GetTemplateSummary", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:ProvisionProduct", 
                "servicecatalog:SearchProducts"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "servicecatalog:DescribeProvisionedProduct", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:ScanProvisionedProducts", 
                "servicecatalog:TerminateProvisionedProduct", 
                "servicecatalog:UpdateProvisionedProduct", 
                "servicecatalog:SearchProvisionedProducts", 
                "servicecatalog:CreateProvisionedProductPlan", 
                "servicecatalog:DescribeProvisionedProductPlan", 
                "servicecatalog:ExecuteProvisionedProductPlan", 
                "servicecatalog:DeleteProvisionedProductPlan", 
                "servicecatalog:ListProvisionedProductPlans"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "servicecatalog:userLevel": "self"
                }
            }
        }
    ]
}
Policy Name: IAMUserSSHKeys
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:DeleteSSHPublicKey", 
                "iam:GetSSHPublicKey", 
                "iam:ListSSHPublicKeys", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSageMakerReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sagemaker:DescribeEndpoint", 
                "sagemaker:DescribeEndpointConfig", 
                "sagemaker:DescribeModel", 
                "sagemaker:DescribeTrainingJob", 
                "sagemaker:DescribeNotebookInstance", 
                "sagemaker:ListEndpointConfigs", 
                "sagemaker:ListEndpoints", 
                "sagemaker:ListModels", 
                "sagemaker:ListTags", 
                "sagemaker:ListTrainingJobs", 
                "sagemaker:ListNotebookInstances", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:DescribeScheduledActions", 
                "cloudwatch:DescribeAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSQuickSightDescribeRDS
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigRulesExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::*/AWSLogs/*/Config/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "config:Put*", 
                "config:Get*", 
                "config:List*", 
                "config:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonESReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "es:Describe*", 
                "es:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployDeployerAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codedeploy:Batch*", 
                "codedeploy:CreateDeployment", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codedeploy:RegisterApplicationRevision"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonPollyFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "polly:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMMaintenanceWindowRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:GetAutomationExecution", 
                "ssm:GetParameters", 
                "ssm:ListCommands", 
                "ssm:SendCommand", 
                "ssm:StartAutomationExecution"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1477803259000"
        }, 
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:SSM*", 
                "arn:aws:lambda:*:*:function:*:SSM*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1477803259001"
        }, 
        {
            "Action": [
                "states:DescribeExecution", 
                "states:StartExecution"
            ], 
            "Resource": [
                "arn:aws:states:*:*:stateMachine:SSM*", 
                "arn:aws:states:*:*:execution:SSM*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1477803259002"
        }
    ]
}
Policy Name: AmazonRDSEnhancedMonitoringRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:PutRetentionPolicy"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:RDS*"
            ], 
            "Effect": "Allow", 
            "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogGroups"
        }, 
        {
            "Action": [
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:RDS*:log-stream:*"
            ], 
            "Effect": "Allow", 
            "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogStreams"
        }
    ]
}
Policy Name: AmazonLexFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "kms:DescribeKey", 
                "kms:ListAliases", 
                "lambda:GetPolicy", 
                "lambda:ListFunctions", 
                "lex:*", 
                "polly:DescribeVoices", 
                "polly:SynthesizeSpeech"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:AddPermission", 
                "lambda:RemovePermission"
            ], 
            "Resource": "arn:aws:lambda:*:*:function:AmazonLex*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "lambda:Principal": "lex.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:DeleteRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots", 
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "lex.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:DetachRolePolicy"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/AmazonLexBotPolicy"
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "channels.lex.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:DetachRolePolicy"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/LexChannelPolicy"
                }
            }
        }
    ]
}
Policy Name: AWSLambdaVPCAccessExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DeleteNetworkInterface"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMacieServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:Get*", 
                "s3:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonLexRunBotsOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lex:PostContent", 
                "lex:PostText"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSNSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSServiceCatalogAdminFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:SetStackPolicy", 
                "cloudformation:UpdateStack", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:DescribeChangeSet", 
                "cloudformation:ExecuteChangeSet", 
                "cloudformation:ListChangeSets", 
                "cloudformation:DeleteChangeSet", 
                "cloudformation:ListStackResources"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/SC-*", 
                "arn:aws:cloudformation:*:*:changeSet/SC-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:CreateUploadBucket", 
                "cloudformation:GetTemplateSummary", 
                "cloudformation:ValidateTemplate", 
                "iam:GetGroup", 
                "iam:GetRole", 
                "iam:GetUser", 
                "iam:ListGroups", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "servicecatalog:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": "servicecatalog.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: CloudSearchReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudsearch:Describe*", 
                "cloudsearch:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSGreengrassFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "greengrass:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudFormationReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:Describe*", 
                "cloudformation:EstimateTemplateCost", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:ValidateTemplate"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:*", 
                "route53domains:*", 
                "cloudfront:ListDistributions", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticbeanstalk:DescribeEnvironments", 
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "s3:GetBucketWebsite", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeRegions", 
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaENIManagementAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DeleteNetworkInterface"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksCloudWatchLogs
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAppStreamReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:Get*", 
                "appstream:List*", 
                "appstream:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStepFunctionsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "states:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonInspectorReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "inspector:Describe*", 
                "inspector:Get*", 
                "inspector:List*", 
                "inspector:LocalizeText", 
                "inspector:Preview*", 
                "ec2:DescribeInstances", 
                "ec2:DescribeTags", 
                "sns:ListTopics", 
                "events:DescribeRule", 
                "events:ListRuleNamesByTarget"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: TranslateReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "translate:TranslateText", 
                "comprehend:DetectDominantLanguage", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCertificateManagerFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: PowerUserAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "NotAction": [
                "iam:*", 
                "organizations:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole", 
                "iam:DeleteServiceLinkedRole", 
                "iam:ListRoles", 
                "organizations:DescribeOrganization"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSageMakerFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sagemaker:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:BatchGetImage", 
                "ecr:BatchCheckLayerAvailability", 
                "cloudwatch:PutMetricData", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeleteScheduledAction", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:DescribeScheduledActions", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:PutScheduledAction", 
                "application-autoscaling:RegisterScalableTarget", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject"
            ], 
            "Resource": [
                "arn:aws:s3:::*SageMaker*", 
                "arn:aws:s3:::*Sagemaker*", 
                "arn:aws:s3:::*sagemaker*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:GetBucketLocation", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEqualsIgnoreCase": {
                    "s3:ExistingObjectTag/SageMaker": "true"
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": "sagemaker.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSElementalMediaStoreFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mediastore:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "Bool": {
                    "aws:SecureTransport": "true"
                }
            }
        }
    ]
}
Policy Name: CloudWatchEventsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "events:*", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsFullAccess"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/AWS_Events_Invoke_Targets", 
            "Effect": "Allow", 
            "Sid": "IAMPassRoleForCloudWatchEvents"
        }
    ]
}
Policy Name: adpi-platform-OpsManagerIamPolicy-VZ72OZMCCVSM
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:Add*", 
                "iam:Attach*", 
                "iam:ChangePassword", 
                "iam:Create*", 
                "iam:DeactivateMFADevice", 
                "iam:Delete*", 
                "iam:Detach*", 
                "iam:EnableMFADevice", 
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:GetAccessKeyLastUsed", 
                "iam:GetAccountAuthorizationDetails", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetContextKeysForCustomPolicy", 
                "iam:GetContextKeysForPrincipalPolicy", 
                "iam:GetCredentialReport", 
                "iam:GetGroup", 
                "iam:GetGroupPolicy", 
                "iam:GetLoginProfile", 
                "iam:GetOpenIDConnectProvider", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:GetSAMLProvider", 
                "iam:GetSSHPublicKey", 
                "iam:GetServerCertificate", 
                "iam:GetServiceLastAccessedDetails", 
                "iam:GetUser", 
                "iam:GetUserPolicy", 
                "iam:List*", 
                "iam:Put*", 
                "iam:RemoveClientIDFromOpenIDConnectProvider", 
                "iam:RemoveRoleFromInstanceProfile", 
                "iam:RemoveUserFromGroup", 
                "iam:ResyncMFADevice", 
                "iam:SetDefaultPolicyVersion", 
                "iam:SimulateCustomPolicy", 
                "iam:SimulatePrincipalPolicy", 
                "iam:Update*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Deny"
        }, 
        {
            "Action": [
                "iam:GetInstanceProfile"
            ], 
            "Resource": [
                "arn:aws:iam::284894803213:instance-profile/adpi-platform-OpsManagerIamInstanceProfile-P9Q3H2MLADHP"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowToGetInfoAboutCurrentInstanceProfile"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::284894803213:role/adpi-platform-OpsManagerIamRole-1816KVBXS4JEQ"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowToCreateInstanceWithCurrentInstanceProfile"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::adpi-platform-opsmanagers3bucket-1l9uemxl7w8o2", 
                "arn:aws:s3:::adpi-platform-opsmanagers3bucket-1l9uemxl7w8o2/*"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerS3Permissions"
        }, 
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:RunInstances", 
                "ec2:RebootInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeKeypairs", 
                "ec2:DescribeRegions", 
                "ec2:DescribeSnapshots", 
                "ec2:CreateSnapshot", 
                "ec2:DeleteSnapshot", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:CreateTags", 
                "ec2:DescribeVolumes", 
                "ec2:CreateVolume", 
                "ec2:AttachVolume", 
                "ec2:DeleteVolume", 
                "ec2:DetachVolume", 
                "ec2:CopyImage", 
                "ec2:RegisterImage", 
                "ec2:DeregisterImage"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerEc2Permissions"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "arn:aws:elasticloadbalancing:eu-central-1:284894803213:loadbalancer/adpi-platform-pcf-elb", 
                "arn:aws:elasticloadbalancing:eu-central-1:284894803213:loadbalancer/adpi-tcp-pcf-tcp-elb"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerElbPermissions"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DescribeLoadBalancers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "OpsManagerAllElbPermissions"
        }
    ]
}
Policy Name: ADPMaintenance
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:*", 
                "cloudformation:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListStackResources", 
                "cloudformation:UpdateStack", 
                "cloudwatch:*", 
                "cloudwatch:Describe*", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "ec2:AssociateAddress", 
                "ec2:AssociateSubnetCidrBlock", 
                "ec2:Attach*", 
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CopyImage", 
                "ec2:CreateFpgaImage", 
                "ec2:CreateImage", 
                "ec2:CreateKeyPair", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSecurityGroupEgress", 
                "ec2:CreateSecurityGroupIngress", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:CreateInternetGateway", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteKeyPair", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteVolume", 
                "ec2:DeregisterImage", 
                "ec2:Describe*", 
                "ec2:DescribeKeyPairs", 
                "ec2:Detach*", 
                "ec2:DetachVolume", 
                "ec2:DetachInternetGateway", 
                "ec2:DisassociateSubnetCidrBlock", 
                "ec2:Get*", 
                "ec2:ImportKeyPair", 
                "ec2:InstanceType", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:ModifyVolume", 
                "ec2:ModifyVolumeAttribute", 
                "ec2:RebootInstances", 
                "ec2:RegisterImage", 
                "ec2:ReplaceNetworkAclAssociation", 
                "ec2:ReplaceNetworkAclEntry", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:UpdateSecurityGroupRuleDescriptionsEgress", 
                "ec2:UpdateSecurityGroupRuleDescriptionsIngress", 
                "elasticfilesystem:ModifyMountTargetSecurityGroups", 
                "elasticloadbalancing:ConfigureHealthCheck", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:ModifyLoadBalancerAttributes", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:SetLoadBalancerPoliciesOfListener", 
                "events:DeleteRule", 
                "events:DescribeRule", 
                "events:DescribeRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "iam:AddRoleToInstanceProfile", 
                "iam:AttachRolePolicy", 
                "iam:AttachUserPolicy", 
                "iam:CreateAccessKey", 
                "iam:CreateInstanceProfile", 
                "iam:CreateRole", 
                "iam:CreateUser", 
                "iam:DeleteAccessKey", 
                "iam:DeleteInstanceProfile", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DeleteUser", 
                "iam:DeleteUserPolicy", 
                "iam:DetachRolePolicy", 
                "iam:GetInstanceProfile", 
                "iam:GetRole", 
                "iam:GetSSHPublicKey", 
                "iam:GetUser", 
                "iam:ListAccessKeys", 
                "iam:ListRolePolicies", 
                "iam:ListRoles", 
                "iam:ListSSHPublicKeys ", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:PutUserPolicy", 
                "iam:RemoveRoleFromInstanceProfile", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey ", 
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:DeleteKey", 
                "kms:Decrypt", 
                "kms:Encrypt", 
                "kms:Get*", 
                "kms:ListAliases", 
                "kms:ListKeys", 
                "kms:Enable*", 
                "kms:Put*", 
                "kms:ScheduleKeyDeletion", 
                "kms:TagResource", 
                "lambda:*", 
                "lambda:AddPermission", 
                "lambda:CreateFunction", 
                "lambda:GetAccountSettings", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListAliases", 
                "lambda:ListFunctions", 
                "lambda:ListTags", 
                "lambda:TagResource", 
                "lambda:UntagResource", 
                "lambda:UpdateFunctionCode", 
                "lambda:UpdateFunctionConfiguration", 
                "logs:Describe*", 
                "logs:FilterLogEvents", 
                "logs:GetLogEvents", 
                "logs:TestMetricFilter", 
                "rds:*", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateRecordSet", 
                "route53:DeleteRecordSet", 
                "route53:GetChange", 
                "route53:GetHostedZone", 
                "route53:ListHostedZones", 
                "route53:ListResourceRecordSets", 
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteObject", 
                "s3:DeleteObjectVersion", 
                "s3:GetBucketAcl", 
                "s3:GetBucketLocation", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:GetObjectAcl", 
                "s3:GetObjectVersion", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:ListBucketVersions", 
                "s3:PutBucketAcl", 
                "s3:PutBucketPolicy", 
                "s3:PutObject", 
                "s3:PutObjectAcl", 
                "sns:ListTopics", 
                "sns:GetTopicAttributes", 
                "sns:ConfirmSubscription", 
                "sns:CreateTopic", 
                "sns:Publish*", 
                "sns:SetTopicAttributes", 
                "sns:Subscribe", 
                "sts:DecodeAuthorizationMessage", 
                "sts:DecodeAuthorizationMessage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: adpo-platform-OpsManagerIamPolicy-1TEKRVYVV8ILM
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:Add*", 
                "iam:Attach*", 
                "iam:ChangePassword", 
                "iam:Create*", 
                "iam:DeactivateMFADevice", 
                "iam:Delete*", 
                "iam:Detach*", 
                "iam:EnableMFADevice", 
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:GetAccessKeyLastUsed", 
                "iam:GetAccountAuthorizationDetails", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetContextKeysForCustomPolicy", 
                "iam:GetContextKeysForPrincipalPolicy", 
                "iam:GetCredentialReport", 
                "iam:GetGroup", 
                "iam:GetGroupPolicy", 
                "iam:GetLoginProfile", 
                "iam:GetOpenIDConnectProvider", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:GetSAMLProvider", 
                "iam:GetSSHPublicKey", 
                "iam:GetServerCertificate", 
                "iam:GetServiceLastAccessedDetails", 
                "iam:GetUser", 
                "iam:GetUserPolicy", 
                "iam:List*", 
                "iam:Put*", 
                "iam:RemoveClientIDFromOpenIDConnectProvider", 
                "iam:RemoveRoleFromInstanceProfile", 
                "iam:RemoveUserFromGroup", 
                "iam:ResyncMFADevice", 
                "iam:SetDefaultPolicyVersion", 
                "iam:SimulateCustomPolicy", 
                "iam:SimulatePrincipalPolicy", 
                "iam:Update*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Deny"
        }, 
        {
            "Action": [
                "iam:GetInstanceProfile"
            ], 
            "Resource": [
                "arn:aws:iam::284894803213:instance-profile/adpo-platform-OpsManagerIamInstanceProfile-1SZD7FT5WVP3J"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowToGetInfoAboutCurrentInstanceProfile"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::284894803213:role/adpo-platform-OpsManagerIamRole-177GUOZ9IV10M"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowToCreateInstanceWithCurrentInstanceProfile"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::adpo-platform-opsmanagers3bucket-nqa3nf3jfqb1", 
                "arn:aws:s3:::adpo-platform-opsmanagers3bucket-nqa3nf3jfqb1/*"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerS3Permissions"
        }, 
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:RunInstances", 
                "ec2:RebootInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeKeypairs", 
                "ec2:DescribeRegions", 
                "ec2:DescribeSnapshots", 
                "ec2:CreateSnapshot", 
                "ec2:DeleteSnapshot", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:CreateTags", 
                "ec2:DescribeVolumes", 
                "ec2:CreateVolume", 
                "ec2:AttachVolume", 
                "ec2:DeleteVolume", 
                "ec2:DetachVolume", 
                "ec2:CopyImage", 
                "ec2:RegisterImage", 
                "ec2:DeregisterImage"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerEc2Permissions"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "arn:aws:elasticloadbalancing:eu-central-1:284894803213:loadbalancer/adpo-platform-pcf-iso-elb", 
                "arn:aws:elasticloadbalancing:eu-central-1:284894803213:loadbalancer/adpo-platform-pcf-elb", 
                "arn:aws:elasticloadbalancing:eu-central-1:284894803213:loadbalancer/adpo-tcp-pcf-tcp-elb"
            ], 
            "Effect": "Allow", 
            "Sid": "OpsManagerElbPermissions"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DescribeLoadBalancers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "OpsManagerAllElbPermissions"
        }
    ]
}
Policy Name: AWSCloudFormationFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudFormsPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:ListCertificates", 
                "athena:List*", 
                "aws-marketplace:ViewSubscriptions", 
                "autoscaling:Describe*", 
                "batch:ListJobs", 
                "clouddirectory:ListAppliedSchemaArns", 
                "clouddirectory:ListDevelopmentSchemaArns", 
                "clouddirectory:ListDirectories", 
                "clouddirectory:ListPublishedSchemaArns", 
                "cloudformation:List*", 
                "cloudformation:DescribeStacks", 
                "cloudfront:List*", 
                "cloudhsm:ListAvailableZones", 
                "cloudhsm:ListLunaClients", 
                "cloudhsm:ListHapgs", 
                "cloudhsm:ListHsms", 
                "cloudsearch:List*", 
                "cloudsearch:DescribeDomains", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:LookupEvents", 
                "cloudwatch:List*", 
                "cloudformation:GetTemplate", 
                "cloudwatch:GetMetricData", 
                "codebuild:ListBuilds*", 
                "codebuild:ListProjects", 
                "codecommit:List*", 
                "codedeploy:List*", 
                "codedeploy:Get*", 
                "codepipeline:ListPipelines", 
                "codestar:List*", 
                "codestar:Verify*", 
                "cognito-idp:List*", 
                "cognito-identity:ListIdentities", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:ListDatasets", 
                "connect:List*", 
                "config:List*", 
                "config:Describe*", 
                "datapipeline:ListPipelines", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetAccountLimits", 
                "devicefarm:List*", 
                "directconnect:Describe*", 
                "discovery:List*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListTables", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeBundleTasks", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeHost*", 
                "ec2:DescribeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeImage*", 
                "ec2:DescribeImport*", 
                "ec2:DescribeInstance*", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetwork*", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeReserved*", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshot*", 
                "ec2:DescribeSpot*", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolume*", 
                "ec2:DescribeVpc*", 
                "ec2:DescribeVpnGateways", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:DescribeApplicationVersions", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticbeanstalk:ListAvailableSolutionStacks", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "es:DescribeElasticsearchDomain", 
                "es:DescribeElasticsearchDomains", 
                "es:ListDomainNames", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "firehose:List*", 
                "firehose:DescribeDeliveryStream", 
                "gamelift:List*", 
                "glacier:List*", 
                "iam:List*", 
                "iam:GetAccountSummary", 
                "iam:GetLoginProfile", 
                "importexport:ListJobs", 
                "inspector:List*", 
                "iot:List*", 
                "kinesis:ListStreams", 
                "kinesisanalytics:ListApplications", 
                "kms:ListKeys", 
                "lambda:List*", 
                "lex:GetBotAliases", 
                "lex:GetBotChannelAssociations", 
                "lex:GetBots", 
                "lex:GetBotVersions", 
                "lex:GetIntents", 
                "lex:GetIntentVersions", 
                "lex:GetSlotTypes", 
                "lex:GetSlotTypeVersions", 
                "lex:GetUtterancesView", 
                "lightsail:GetBlueprints", 
                "lightsail:GetBundles", 
                "lightsail:GetInstances", 
                "lightsail:GetInstanceSnapshots", 
                "lightsail:GetKeyPair", 
                "lightsail:GetRegions", 
                "lightsail:GetStaticIps", 
                "lightsail:IsVpcPeered", 
                "logs:Describe*", 
                "machinelearning:Describe*", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "opsworks:Describe*", 
                "opsworks-cm:Describe*", 
                "organizations:List*", 
                "mobiletargeting:GetApplicationSettings", 
                "mobiletargeting:GetCampaigns", 
                "mobiletargeting:GetImportJobs", 
                "mobiletargeting:GetSegments", 
                "polly:Describe*", 
                "polly:List*", 
                "rds:Describe*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeEvents", 
                "redshift:ViewQueriesInConsole", 
                "route53:List*", 
                "route53:Get*", 
                "route53domains:List*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "sdb:List*", 
                "servicecatalog:List*", 
                "ses:List*", 
                "shield:List*", 
                "states:ListActivities", 
                "states:ListStateMachines", 
                "sns:List*", 
                "sqs:ListQueues", 
                "ssm:ListAssociations", 
                "ssm:ListDocuments", 
                "storagegateway:ListGateways", 
                "storagegateway:ListLocalDisks", 
                "storagegateway:ListVolumeRecoveryPoints", 
                "storagegateway:ListVolumes", 
                "swf:List*", 
                "trustedadvisor:Describe*", 
                "waf:List*", 
                "waf-regional:List*", 
                "workdocs:DescribeAvailableDirectories", 
                "workdocs:DescribeInstances", 
                "workmail:Describe*", 
                "workspaces:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CRPMaintenance
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListStackResources", 
                "cloudformation:UpdateStack", 
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSecurityGroupEgress", 
                "ec2:CreateSecurityGroupIngress", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteVolume", 
                "ec2:Describe*", 
                "ec2:DetachVolume", 
                "ec2:ModifyVolumeAttribute", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "elasticloadbalancing:ConfigureHealthCheck", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:ModifyLoadBalancerAttributes", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:SetLoadBalancerPoliciesOfListener", 
                "iam:AddRoleToInstanceProfile", 
                "iam:CreateAccessKey", 
                "iam:CreateInstanceProfile", 
                "iam:CreateRole", 
                "iam:CreateUser", 
                "iam:DeleteAccessKey", 
                "iam:DeleteInstanceProfile", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DeleteUser", 
                "iam:DeleteUserPolicy", 
                "iam:GetRole", 
                "iam:GetUser", 
                "iam:ListAccessKeys", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:PutUserPolicy", 
                "iam:RemoveRoleFromInstanceProfile", 
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:DeleteAlias", 
                "kms:DeleteKey", 
                "kms:ListAliases", 
                "kms:ListKeys", 
                "kms:ScheduleKeyDeletion", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateRecordSet", 
                "route53:DeleteRecordSet", 
                "route53:GetChange", 
                "route53:ListHostedZones", 
                "route53:ListResourceRecordSets", 
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "sts:DecodeAuthorizationMessage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: IAMCfnAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:List*", 
                "iam:Get*", 
                "iam:CreateAccessKey", 
                "iam:CreateRole", 
                "iam:DeleteAccessKey", 
                "iam:PassRole", 
                "iam:AttachRolePolicy", 
                "iam:CreatePolicy", 
                "iam:CreatePolicyVersion", 
                "iam:PutRolePolicy", 
                "iam:UpdateAssumeRolePolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: NetworkServicePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:List*", 
                "dynamodb:Get*", 
                "dynamodb:Describe*", 
                "s3:List*", 
                "s3:Get*", 
                "s3:Describe*", 
                "ec2:AllocateAddress", 
                "ec2:AssociateAddress", 
                "ec2:DescribeAddresses", 
                "ec2:DisassociateAddress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ViewOnlyPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "connect:List*", 
                "config:List*", 
                "config:Describe*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListTables", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeBundleTasks", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeHost*", 
                "ec2:DescribeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeImage*", 
                "ec2:DescribeImport*", 
                "ec2:DescribeInstance*", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetwork*", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeReserved*", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshot*", 
                "ec2:DescribeSpot*", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolume*", 
                "ec2:DescribeVpc*", 
                "ec2:DescribeVpnGateways", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:DescribeApplicationVersions", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticbeanstalk:ListAvailableSolutionStacks", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "iam:List*", 
                "iam:GetAccountSummary", 
                "iam:GetLoginProfile", 
                "importexport:ListJobs", 
                "inspector:List*", 
                "kms:ListKeys", 
                "lambda:List*", 
                "logs:Describe*", 
                "organizations:List*", 
                "rds:Describe*", 
                "route53:List*", 
                "route53:Get*", 
                "route53domains:List*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:Get*", 
                "sdb:List*", 
                "servicecatalog:List*", 
                "ses:List*", 
                "sns:List*", 
                "sqs:ListQueues", 
                "ssm:ListAssociations", 
                "ssm:ListDocuments", 
                "swf:List*", 
                "trustedadvisor:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDirectConnectReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "directconnect:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGlacierReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glacier:DescribeJob", 
                "glacier:DescribeVault", 
                "glacier:GetDataRetrievalPolicy", 
                "glacier:GetJobOutput", 
                "glacier:GetVaultAccessPolicy", 
                "glacier:GetVaultLock", 
                "glacier:GetVaultNotifications", 
                "glacier:ListJobs", 
                "glacier:ListMultipartUploads", 
                "glacier:ListParts", 
                "glacier:ListTagsForVault", 
                "glacier:ListVaults"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackResource", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:List*", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcs", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingConsoleReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:ListMetrics", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:ListSubscriptions", 
                "sns:ListTopics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDMSRedshiftS3Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:ListBucket", 
                "s3:DeleteBucket", 
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject", 
                "s3:GetObjectVersion", 
                "s3:GetBucketPolicy", 
                "s3:PutBucketPolicy", 
                "s3:DeleteBucketPolicy"
            ], 
            "Resource": "arn:aws:s3:::dms-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSQuickSightListIAM
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSHealthFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "health:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessGatewayExecution
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:Send*", 
                "a4b:Get*"
            ], 
            "Resource": "arn:aws:a4b:*:*:gateway/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sqs:ReceiveMessage", 
                "sqs:DeleteMessage"
            ], 
            "Resource": [
                "arn:aws:sqs:*:*:dd-*", 
                "arn:aws:sqs:*:*:sd-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "a4b:List*", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogGroups", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRDSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:*", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DeleteAlarms", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "sns:ListSubscriptions", 
                "sns:ListTopics", 
                "sns:Publish", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "pi:*", 
            "Resource": "arn:aws:pi:*:*:metrics/rds/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "rds.amazonaws.com", 
                        "rds.application-autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: SupportUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "support:*", 
                "acm:DescribeCertificate", 
                "acm:GetCertificate", 
                "acm:List*", 
                "apigateway:GET", 
                "appstream:Get*", 
                "autoscaling:Describe*", 
                "aws-marketplace:ViewSubscriptions", 
                "cloudformation:Describe*", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:EstimateTemplateCost", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "cloudsearch:Describe*", 
                "cloudsearch:List*", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:LookupEvents", 
                "cloudtrail:ListTags", 
                "cloudtrail:ListPublicKeys", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "codecommit:BatchGetRepositories", 
                "codecommit:Get*", 
                "codecommit:List*", 
                "codedeploy:Batch*", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codepipeline:AcknowledgeJob", 
                "codepipeline:AcknowledgeThirdPartyJob", 
                "codepipeline:ListActionTypes", 
                "codepipeline:ListPipelines", 
                "codepipeline:PollForJobs", 
                "codepipeline:PollForThirdPartyJobs", 
                "codepipeline:GetPipelineState", 
                "codepipeline:GetPipeline", 
                "cognito-identity:List*", 
                "cognito-identity:LookupDeveloperIdentity", 
                "cognito-identity:Describe*", 
                "cognito-idp:Describe*", 
                "cognito-sync:Describe*", 
                "cognito-sync:GetBulkPublishDetails", 
                "cognito-sync:GetCognitoEvents", 
                "cognito-sync:GetIdentityPoolConfiguration", 
                "cognito-sync:List*", 
                "config:DescribeConfigurationRecorders", 
                "config:DescribeConfigurationRecorderStatus", 
                "config:DescribeConfigRuleEvaluationStatus", 
                "config:DescribeConfigRules", 
                "config:DescribeDeliveryChannels", 
                "config:DescribeDeliveryChannelStatus", 
                "config:GetResourceConfigHistory", 
                "config:ListDiscoveredResources", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:QueryObjects", 
                "datapipeline:ReportTaskProgress", 
                "datapipeline:ReportTaskRunnerHeartbeat", 
                "devicefarm:List*", 
                "devicefarm:Get*", 
                "directconnect:Describe*", 
                "discovery:Describe*", 
                "discovery:ListConfigurations", 
                "dms:Describe*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "ds:DescribeSnapshots", 
                "ds:GetDirectoryLimits", 
                "ds:GetSnapshotLimits", 
                "ds:ListAuthorizedApplications", 
                "dynamodb:DescribeLimits", 
                "dynamodb:DescribeTable", 
                "dynamodb:ListTables", 
                "ec2:Describe*", 
                "ec2:DescribeHosts", 
                "ec2:describeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeReservedInstancesModifications", 
                "ec2:DescribeTags", 
                "ec2:GetFlowLogsCount", 
                "ecr:GetRepositoryPolicy", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:Describe*", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticache:List*", 
                "elasticbeanstalk:Check*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:RequestEnvironmentInfo", 
                "elasticbeanstalk:RetrieveEnvironmentInfo", 
                "elasticbeanstalk:ValidateConfigurationSettings", 
                "elasticfilesystem:Describe*", 
                "elasticloadbalancing:Describe*", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "elastictranscoder:ReadJob", 
                "elasticfilesystem:DescribeFileSystems", 
                "es:Describe*", 
                "es:List*", 
                "es:ESHttpGet", 
                "es:ESHttpHead", 
                "events:DescribeRule", 
                "events:List*", 
                "events:TestEventPattern", 
                "firehose:Describe*", 
                "firehose:List*", 
                "gamelift:List*", 
                "gamelift:Describe*", 
                "glacier:ListVaults", 
                "glacier:DescribeVault", 
                "glacier:DescribeJob", 
                "glacier:Get*", 
                "glacier:List*", 
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:Get*", 
                "iam:List*", 
                "importexport:GetStatus", 
                "importexport:ListJobs", 
                "importexport:GetJobDetail", 
                "inspector:Describe*", 
                "inspector:List*", 
                "inspector:GetAssessmentTelemetry", 
                "inspector:LocalizeText", 
                "iot:Describe*", 
                "iot:Get*", 
                "iot:List*", 
                "kinesisanalytics:DescribeApplication", 
                "kinesisanalytics:DiscoverInputSchema", 
                "kinesisanalytics:GetApplicationState", 
                "kinesisanalytics:ListApplications", 
                "kinesis:Describe*", 
                "kinesis:Get*", 
                "kinesis:List*", 
                "kms:Describe*", 
                "kms:Get*", 
                "kms:List*", 
                "lambda:List*", 
                "lambda:Get*", 
                "logs:Describe*", 
                "logs:TestMetricFilter", 
                "machinelearning:Describe*", 
                "machinelearning:Get*", 
                "mobilehub:GetProject", 
                "mobilehub:List*", 
                "mobilehub:ValidateProject", 
                "mobilehub:VerifyServiceRole", 
                "opsworks:Describe*", 
                "rds:Describe*", 
                "rds:ListTagsForResource", 
                "redshift:Describe*", 
                "route53:Get*", 
                "route53:List*", 
                "route53domains:CheckDomainAvailability", 
                "route53domains:GetDomainDetail", 
                "route53domains:GetOperationDetail", 
                "route53domains:List*", 
                "s3:List*", 
                "sdb:GetAttributes", 
                "sdb:List*", 
                "sdb:Select*", 
                "servicecatalog:SearchProducts", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ScanProvisionedProducts", 
                "ses:Get*", 
                "ses:List*", 
                "sns:Get*", 
                "sns:List*", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "sqs:ListQueues", 
                "sqs:ReceiveMessage", 
                "ssm:List*", 
                "ssm:Describe*", 
                "storagegateway:Describe*", 
                "storagegateway:List*", 
                "swf:Count*", 
                "swf:Describe*", 
                "swf:Get*", 
                "swf:List*", 
                "waf:Get*", 
                "waf:List*", 
                "workspaces:Describe*", 
                "workdocs:Describe*", 
                "workmail:Describe*", 
                "workmail:Get*", 
                "workspaces:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "ec2:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "cloudwatch:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": [
                        "autoscaling.amazonaws.com", 
                        "ec2scheduled.amazonaws.com", 
                        "elasticloadbalancing.amazonaws.com", 
                        "spot.amazonaws.com", 
                        "spotfleet.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: SecretsManagerReadWrite
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "secretsmanager:*", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:DescribeChangeSet", 
                "cloudformation:DescribeStackResource", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ExecuteChangeSet", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "kms:DescribeKey", 
                "kms:ListAliases", 
                "kms:ListKeys", 
                "lambda:ListFunctions", 
                "rds:DescribeDBInstances", 
                "tag:GetResources"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:AddPermission", 
                "lambda:CreateFunction", 
                "lambda:GetFunction", 
                "lambda:InvokeFunction", 
                "lambda:UpdateFunctionConfiguration"
            ], 
            "Resource": "arn:aws:lambda:*:*:function:SecretsManager*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "serverlessrepo:CreateCloudFormationChangeSet"
            ], 
            "Resource": "arn:aws:serverlessrepo:*:*:applications/SecretsManager*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::awsserverlessrepo-changesets*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTThingsRegistration
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:AddThingToThingGroup", 
                "iot:AttachPrincipalPolicy", 
                "iot:AttachThingPrincipal", 
                "iot:CreateCertificateFromCsr", 
                "iot:CreatePolicy", 
                "iot:CreateThing", 
                "iot:DescribeCertificate", 
                "iot:DescribeThing", 
                "iot:DescribeThingGroup", 
                "iot:DescribeThingType", 
                "iot:DetachThingPrincipal", 
                "iot:GetPolicy", 
                "iot:ListPolicyPrincipals", 
                "iot:ListPrincipalPolicies", 
                "iot:ListPrincipalThings", 
                "iot:ListThingGroupsForThing", 
                "iot:ListThingPrincipals", 
                "iot:RegisterCertificate", 
                "iot:RegisterThing", 
                "iot:RemoveThingFromThingGroup", 
                "iot:UpdateCertificate", 
                "iot:UpdateThing", 
                "iot:UpdateThingGroupsForThing"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticbeanstalk:Check*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:RequestEnvironmentInfo", 
                "elasticbeanstalk:RetrieveEnvironmentInfo", 
                "ec2:Describe*", 
                "elasticloadbalancing:Describe*", 
                "autoscaling:Describe*", 
                "cloudwatch:Describe*", 
                "cloudwatch:List*", 
                "cloudwatch:Get*", 
                "s3:Get*", 
                "s3:List*", 
                "sns:Get*", 
                "sns:List*", 
                "cloudformation:Describe*", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:Validate*", 
                "cloudformation:Estimate*", 
                "rds:Describe*", 
                "sqs:Get*", 
                "sqs:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElementalMediaStoreReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mediastore:Get*", 
                "mediastore:List*", 
                "mediastore:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "Bool": {
                    "aws:SecureTransport": "true"
                }
            }
        }
    ]
}
Policy Name: AWSCertificateManagerReadOnly
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "acm:DescribeCertificate", 
            "acm:ListCertificates", 
            "acm:GetCertificate", 
            "acm:ListTagsForCertificate"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AWSQuicksightAthenaAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "athena:BatchGetQueryExecution", 
                "athena:CancelQueryExecution", 
                "athena:GetCatalogs", 
                "athena:GetExecutionEngine", 
                "athena:GetExecutionEngines", 
                "athena:GetNamespace", 
                "athena:GetNamespaces", 
                "athena:GetQueryExecution", 
                "athena:GetQueryExecutions", 
                "athena:GetQueryResults", 
                "athena:GetTable", 
                "athena:GetTables", 
                "athena:ListQueryExecutions", 
                "athena:RunQuery", 
                "athena:StartQueryExecution", 
                "athena:StopQueryExecution"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "glue:CreateDatabase", 
                "glue:DeleteDatabase", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:UpdateDatabase", 
                "glue:CreateTable", 
                "glue:DeleteTable", 
                "glue:BatchDeleteTable", 
                "glue:UpdateTable", 
                "glue:GetTable", 
                "glue:GetTables", 
                "glue:BatchCreatePartition", 
                "glue:CreatePartition", 
                "glue:DeletePartition", 
                "glue:BatchDeletePartition", 
                "glue:UpdatePartition", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:BatchGetPartition"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts", 
                "s3:AbortMultipartUpload", 
                "s3:CreateBucket", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-athena-query-results-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeCommitPowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codecommit:BatchGet*", 
                "codecommit:Get*", 
                "codecommit:List*", 
                "codecommit:Create*", 
                "codecommit:DeleteBranch", 
                "codecommit:Describe*", 
                "codecommit:Put*", 
                "codecommit:Post*", 
                "codecommit:Merge*", 
                "codecommit:Test*", 
                "codecommit:Update*", 
                "codecommit:GitPull", 
                "codecommit:GitPush"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "events:DeleteRule", 
                "events:DescribeRule", 
                "events:DisableRule", 
                "events:EnableRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "events:ListTargetsByRule"
            ], 
            "Resource": "arn:aws:events:*:*:rule/codecommit*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsCodeCommitRulesAccess"
        }, 
        {
            "Action": [
                "sns:Subscribe", 
                "sns:Unsubscribe"
            ], 
            "Resource": "arn:aws:sns:*:*:codecommit*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionAccess"
        }, 
        {
            "Action": [
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionReadAccess"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "LambdaReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListAccessKeys", 
                "iam:ListSSHPublicKeys", 
                "iam:ListServiceSpecificCredentials", 
                "iam:ListAccessKeys", 
                "iam:GetSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyConsoleAccess"
        }, 
        {
            "Action": [
                "iam:DeleteSSHPublicKey", 
                "iam:GetSSHPublicKey", 
                "iam:ListSSHPublicKeys", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMUserSSHKeys"
        }, 
        {
            "Action": [
                "iam:CreateServiceSpecificCredential", 
                "iam:UpdateServiceSpecificCredential", 
                "iam:DeleteServiceSpecificCredential", 
                "iam:ResetServiceSpecificCredential"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMSelfManageServiceSpecificCredentials"
        }
    ]
}
Policy Name: AWSCodeCommitFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codecommit:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "events:DeleteRule", 
                "events:DescribeRule", 
                "events:DisableRule", 
                "events:EnableRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "events:ListTargetsByRule"
            ], 
            "Resource": "arn:aws:events:*:*:rule/codecommit*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsCodeCommitRulesAccess"
        }, 
        {
            "Action": [
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sns:SetTopicAttributes"
            ], 
            "Resource": "arn:aws:sns:*:*:codecommit*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionAccess"
        }, 
        {
            "Action": [
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSTopicAndSubscriptionReadAccess"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "LambdaReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListAccessKeys", 
                "iam:ListSSHPublicKeys", 
                "iam:ListServiceSpecificCredentials", 
                "iam:ListAccessKeys", 
                "iam:GetSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyConsoleAccess"
        }, 
        {
            "Action": [
                "iam:DeleteSSHPublicKey", 
                "iam:GetSSHPublicKey", 
                "iam:ListSSHPublicKeys", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMUserSSHKeys"
        }, 
        {
            "Action": [
                "iam:CreateServiceSpecificCredential", 
                "iam:UpdateServiceSpecificCredential", 
                "iam:DeleteServiceSpecificCredential", 
                "iam:ResetServiceSpecificCredential"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMSelfManageServiceSpecificCredentials"
        }
    ]
}
Policy Name: IAMSelfManageServiceSpecificCredentials
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:CreateServiceSpecificCredential", 
                "iam:ListServiceSpecificCredentials", 
                "iam:UpdateServiceSpecificCredential", 
                "iam:DeleteServiceSpecificCredential", 
                "iam:ResetServiceSpecificCredential"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEMRCleanupPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:TerminateInstances", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeVolumeStatus", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "ec2:DeleteVolume"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9EnvironmentMember
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloud9:GetUserSettings", 
                "cloud9:UpdateUserSettings", 
                "iam:GetUser", 
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloud9:DescribeEnvironmentMemberships"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "Null": {
                    "cloud9:UserArn": "true", 
                    "cloud9:EnvironmentId": "true"
                }
            }
        }
    ]
}
Policy Name: AWSApplicationAutoscalingSageMakerEndpointPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sagemaker:DescribeEndpoint", 
                "sagemaker:DescribeEndpointConfig", 
                "sagemaker:UpdateEndpointWeightsAndCapacities", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: FMSServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "waf:UpdateWebACL", 
                "waf:DeleteWebACL", 
                "waf:GetWebACL", 
                "waf-regional:UpdateWebACL", 
                "waf-regional:DeleteWebACL", 
                "waf-regional:GetWebACL", 
                "waf-regional:ListResourcesForWebACL", 
                "waf-regional:AssociateWebACL", 
                "waf-regional:DisassociateWebACL", 
                "elasticloadbalancing:SetWebACL"
            ], 
            "Resource": [
                "arn:aws:waf:*:*:webacl/*", 
                "arn:aws:waf-regional:*:*:webacl/*", 
                "arn:aws:waf:*:*:rulegroup/*", 
                "arn:aws:waf-regional:*:*:rulegroup/*", 
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "waf:CreateWebACL", 
                "waf-regional:CreateWebACL", 
                "waf:GetChangeToken", 
                "waf-regional:GetChangeToken"
            ], 
            "Resource": [
                "arn:aws:waf:*", 
                "arn:aws:waf-regional:*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "waf:PutPermissionPolicy", 
                "waf:GetPermissionPolicy", 
                "waf:DeletePermissionPolicy", 
                "waf-regional:PutPermissionPolicy", 
                "waf-regional:GetPermissionPolicy", 
                "waf-regional:DeletePermissionPolicy"
            ], 
            "Resource": [
                "arn:aws:waf:*:*:webacl/*", 
                "arn:aws:waf:*:*:rulegroup/*", 
                "arn:aws:waf-regional:*:*:webacl/*", 
                "arn:aws:waf-regional:*:*:rulegroup/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudfront:GetDistribution", 
                "cloudfront:UpdateDistribution", 
                "cloudfront:ListDistributionsByWebACLId"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "config:DescribeConfigurationRecorders", 
                "config:DescribeConfigurationRecorderStatus", 
                "config:PutConfigurationRecorder", 
                "config:StartConfigurationRecorder", 
                "config:PutDeliveryChannel", 
                "config:DescribeDeliveryChannels", 
                "config:DescribeDeliveryChannelStatus", 
                "config:DeleteConfigRule", 
                "config:DescribeComplianceByConfigRule", 
                "config:DescribeConfigRuleEvaluationStatus", 
                "config:DescribeConfigRules", 
                "config:GetComplianceDetailsByConfigRule", 
                "config:GetComplianceSummaryByConfigRule", 
                "config:GetDiscoveredResourceCounts", 
                "config:PutConfigRule", 
                "config:StartConfigRulesEvaluation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/fms.amazonaws.com/AWSServiceRoleForFMS"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "organizations:DescribeAccount", 
                "organizations:DescribeOrganization", 
                "organizations:ListAccounts"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSQSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sqs:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:Get*", 
                "a4b:List*", 
                "a4b:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeChangeSet", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStackResources", 
                "cloudwatch:*", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:GetCognitoEvents", 
                "cognito-sync:SetCognitoEvents", 
                "dynamodb:*", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "events:*", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListRolePolicies", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "iot:AttachPrincipalPolicy", 
                "iot:AttachThingPrincipal", 
                "iot:CreateKeysAndCertificate", 
                "iot:CreatePolicy", 
                "iot:CreateThing", 
                "iot:CreateTopicRule", 
                "iot:DescribeEndpoint", 
                "iot:GetTopicRule", 
                "iot:ListPolicies", 
                "iot:ListThings", 
                "iot:ListTopicRules", 
                "iot:ReplaceTopicRule", 
                "kinesis:DescribeStream", 
                "kinesis:ListStreams", 
                "kinesis:PutRecord", 
                "kms:ListAliases", 
                "lambda:*", 
                "logs:*", 
                "s3:*", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sns:Publish", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sqs:ListQueues", 
                "sqs:SendMessage", 
                "tag:GetResources", 
                "xray:PutTelemetryRecords", 
                "xray:PutTraceSegments"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTLogging
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:PutMetricFilter", 
                "logs:PutRetentionPolicy", 
                "logs:GetLogEvents", 
                "logs:DeleteLogStream"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2RoleforSSM
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:DescribeAssociation", 
                "ssm:GetDeployablePatchSnapshotForInstance", 
                "ssm:GetDocument", 
                "ssm:GetManifest", 
                "ssm:GetParameters", 
                "ssm:ListAssociations", 
                "ssm:ListInstanceAssociations", 
                "ssm:PutInventory", 
                "ssm:PutComplianceItems", 
                "ssm:PutConfigurePackageResult", 
                "ssm:UpdateAssociationStatus", 
                "ssm:UpdateInstanceAssociationStatus", 
                "ssm:UpdateInstanceInformation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2messages:AcknowledgeMessage", 
                "ec2messages:DeleteMessage", 
                "ec2messages:FailMessage", 
                "ec2messages:GetEndpoint", 
                "ec2messages:GetMessages", 
                "ec2messages:SendReply"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:PutMetricData"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeInstanceStatus"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ds:CreateComputer", 
                "ds:DescribeDirectories"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:GetObject", 
                "s3:AbortMultipartUpload", 
                "s3:ListMultipartUploadParts", 
                "s3:ListBucket", 
                "s3:ListBucketMultipartUploads"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudHSMRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:CreateTags", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DetachNetworkInterface"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSEnhancedClassicNetworkingMangementPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: IAMFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "iam:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonInspectorFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "inspector:*", 
                "ec2:DescribeInstances", 
                "ec2:DescribeTags", 
                "sns:ListTopics", 
                "events:DescribeRule", 
                "events:ListRuleNamesByTarget"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "inspector.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/inspector.amazonaws.com/AWSServiceRoleForAmazonInspector", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "inspector.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonElastiCacheFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "elasticache:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/elasticache.amazonaws.com/AWSServiceRoleForElastiCache", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "elasticache.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSAgentlessDiscoveryService
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "awsconnector:RegisterConnector", 
                "awsconnector:GetConnectorHealth"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:GetUser", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:ListBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::connector-platform-upgrade-info/*", 
                "arn:aws:s3:::connector-platform-upgrade-info", 
                "arn:aws:s3:::connector-platform-upgrade-bundles/*", 
                "arn:aws:s3:::connector-platform-upgrade-bundles", 
                "arn:aws:s3:::connector-platform-release-notes/*", 
                "arn:aws:s3:::connector-platform-release-notes", 
                "arn:aws:s3:::prod.agentless.discovery.connector.upgrade/*", 
                "arn:aws:s3:::prod.agentless.discovery.connector.upgrade"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:PutObjectAcl"
            ], 
            "Resource": [
                "arn:aws:s3:::import-to-ec2-connector-debug-logs/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "SNS:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "Discovery:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "Discovery"
        }, 
        {
            "Action": [
                "arsenal:RegisterOnPremisesAgent"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "arsenal"
        }
    ]
}
Policy Name: AWSXrayWriteOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "xray:PutTraceSegments", 
                "xray:PutTelemetryRecords"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSPriceListServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "pricing:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "autoscaling:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "autoscaling:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "cloudwatch:PutMetricAlarm", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeLaunchTemplateVersions", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcClassicLink"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "autoscaling.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonEC2RoleforAWSCodeDeploy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectVersion", 
                "s3:ListBucket"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMobileHub_ReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:DescribeTable", 
                "iam:ListSAMLProviders", 
                "lambda:ListFunctions", 
                "sns:ListTopics", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:GetBot", 
                "lex:GetBots", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases", 
                "mobilehub:ExportProject", 
                "mobilehub:GenerateProjectParameters", 
                "mobilehub:GetProject", 
                "mobilehub:GetProjectSnapshot", 
                "mobilehub:ListProjectSnapshots", 
                "mobilehub:ListAvailableConnectors", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "mobilehub:ValidateProject", 
                "mobilehub:VerifyServiceRole", 
                "mobilehub:DescribeBundle", 
                "mobilehub:ExportBundle", 
                "mobilehub:ListBundles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::*/aws-my-sample-app*.zip", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsBuiltInTargetExecutionAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:Describe*", 
                "ec2:RebootInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:CreateSnapshot"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsBuiltInTargetExecutionAccess"
        }
    ]
}
Policy Name: AutoScalingServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AttachClassicLinkVpc", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:Describe*", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RunInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "EC2InstanceManagement"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "ec2.amazonaws.com*"
                }
            }, 
            "Sid": "EC2InstanceProfileManagement"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "spot.amazonaws.com"
                }
            }, 
            "Sid": "EC2SpotManagement"
        }, 
        {
            "Action": [
                "elasticloadbalancing:Register*", 
                "elasticloadbalancing:Deregister*", 
                "elasticloadbalancing:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ELBManagement"
        }, 
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CWManagement"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSManagement"
        }
    ]
}
Policy Name: AmazonCloudDirectoryReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "clouddirectory:List*", 
                "clouddirectory:Get*", 
                "clouddirectory:LookupPolicy", 
                "clouddirectory:BatchRead"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchAgentAdminPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData", 
                "ec2:DescribeTags", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups", 
                "logs:CreateLogStream", 
                "logs:CreateLogGroup"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:GetParameter", 
                "ssm:PutParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "opsworks:*", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "iam:GetRolePolicy", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksCMInstanceProfileRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeStackResource", 
                "cloudformation:SignalResource"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:AbortMultipartUpload", 
                "s3:DeleteObject", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:ListMultipartUploadParts", 
                "s3:PutObject"
            ], 
            "Resource": "arn:aws:s3:::aws-opsworks-cm-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSBatchServiceEventTargetRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "batch:SubmitJob"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineApproverAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:GetPipeline", 
                "codepipeline:GetPipelineState", 
                "codepipeline:GetPipelineExecution", 
                "codepipeline:ListPipelineExecutions", 
                "codepipeline:ListPipelines", 
                "codepipeline:PutApprovalResult"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationDiscoveryAgentAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "arsenal:RegisterOnPremisesAgent"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ViewOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:ListCertificates", 
                "athena:List*", 
                "aws-marketplace:ViewSubscriptions", 
                "autoscaling:Describe*", 
                "batch:ListJobs", 
                "clouddirectory:ListAppliedSchemaArns", 
                "clouddirectory:ListDevelopmentSchemaArns", 
                "clouddirectory:ListDirectories", 
                "clouddirectory:ListPublishedSchemaArns", 
                "cloudformation:List*", 
                "cloudformation:DescribeStacks", 
                "cloudfront:List*", 
                "cloudhsm:ListAvailableZones", 
                "cloudhsm:ListLunaClients", 
                "cloudhsm:ListHapgs", 
                "cloudhsm:ListHsms", 
                "cloudsearch:List*", 
                "cloudsearch:DescribeDomains", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:LookupEvents", 
                "cloudwatch:List*", 
                "cloudwatch:GetMetricData", 
                "codebuild:ListBuilds*", 
                "codebuild:ListProjects", 
                "codecommit:List*", 
                "codedeploy:List*", 
                "codedeploy:Get*", 
                "codepipeline:ListPipelines", 
                "codestar:List*", 
                "codestar:Verify*", 
                "cognito-idp:List*", 
                "cognito-identity:ListIdentities", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:ListDatasets", 
                "connect:List*", 
                "config:List*", 
                "config:Describe*", 
                "datapipeline:ListPipelines", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetAccountLimits", 
                "devicefarm:List*", 
                "directconnect:Describe*", 
                "discovery:List*", 
                "dms:List*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListTables", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeBundleTasks", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeHost*", 
                "ec2:DescribeIdentityIdFormat", 
                "ec2:DescribeIdFormat", 
                "ec2:DescribeImage*", 
                "ec2:DescribeImport*", 
                "ec2:DescribeInstance*", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetwork*", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeReserved*", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshot*", 
                "ec2:DescribeSpot*", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVolume*", 
                "ec2:DescribeVpc*", 
                "ec2:DescribeVpnGateways", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecs:List*", 
                "ecs:Describe*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:DescribeApplicationVersions", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticbeanstalk:ListAvailableSolutionStacks", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticmapreduce:List*", 
                "elastictranscoder:List*", 
                "es:DescribeElasticsearchDomain", 
                "es:DescribeElasticsearchDomains", 
                "es:ListDomainNames", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "firehose:List*", 
                "firehose:DescribeDeliveryStream", 
                "gamelift:List*", 
                "glacier:List*", 
                "iam:List*", 
                "iam:GetAccountSummary", 
                "iam:GetLoginProfile", 
                "importexport:ListJobs", 
                "inspector:List*", 
                "iot:List*", 
                "kinesis:ListStreams", 
                "kinesisanalytics:ListApplications", 
                "kms:ListKeys", 
                "lambda:List*", 
                "lex:GetBotAliases", 
                "lex:GetBotChannelAssociations", 
                "lex:GetBots", 
                "lex:GetBotVersions", 
                "lex:GetIntents", 
                "lex:GetIntentVersions", 
                "lex:GetSlotTypes", 
                "lex:GetSlotTypeVersions", 
                "lex:GetUtterancesView", 
                "lightsail:GetBlueprints", 
                "lightsail:GetBundles", 
                "lightsail:GetInstances", 
                "lightsail:GetInstanceSnapshots", 
                "lightsail:GetKeyPair", 
                "lightsail:GetRegions", 
                "lightsail:GetStaticIps", 
                "lightsail:IsVpcPeered", 
                "logs:Describe*", 
                "machinelearning:Describe*", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "opsworks:Describe*", 
                "opsworks-cm:Describe*", 
                "organizations:List*", 
                "mobiletargeting:GetApplicationSettings", 
                "mobiletargeting:GetCampaigns", 
                "mobiletargeting:GetImportJobs", 
                "mobiletargeting:GetSegments", 
                "polly:Describe*", 
                "polly:List*", 
                "rds:Describe*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeEvents", 
                "redshift:ViewQueriesInConsole", 
                "route53:List*", 
                "route53:Get*", 
                "route53domains:List*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "sdb:List*", 
                "servicecatalog:List*", 
                "ses:List*", 
                "shield:List*", 
                "states:ListActivities", 
                "states:ListStateMachines", 
                "sns:List*", 
                "sqs:ListQueues", 
                "ssm:ListAssociations", 
                "ssm:ListDocuments", 
                "storagegateway:ListGateways", 
                "storagegateway:ListLocalDisks", 
                "storagegateway:ListVolumeRecoveryPoints", 
                "storagegateway:ListVolumes", 
                "swf:List*", 
                "trustedadvisor:Describe*", 
                "waf:List*", 
                "waf-regional:List*", 
                "workdocs:DescribeAvailableDirectories", 
                "workdocs:DescribeInstances", 
                "workmail:Describe*", 
                "workspaces:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkCrowdReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "crowd:GetTask"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CrowdApiReadOnlyAccess"
        }
    ]
}
Policy Name: AmazonElasticMapReduceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteTags", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSpotPriceHistory", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcs", 
                "ec2:DetachNetworkInterface", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RunInstances", 
                "ec2:TerminateInstances", 
                "ec2:DeleteVolume", 
                "ec2:DescribeVolumeStatus", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListInstanceProfiles", 
                "iam:ListRolePolicies", 
                "iam:PassRole", 
                "s3:CreateBucket", 
                "s3:Get*", 
                "s3:List*", 
                "sdb:BatchPutAttributes", 
                "sdb:Select", 
                "sqs:CreateQueue", 
                "sqs:Delete*", 
                "sqs:GetQueue*", 
                "sqs:PurgeQueue", 
                "sqs:ReceiveMessage", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms", 
                "application-autoscaling:RegisterScalableTarget", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "spot.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonRoute53DomainsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53domains:Get*", 
                "route53domains:List*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMAutomationApproverAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:DescribeAutomationExecutions", 
                "ssm:GetAutomationExecution", 
                "ssm:SendAutomationSignal"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "iam:GetRolePolicy", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "iam:PassRole", 
                "opsworks:*", 
                "rds:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigRoleForOrganizations
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "organizations:ListAccounts", 
                "organizations:DescribeOrganization", 
                "organizations:ListAWSServiceAccessForOrganization"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ApplicationAutoScalingForAmazonAppStreamAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:UpdateFleet", 
                "appstream:DescribeFleets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DescribeAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerRegistryFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:*", 
                "cloudtrail:LookupEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: SimpleWorkflowFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "swf:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: GreengrassOTAUpdateArtifactAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::eu-central-1-greengrass-updates/*", 
                "arn:aws:s3:::us-east-1-greengrass-updates/*", 
                "arn:aws:s3:::ap-northeast-1-greengrass-updates/*", 
                "arn:aws:s3:::us-west-2-greengrass-updates/*", 
                "arn:aws:s3:::ap-southeast-2-greengrass-updates/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowsIotToAccessGreengrassOTAUpdateArtifacts"
        }
    ]
}
Policy Name: AmazonS3FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "s3:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStorageGatewayReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "storagegateway:List*", 
                "storagegateway:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeSnapshots"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: Billing
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-portal:*Billing", 
                "awsbillingconsole:*Billing", 
                "aws-portal:*Usage", 
                "awsbillingconsole:*Usage", 
                "aws-portal:*PaymentMethods", 
                "awsbillingconsole:*PaymentMethods", 
                "budgets:ViewBudget", 
                "budgets:ModifyBudget", 
                "cur:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: QuickSightAccessForS3StorageManagementAnalyticsReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectMetadata"
            ], 
            "Resource": [
                "arn:aws:s3:::s3-analytics-export-shared-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetAnalyticsConfiguration", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketLocation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerRegistryReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:GetRepositoryPolicy", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecr:DescribeImages", 
                "ecr:BatchGetImage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticMapReduceforEC2Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "dynamodb:*", 
                "ec2:Describe*", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:ListBootstrapActions", 
                "elasticmapreduce:ListClusters", 
                "elasticmapreduce:ListInstanceGroups", 
                "elasticmapreduce:ListInstances", 
                "elasticmapreduce:ListSteps", 
                "kinesis:CreateStream", 
                "kinesis:DeleteStream", 
                "kinesis:DescribeStream", 
                "kinesis:GetRecords", 
                "kinesis:GetShardIterator", 
                "kinesis:MergeShards", 
                "kinesis:PutRecord", 
                "kinesis:SplitShard", 
                "rds:Describe*", 
                "s3:*", 
                "sdb:*", 
                "sns:*", 
                "sqs:*", 
                "glue:CreateDatabase", 
                "glue:UpdateDatabase", 
                "glue:DeleteDatabase", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:CreateTable", 
                "glue:UpdateTable", 
                "glue:DeleteTable", 
                "glue:GetTable", 
                "glue:GetTables", 
                "glue:GetTableVersions", 
                "glue:CreatePartition", 
                "glue:BatchCreatePartition", 
                "glue:UpdatePartition", 
                "glue:DeletePartition", 
                "glue:BatchDeletePartition", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:BatchGetPartition", 
                "glue:CreateUserDefinedFunction", 
                "glue:UpdateUserDefinedFunction", 
                "glue:DeleteUserDefinedFunction", 
                "glue:GetUserDefinedFunction", 
                "glue:GetUserDefinedFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DatabaseAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:Describe*", 
                "cloudwatch:DisableAlarmActions", 
                "cloudwatch:EnableAlarmActions", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "cloudwatch:PutMetricAlarm", 
                "datapipeline:ActivatePipeline", 
                "datapipeline:CreatePipeline", 
                "datapipeline:DeletePipeline", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:PutPipelineDefinition", 
                "datapipeline:QueryObjects", 
                "dynamodb:*", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "elasticache:*", 
                "iam:ListRoles", 
                "iam:GetRole", 
                "kms:ListKeys", 
                "lambda:CreateEventSourceMapping", 
                "lambda:CreateFunction", 
                "lambda:DeleteEventSourceMapping", 
                "lambda:DeleteFunction", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListEventSourceMappings", 
                "lambda:ListFunctions", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:FilterLogEvents", 
                "logs:GetLogEvents", 
                "logs:Create*", 
                "logs:PutLogEvents", 
                "logs:PutMetricFilter", 
                "rds:*", 
                "redshift:*", 
                "s3:CreateBucket", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:Get*", 
                "sns:List*", 
                "sns:SetTopicAttributes", 
                "sns:Subscribe", 
                "sns:Unsubscribe"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:AbortMultipartUpload", 
                "s3:DeleteObject*", 
                "s3:Get*", 
                "s3:List*", 
                "s3:PutAccelerateConfiguration", 
                "s3:PutBucketTagging", 
                "s3:PutBucketVersioning", 
                "s3:PutBucketWebsite", 
                "s3:PutLifecycleConfiguration", 
                "s3:PutReplicationConfiguration", 
                "s3:PutObject*", 
                "s3:Replicate*", 
                "s3:RestoreObject"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/rds-monitoring-role", 
                "arn:aws:iam::*:role/rdbms-lambda-access", 
                "arn:aws:iam::*:role/lambda_exec_role", 
                "arn:aws:iam::*:role/lambda-dynamodb-*", 
                "arn:aws:iam::*:role/lambda-vpc-execution-role", 
                "arn:aws:iam::*:role/DataPipelineDefaultRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRedshiftReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "redshift:Describe*", 
                "redshift:ViewQueriesInConsole", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "sns:Get*", 
                "sns:List*", 
                "cloudwatch:Describe*", 
                "cloudwatch:List*", 
                "cloudwatch:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "ec2:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:ListMetrics", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchAgentServerPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData", 
                "ec2:DescribeTags", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups", 
                "logs:CreateLogStream", 
                "logs:CreateLogGroup"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:GetParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSXrayReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "xray:BatchGetTraces", 
                "xray:GetServiceGraph", 
                "xray:GetTraceGraph", 
                "xray:GetTraceSummaries"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkEnhancedHealth
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:GetConsoleOutput", 
                "ec2:AssociateAddress", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeSecurityGroups", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:DescribeNotificationConfigurations", 
                "sns:Publish"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:DescribeLogStreams", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*:log-stream:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticMapReduceReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:List*", 
                "elasticmapreduce:ViewEventsFromAllClustersInConsole", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "sdb:Select", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDirectoryServiceReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:Check*", 
                "ds:Describe*", 
                "ds:Get*", 
                "ds:List*", 
                "ds:Verify*", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "sns:ListTopics", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGuardDutyServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:DescribeImages"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonVPCReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeEgressOnlyInternetGateways", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroupReferences", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeStaleSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeVpcClassicLinkDnsSupport", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointConnectionNotifications", 
                "ec2:DescribeVpcEndpointConnections", 
                "ec2:DescribeVpcEndpointServiceConfigurations", 
                "ec2:DescribeVpcEndpointServicePermissions", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeStackResource", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awseb-*", 
                "arn:aws:cloudformation:*:*:stack/eb-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCloudformationReadOperationsOnElasticBeanstalkStacks"
        }, 
        {
            "Action": [
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:DescribeNotificationConfigurations", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:PutNotificationConfiguration", 
                "ec2:DescribeInstanceStatus", 
                "ec2:AssociateAddress", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "sns:Publish"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowOperations"
        }, 
        {
            "Action": [
                "logs:DescribeLogStreams", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*:log-stream:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "events:DescribeRule", 
                "events:ListRuleNamesByTarget", 
                "events:ListRules", 
                "events:ListTargetsByRule", 
                "events:TestEventPattern", 
                "events:DescribeEventBus"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsReadOnlyAccess"
        }
    ]
}
Policy Name: AWSLambdaReplicator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:DisableReplication"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:*"
            ], 
            "Effect": "Allow", 
            "Sid": "LambdaCreateDeletePermission"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLikeIfExists": {
                    "iam:PassedToService": "lambda.amazonaws.com"
                }
            }, 
            "Sid": "IamPassRolePermission"
        }, 
        {
            "Action": [
                "cloudfront:ListDistributionsByLambdaFunction"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudFrontListDistributions"
        }
    ]
}
Policy Name: AmazonAPIGatewayInvokeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "execute-api:Invoke"
            ], 
            "Resource": "arn:aws:execute-api:*:*:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSSSOServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:AttachRolePolicy", 
                "iam:CreateRole", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DetachRolePolicy", 
                "iam:GetRole", 
                "iam:ListRolePolicies", 
                "iam:PutRolePolicy", 
                "iam:ListAttachedRolePolicies"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListRoles"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "ListRolesInTheAccount"
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus", 
                "iam:DeleteRole", 
                "iam:GetRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDeletionOfServiceLinkedRoleForPeregrine"
        }, 
        {
            "Action": [
                "iam:CreateSAMLProvider", 
                "iam:GetSAMLProvider", 
                "iam:UpdateSAMLProvider", 
                "iam:DeleteSAMLProvider"
            ], 
            "Resource": [
                "arn:aws:iam::*:saml-provider/AWSSSO_*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "organizations:DescribeAccount", 
                "organizations:DescribeOrganization", 
                "organizations:ListAccounts"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisAnalyticsReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesisanalytics:Describe*", 
                "kinesisanalytics:Get*", 
                "kinesisanalytics:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesis:DescribeStream", 
                "kinesis:ListStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "firehose:DescribeDeliveryStream", 
                "firehose:ListDeliveryStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "logs:GetLogEvents", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListPolicyVersions", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "mobileanalytics:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMobileHub_FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "apigateway:GET", 
                "apigateway:GetRestApis", 
                "apigateway:GetResources", 
                "apigateway:POST", 
                "apigateway:TestInvokeMethod", 
                "cloudfront:GetDistribution", 
                "devicefarm:CreateProject", 
                "devicefarm:ListJobs", 
                "devicefarm:ListRuns", 
                "devicefarm:GetProject", 
                "devicefarm:GetRun", 
                "devicefarm:ListArtifacts", 
                "devicefarm:ListProjects", 
                "devicefarm:ScheduleRun", 
                "dynamodb:DescribeTable", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "iam:ListSAMLProviders", 
                "lambda:ListFunctions", 
                "sns:ListTopics", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:GetBot", 
                "lex:GetBots", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases", 
                "mobilehub:CreateProject", 
                "mobilehub:DeleteProject", 
                "mobilehub:UpdateProject", 
                "mobilehub:ExportProject", 
                "mobilehub:ImportProject", 
                "mobilehub:SynchronizeProject", 
                "mobilehub:GenerateProjectParameters", 
                "mobilehub:GetProject", 
                "mobilehub:GetProjectSnapshot", 
                "mobilehub:ListProjectSnapshots", 
                "mobilehub:DeleteProjectSnapshot", 
                "mobilehub:ListAvailableConnectors", 
                "mobilehub:ListAvailableFeatures", 
                "mobilehub:ListAvailableRegions", 
                "mobilehub:ListProjects", 
                "mobilehub:ValidateProject", 
                "mobilehub:VerifyServiceRole", 
                "mobilehub:DescribeBundle", 
                "mobilehub:ExportBundle", 
                "mobilehub:ListBundles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::*/aws-my-sample-app*.zip", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject"
            ], 
            "Resource": "arn:aws:s3:::*-mobilehub-*/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:ListBucket"
            ], 
            "Resource": "arn:aws:s3:::*-mobilehub-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAPIGatewayPushToCloudWatchLogs
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:PutLogEvents", 
                "logs:GetLogEvents", 
                "logs:FilterLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDataPipelineRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "datapipeline:DescribeObjects", 
                "datapipeline:EvaluateExpression", 
                "dynamodb:BatchGetItem", 
                "dynamodb:DescribeTable", 
                "dynamodb:GetItem", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "dynamodb:UpdateTable", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:Describe*", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:DeleteSecurityGroup", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DetachNetworkInterface", 
                "elasticmapreduce:*", 
                "iam:GetInstanceProfile", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListRolePolicies", 
                "iam:ListInstanceProfiles", 
                "iam:PassRole", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "s3:CreateBucket", 
                "s3:DeleteObject", 
                "s3:Get*", 
                "s3:List*", 
                "s3:Put*", 
                "sdb:BatchPutAttributes", 
                "sdb:Select*", 
                "sns:GetTopicAttributes", 
                "sns:ListTopics", 
                "sns:Publish", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sqs:CreateQueue", 
                "sqs:Delete*", 
                "sqs:GetQueue*", 
                "sqs:PurgeQueue", 
                "sqs:ReceiveMessage"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "elasticmapreduce.amazonaws.com", 
                        "spot.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: CloudWatchFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "cloudwatch:*", 
                "logs:*", 
                "sns:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "events.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSDeepLensLambdaFunctionAccessPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListBucket", 
                "s3:GetObject", 
                "s3:ListObjects"
            ], 
            "Resource": [
                "arn:aws:s3:::deeplens*/*", 
                "arn:aws:s3:::deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensS3ObjectAccess"
        }, 
        {
            "Action": [
                "logs:CreateLogStream", 
                "logs:DescribeLogStreams", 
                "logs:PutLogEvents", 
                "logs:CreateLogGroup"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/greengrass/*", 
            "Effect": "Allow", 
            "Sid": "DeepLensGreenGrassCloudWatchAccess"
        }, 
        {
            "Action": [
                "deeplens:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAccess"
        }, 
        {
            "Action": [
                "acuity:CreateStream", 
                "acuity:DescribeStream", 
                "acuity:DeleteStream", 
                "acuity:PutMedia"
            ], 
            "Resource": [
                "arn:aws:acuity:*:*:stream/deeplens*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityStreamAccess"
        }, 
        {
            "Action": [
                "acuity:GetDataEndpoint"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityEndpointAccess"
        }
    ]
}
Policy Name: AmazonGuardDutyFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "guardduty:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "guardduty.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonRDSDirectoryServiceAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:DescribeDirectories", 
                "ds:AuthorizeApplication", 
                "ds:UnauthorizeApplication"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:GetPipeline", 
                "codepipeline:GetPipelineState", 
                "codepipeline:GetPipelineExecution", 
                "codepipeline:ListPipelineExecutions", 
                "codepipeline:ListActionTypes", 
                "codepipeline:ListPipelines", 
                "iam:ListRoles", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "codecommit:ListBranches", 
                "codecommit:ListRepositories", 
                "codedeploy:GetApplication", 
                "codedeploy:GetDeploymentGroup", 
                "codedeploy:ListApplications", 
                "codedeploy:ListDeploymentGroups", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListFunctions", 
                "opsworks:DescribeApps", 
                "opsworks:DescribeLayers", 
                "opsworks:DescribeStacks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:Describe*", 
                "acm:Get*", 
                "acm:List*", 
                "apigateway:GET", 
                "application-autoscaling:Describe*", 
                "autoscaling-plans:Describe*", 
                "appstream:Describe*", 
                "appstream:Get*", 
                "appstream:List*", 
                "athena:List*", 
                "athena:Batch*", 
                "athena:Get*", 
                "autoscaling:Describe*", 
                "batch:List*", 
                "batch:Describe*", 
                "cloud9:Describe*", 
                "cloud9:List*", 
                "clouddirectory:List*", 
                "clouddirectory:BatchRead", 
                "clouddirectory:Get*", 
                "clouddirectory:LookupPolicy", 
                "cloudformation:Describe*", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:Estimate*", 
                "cloudformation:Preview*", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "cloudhsm:List*", 
                "cloudhsm:Describe*", 
                "cloudhsm:Get*", 
                "cloudsearch:Describe*", 
                "cloudsearch:List*", 
                "cloudtrail:Describe*", 
                "cloudtrail:Get*", 
                "cloudtrail:List*", 
                "cloudtrail:LookupEvents", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "codebuild:BatchGet*", 
                "codebuild:List*", 
                "codecommit:BatchGet*", 
                "codecommit:Get*", 
                "codecommit:GitPull", 
                "codecommit:List*", 
                "codedeploy:BatchGet*", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codepipeline:List*", 
                "codepipeline:Get*", 
                "codestar:List*", 
                "codestar:Describe*", 
                "codestar:Get*", 
                "codestar:Verify*", 
                "cognito-identity:List*", 
                "cognito-identity:Describe*", 
                "cognito-identity:Lookup*", 
                "cognito-sync:List*", 
                "cognito-sync:Describe*", 
                "cognito-sync:Get*", 
                "cognito-sync:QueryRecords", 
                "cognito-idp:AdminList*", 
                "cognito-idp:List*", 
                "cognito-idp:Describe*", 
                "cognito-idp:Get*", 
                "config:Deliver*", 
                "config:Describe*", 
                "config:Get*", 
                "config:List*", 
                "connect:List*", 
                "connect:Describe*", 
                "connect:Get*", 
                "datapipeline:Describe*", 
                "datapipeline:EvaluateExpression", 
                "datapipeline:Get*", 
                "datapipeline:List*", 
                "datapipeline:QueryObjects", 
                "datapipeline:Validate*", 
                "directconnect:Describe*", 
                "devicefarm:List*", 
                "devicefarm:Get*", 
                "discovery:Describe*", 
                "discovery:List*", 
                "discovery:Get*", 
                "dms:Describe*", 
                "dms:List*", 
                "dms:Test*", 
                "ds:Check*", 
                "ds:Describe*", 
                "ds:Get*", 
                "ds:List*", 
                "ds:Verify*", 
                "dynamodb:BatchGet*", 
                "dynamodb:Describe*", 
                "dynamodb:Get*", 
                "dynamodb:List*", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "ec2:Describe*", 
                "ec2:Get*", 
                "ec2messages:Get*", 
                "ecr:BatchCheck*", 
                "ecr:BatchGet*", 
                "ecr:Describe*", 
                "ecr:Get*", 
                "ecr:List*", 
                "ecs:Describe*", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticache:List*", 
                "elasticbeanstalk:Check*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:Request*", 
                "elasticbeanstalk:Retrieve*", 
                "elasticbeanstalk:Validate*", 
                "elasticfilesystem:Describe*", 
                "elasticloadbalancing:Describe*", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:List*", 
                "elasticmapreduce:View*", 
                "elastictranscoder:List*", 
                "elastictranscoder:Read*", 
                "es:Describe*", 
                "es:List*", 
                "es:ESHttpGet", 
                "es:ESHttpHead", 
                "events:Describe*", 
                "events:List*", 
                "events:Test*", 
                "firehose:Describe*", 
                "firehose:List*", 
                "gamelift:List*", 
                "gamelift:Get*", 
                "gamelift:Describe*", 
                "gamelift:RequestUploadCredentials", 
                "gamelift:ResolveAlias", 
                "gamelift:Search*", 
                "glacier:List*", 
                "glacier:Describe*", 
                "glacier:Get*", 
                "guardduty:Get*", 
                "guardduty:List*", 
                "health:Describe*", 
                "health:Get*", 
                "health:List*", 
                "iam:Generate*", 
                "iam:Get*", 
                "iam:List*", 
                "iam:Simulate*", 
                "importexport:Get*", 
                "importexport:List*", 
                "inspector:Describe*", 
                "inspector:Get*", 
                "inspector:List*", 
                "inspector:Preview*", 
                "inspector:LocalizeText", 
                "iot:Describe*", 
                "iot:Get*", 
                "iot:List*", 
                "kinesisanalytics:Describe*", 
                "kinesisanalytics:Discover*", 
                "kinesisanalytics:Get*", 
                "kinesisanalytics:List*", 
                "kinesis:Describe*", 
                "kinesis:Get*", 
                "kinesis:List*", 
                "kms:Describe*", 
                "kms:Get*", 
                "kms:List*", 
                "lambda:List*", 
                "lambda:Get*", 
                "lex:Get*", 
                "lightsail:Get*", 
                "lightsail:Is*", 
                "lightsail:Download*", 
                "logs:Describe*", 
                "logs:Get*", 
                "logs:FilterLogEvents", 
                "logs:ListTagsLogGroup", 
                "logs:TestMetricFilter", 
                "machinelearning:Describe*", 
                "machinelearning:Get*", 
                "mobileanalytics:Get*", 
                "mobilehub:Describe*", 
                "mobilehub:Export*", 
                "mobilehub:Generate*", 
                "mobilehub:Get*", 
                "mobilehub:List*", 
                "mobilehub:Validate*", 
                "mobilehub:Verify*", 
                "mobiletargeting:Get*", 
                "opsworks:Describe*", 
                "opsworks:Get*", 
                "opsworks-cm:Describe*", 
                "organizations:Describe*", 
                "organizations:List*", 
                "polly:Describe*", 
                "polly:Get*", 
                "polly:List*", 
                "polly:SynthesizeSpeech", 
                "rekognition:CompareFaces", 
                "rekognition:Detect*", 
                "rekognition:List*", 
                "rekognition:Search*", 
                "rds:Describe*", 
                "rds:List*", 
                "rds:Download*", 
                "redshift:Describe*", 
                "redshift:View*", 
                "redshift:Get*", 
                "resource-groups:Describe*", 
                "resource-groups:Get*", 
                "resource-groups:List*", 
                "resource-groups:Search*", 
                "route53:Get*", 
                "route53:List*", 
                "route53:Test*", 
                "route53domains:Check*", 
                "route53domains:Get*", 
                "route53domains:List*", 
                "route53domains:View*", 
                "s3:Get*", 
                "s3:List*", 
                "s3:Head*", 
                "sdb:Get*", 
                "sdb:List*", 
                "sdb:Select*", 
                "servicecatalog:List*", 
                "servicecatalog:Scan*", 
                "servicecatalog:Search*", 
                "servicecatalog:Describe*", 
                "ses:Get*", 
                "ses:List*", 
                "ses:Describe*", 
                "ses:Verify*", 
                "shield:Describe*", 
                "shield:List*", 
                "snowball:Get*", 
                "snowball:Describe*", 
                "snowball:List*", 
                "sns:Get*", 
                "sns:List*", 
                "sns:Check*", 
                "sqs:Get*", 
                "sqs:List*", 
                "sqs:Receive*", 
                "ssm:Describe*", 
                "ssm:Get*", 
                "ssm:List*", 
                "states:List*", 
                "states:Describe*", 
                "states:GetExecutionHistory", 
                "storagegateway:Describe*", 
                "storagegateway:List*", 
                "sts:Get*", 
                "swf:Count*", 
                "swf:Describe*", 
                "swf:Get*", 
                "swf:List*", 
                "tag:Get*", 
                "trustedadvisor:Describe*", 
                "waf:Get*", 
                "waf:List*", 
                "waf-regional:List*", 
                "waf-regional:Get*", 
                "workdocs:Describe*", 
                "workdocs:Get*", 
                "workdocs:CheckAlias", 
                "workmail:Describe*", 
                "workmail:Get*", 
                "workmail:List*", 
                "workmail:Search*", 
                "workspaces:Describe*", 
                "xray:BatchGet*", 
                "xray:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncInvokeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appsync:GraphQL", 
                "appsync:GetGraphqlApi", 
                "appsync:ListGraphqlApis", 
                "appsync:ListApiKeys"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningBatchPredictionsAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:CreateBatchPrediction", 
                "machinelearning:DeleteBatchPrediction", 
                "machinelearning:DescribeBatchPredictions", 
                "machinelearning:GetBatchPrediction", 
                "machinelearning:UpdateBatchPrediction"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSEC2SpotFleetServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:RunInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*", 
                "arn:aws:ec2:*:*:spot-instances-request/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:ec2spot:fleet-request-id": "*"
                }
            }
        }
    ]
}
Policy Name: AmazonRekognitionReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rekognition:CompareFaces", 
                "rekognition:DetectFaces", 
                "rekognition:DetectLabels", 
                "rekognition:ListCollections", 
                "rekognition:ListFaces", 
                "rekognition:SearchFaces", 
                "rekognition:SearchFacesByImage", 
                "rekognition:DetectText", 
                "rekognition:GetCelebrityInfo", 
                "rekognition:RecognizeCelebrities", 
                "rekognition:DetectModerationLabels", 
                "rekognition:GetLabelDetection", 
                "rekognition:GetFaceDetection", 
                "rekognition:GetContentModeration", 
                "rekognition:GetPersonTracking", 
                "rekognition:GetCelebrityRecognition", 
                "rekognition:GetFaceSearch", 
                "rekognition:DescribeStreamProcessor", 
                "rekognition:ListStreamProcessors"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codedeploy:Batch*", 
                "codedeploy:Get*", 
                "codedeploy:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudSearchFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudsearch:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudHSMFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "cloudhsm:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2SpotFleetAutoscaleRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeSpotFleetRequests", 
                "ec2:ModifySpotFleetRequest"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticLoadBalancingServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAddresses", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:AttachNetworkInterface", 
                "ec2:DetachNetworkInterface", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssignIpv6Addresses", 
                "ec2:UnassignIpv6Addresses"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeBuildDeveloperAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codebuild:StartBuild", 
                "codebuild:StopBuild", 
                "codebuild:BatchGet*", 
                "codebuild:Get*", 
                "codebuild:List*", 
                "codecommit:GetBranch", 
                "codecommit:GetCommit", 
                "codecommit:GetRepository", 
                "codecommit:ListBranches", 
                "s3:GetBucketLocation", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:PutParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ElastiCacheServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSGlueServiceNotebookRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glue:CreateDatabase", 
                "glue:CreatePartition", 
                "glue:CreateTable", 
                "glue:DeleteDatabase", 
                "glue:DeletePartition", 
                "glue:DeleteTable", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:GetTable", 
                "glue:GetTableVersions", 
                "glue:GetTables", 
                "glue:UpdateDatabase", 
                "glue:UpdatePartition", 
                "glue:UpdateTable", 
                "glue:CreateBookmark", 
                "glue:GetBookmark", 
                "glue:UpdateBookmark", 
                "glue:GetMetric", 
                "glue:PutMetric", 
                "glue:CreateConnection", 
                "glue:CreateJob", 
                "glue:DeleteConnection", 
                "glue:DeleteJob", 
                "glue:GetConnection", 
                "glue:GetConnections", 
                "glue:GetDevEndpoint", 
                "glue:GetDevEndpoints", 
                "glue:GetJob", 
                "glue:GetJobs", 
                "glue:UpdateJob", 
                "glue:BatchDeleteConnection", 
                "glue:UpdateConnection", 
                "glue:GetUserDefinedFunction", 
                "glue:UpdateUserDefinedFunction", 
                "glue:GetUserDefinedFunctions", 
                "glue:DeleteUserDefinedFunction", 
                "glue:CreateUserDefinedFunction", 
                "glue:BatchGetPartition", 
                "glue:BatchDeletePartition", 
                "glue:BatchCreatePartition", 
                "glue:BatchDeleteTable", 
                "glue:UpdateDevEndpoint", 
                "s3:GetBucketLocation", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketAcl"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::crawler-public*", 
                "arn:aws:s3:::aws-glue*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:PutObject", 
                "s3:DeleteObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:network-interface/*", 
                "arn:aws:ec2:*:*:security-group/*", 
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringEquals": {
                    "aws:TagKeys": [
                        "aws-glue-service-resource"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonEC2SpotFleetRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeInstanceStatus", 
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterTargets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDataPipeline_PowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:List*", 
                "dynamodb:DescribeTable", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "sns:ListTopics", 
                "iam:ListRoles", 
                "iam:GetRolePolicy", 
                "iam:GetInstanceProfile", 
                "iam:ListInstanceProfiles", 
                "datapipeline:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultRole"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderJobsSubmitter
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elastictranscoder:Read*", 
                "elastictranscoder:List*", 
                "elastictranscoder:*Job", 
                "elastictranscoder:*Preset", 
                "s3:List*", 
                "iam:List*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeStarServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "events:PutTargets", 
                "events:RemoveTargets", 
                "events:PutRule", 
                "events:DeleteRule", 
                "events:DescribeRule"
            ], 
            "Resource": [
                "arn:aws:events:*:*:rule/awscodestar-*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectEventRules"
        }, 
        {
            "Action": [
                "cloudformation:*Stack*", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:ExecuteChangeSet", 
                "cloudformation:DeleteChangeSet", 
                "cloudformation:GetTemplate"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awscodestar-*", 
                "arn:aws:cloudformation:*:*:stack/awseb-*", 
                "arn:aws:cloudformation:*:*:stack/aws-cloud9-*", 
                "arn:aws:cloudformation:*:aws:transform/CodeStar*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectStack"
        }, 
        {
            "Action": [
                "cloudformation:GetTemplateSummary", 
                "cloudformation:DescribeChangeSet"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ProjectStackTemplate"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::awscodestar-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectQuickstarts"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-codestar-*", 
                "arn:aws:s3:::aws-codestar-*/*", 
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectS3Buckets"
        }, 
        {
            "Action": [
                "codestar:*", 
                "codecommit:*", 
                "codepipeline:*", 
                "codedeploy:*", 
                "codebuild:*", 
                "ec2:RunInstances", 
                "autoscaling:*", 
                "cloudwatch:Put*", 
                "ec2:*", 
                "elasticbeanstalk:*", 
                "elasticloadbalancing:*", 
                "iam:ListRoles", 
                "logs:*", 
                "sns:*", 
                "cloud9:CreateEnvironmentEC2", 
                "cloud9:DeleteEnvironment", 
                "cloud9:DescribeEnvironment*", 
                "cloud9:ListEnvironments"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ProjectServices"
        }, 
        {
            "Action": [
                "iam:AttachRolePolicy", 
                "iam:CreateRole", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:DetachRolePolicy", 
                "iam:GetRole", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:SetDefaultPolicyVersion", 
                "iam:CreatePolicy", 
                "iam:DeletePolicy", 
                "iam:AddRoleToInstanceProfile", 
                "iam:CreateInstanceProfile", 
                "iam:DeleteInstanceProfile", 
                "iam:RemoveRoleFromInstanceProfile"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/CodeStarWorker*", 
                "arn:aws:iam::*:policy/CodeStarWorker*", 
                "arn:aws:iam::*:instance-profile/awscodestar-*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectWorkerRoles"
        }, 
        {
            "Action": [
                "iam:AttachUserPolicy", 
                "iam:DetachUserPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "ArnEquals": {
                    "iam:PolicyArn": [
                        "arn:aws:iam::*:policy/CodeStar_*"
                    ]
                }
            }, 
            "Sid": "ProjectTeamMembers"
        }, 
        {
            "Action": [
                "iam:CreatePolicy", 
                "iam:DeletePolicy", 
                "iam:CreatePolicyVersion", 
                "iam:DeletePolicyVersion", 
                "iam:ListEntitiesForPolicy", 
                "iam:ListPolicyVersions"
            ], 
            "Resource": [
                "arn:aws:iam::*:policy/CodeStar_*"
            ], 
            "Effect": "Allow", 
            "Sid": "ProjectRoles"
        }, 
        {
            "Action": [
                "iam:ListAttachedRolePolicies"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-codestar-service-role", 
                "arn:aws:iam::*:role/service-role/aws-codestar-service-role"
            ], 
            "Effect": "Allow", 
            "Sid": "InspectServiceRole"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "cloud9.amazonaws.com"
                }
            }, 
            "Sid": "IAMLinkRole"
        }, 
        {
            "Action": [
                "config:DescribeConfigRules"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DescribeConfigRuleForARN"
        }
    ]
}
Policy Name: AmazonTranscribeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "transcribe:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::*transcribe*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDirectoryServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:*", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:SetTopicAttributes", 
                "sns:Subscribe", 
                "sns:Unsubscribe"
            ], 
            "Resource": "arn:aws:sns:*:*:DirectoryMonitoring*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDynamoDBFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:*", 
                "dax:*", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget", 
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarmHistory", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics", 
                "cloudwatch:PutMetricAlarm", 
                "datapipeline:ActivatePipeline", 
                "datapipeline:CreatePipeline", 
                "datapipeline:DeletePipeline", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:PutPipelineDefinition", 
                "datapipeline:QueryObjects", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "iam:GetRole", 
                "iam:ListRoles", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sns:SetTopicAttributes", 
                "lambda:CreateFunction", 
                "lambda:ListFunctions", 
                "lambda:ListEventSourceMappings", 
                "lambda:CreateEventSourceMapping", 
                "lambda:DeleteEventSourceMapping", 
                "lambda:GetFunctionConfiguration", 
                "lambda:DeleteFunction"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "application-autoscaling.amazonaws.com", 
                        "dax.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": [
                        "replication.dynamodb.amazonaws.com", 
                        "dax.amazonaws.com", 
                        "dynamodb.application-autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonSESReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ses:Get*", 
                "ses:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSWAFReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "waf:Get*", 
                "waf:List*", 
                "waf-regional:Get*", 
                "waf-regional:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingNotificationAccessRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sqs:SendMessage", 
                "sqs:GetQueueUrl", 
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mechanicalturk:Get*", 
                "mechanicalturk:Search*", 
                "mechanicalturk:List*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaReplicatorInternal
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:DisableReplication"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:*"
            ], 
            "Effect": "Allow", 
            "Sid": "LambdaCreateDeletePermission"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLikeIfExists": {
                    "iam:PassedToService": [
                        "lambda.amazonaws.com", 
                        "lambda.beta.amazonaws.com", 
                        "lambda.gamma.amazonaws.com"
                    ]
                }
            }, 
            "Sid": "IamPassRolePermission"
        }, 
        {
            "Action": [
                "cloudfront:ListDistributionsByLambdaFunction"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudFrontListDistributions"
        }
    ]
}
Policy Name: AmazonKinesisReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesis:Get*", 
                "kinesis:List*", 
                "kinesis:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "codedeploy:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchActionsEC2Access
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:Describe*", 
                "ec2:Describe*", 
                "ec2:RebootInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaDynamoDBExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:DescribeStream", 
                "dynamodb:GetRecords", 
                "dynamodb:GetShardIterator", 
                "dynamodb:ListStreams", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53DomainsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:CreateHostedZone", 
                "route53domains:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElastiCacheReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticache:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRDSServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/rds/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAthenaFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "athena:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "glue:CreateDatabase", 
                "glue:DeleteDatabase", 
                "glue:GetDatabase", 
                "glue:GetDatabases", 
                "glue:UpdateDatabase", 
                "glue:CreateTable", 
                "glue:DeleteTable", 
                "glue:BatchDeleteTable", 
                "glue:UpdateTable", 
                "glue:GetTable", 
                "glue:GetTables", 
                "glue:BatchCreatePartition", 
                "glue:CreatePartition", 
                "glue:DeletePartition", 
                "glue:BatchDeletePartition", 
                "glue:UpdatePartition", 
                "glue:GetPartition", 
                "glue:GetPartitions", 
                "glue:BatchGetPartition"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts", 
                "s3:AbortMultipartUpload", 
                "s3:CreateBucket", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-athena-query-results-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::athena-examples*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkCrowdFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "crowd:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "CrowdApiFullAccess"
        }
    ]
}
Policy Name: AmazonElasticFileSystemReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "elasticfilesystem:Describe*", 
                "kms:ListAliases"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudFrontFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "arn:aws:s3:::*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "acm:ListCertificates", 
                "cloudfront:*", 
                "iam:ListServerCertificates", 
                "waf:ListWebACLs", 
                "waf:GetWebACL"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9Administrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloud9:*", 
                "iam:GetUser", 
                "iam:ListUsers", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "cloud9.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonMachineLearningRoleforRedshiftDataSource
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:RevokeSecurityGroupIngress", 
                "redshift:AuthorizeClusterSecurityGroupIngress", 
                "redshift:CreateClusterSecurityGroup", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "redshift:ModifyCluster", 
                "redshift:RevokeClusterSecurityGroupIngress", 
                "s3:GetBucketLocation", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:PutBucketPolicy", 
                "s3:PutObject"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingEMRInstanceGroupPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticmapreduce:ListInstanceGroups", 
                "elasticmapreduce:ModifyInstanceGroups", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOrganizationsServiceTrustPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:DeleteRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/organizations.amazonaws.com/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDeletionOfServiceLinkedRoleForOrganizations"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowCreationOfServiceLinkedRoles"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsNon-financialReportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "mobileanalytics:GetReports", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudTrailFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:AddPermission", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListTopics", 
                "sns:SetTopicAttributes", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:ListAllMyBuckets", 
                "s3:PutBucketPolicy", 
                "s3:ListBucket", 
                "s3:GetObject", 
                "s3:GetBucketLocation", 
                "s3:GetBucketPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "cloudtrail:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole", 
                "iam:ListRoles", 
                "iam:GetRolePolicy", 
                "iam:GetUser"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kms:ListKeys", 
                "kms:ListAliases"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCognitoDeveloperAuthenticatedIdentities
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-identity:GetOpenIdTokenForDeveloperIdentity", 
                "cognito-identity:LookupDeveloperIdentity", 
                "cognito-identity:MergeDeveloperIdentities", 
                "cognito-identity:UnlinkDeveloperIdentity"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudtrail:DescribeTrails", 
                "ec2:Describe*", 
                "config:Put*", 
                "config:Get*", 
                "config:List*", 
                "config:Describe*", 
                "cloudtrail:GetTrailStatus", 
                "s3:GetObject", 
                "iam:GetAccountAuthorizationDetails", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetGroup", 
                "iam:GetGroupPolicy", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:GetUser", 
                "iam:GetUserPolicy", 
                "iam:ListAttachedGroupPolicies", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListAttachedUserPolicies", 
                "iam:ListEntitiesForPolicy", 
                "iam:ListGroupPolicies", 
                "iam:ListGroupsForUser", 
                "iam:ListInstanceProfilesForRole", 
                "iam:ListPolicyVersions", 
                "iam:ListRolePolicies", 
                "iam:ListUserPolicies", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeLoadBalancerAttributes", 
                "elasticloadbalancing:DescribeLoadBalancerPolicies", 
                "elasticloadbalancing:DescribeTags", 
                "acm:DescribeCertificate", 
                "acm:ListCertificates", 
                "acm:ListTagsForCertificate", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "rds:DescribeDBSnapshotAttributes", 
                "rds:DescribeDBSnapshots", 
                "rds:DescribeDBSubnetGroups", 
                "rds:DescribeEventSubscriptions", 
                "rds:ListTagsForResource", 
                "rds:DescribeDBClusters", 
                "s3:GetAccelerateConfiguration", 
                "s3:GetBucketAcl", 
                "s3:GetBucketCORS", 
                "s3:GetBucketLocation", 
                "s3:GetBucketLogging", 
                "s3:GetBucketNotification", 
                "s3:GetBucketPolicy", 
                "s3:GetBucketRequestPayment", 
                "s3:GetBucketTagging", 
                "s3:GetBucketVersioning", 
                "s3:GetBucketWebsite", 
                "s3:GetLifecycleConfiguration", 
                "s3:GetReplicationConfiguration", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "redshift:DescribeClusterParameterGroups", 
                "redshift:DescribeClusterParameters", 
                "redshift:DescribeClusterSecurityGroups", 
                "redshift:DescribeClusterSnapshots", 
                "redshift:DescribeClusterSubnetGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeEventSubscriptions", 
                "redshift:DescribeLoggingStatus", 
                "dynamodb:DescribeLimits", 
                "dynamodb:DescribeTable", 
                "dynamodb:ListTables", 
                "dynamodb:ListTagsOfResource", 
                "cloudwatch:DescribeAlarms", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingPolicies", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLaunchConfigurations", 
                "autoscaling:DescribeLifecycleHooks", 
                "autoscaling:DescribePolicies", 
                "autoscaling:DescribeScheduledActions", 
                "autoscaling:DescribeTags", 
                "lambda:GetFunction", 
                "lambda:GetPolicy", 
                "lambda:ListFunctions", 
                "lambda:GetAlias", 
                "lambda:ListAliases", 
                "waf-regional:GetWebACLForResource", 
                "waf-regional:GetWebACL", 
                "cloudfront:ListTagsForResource"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingAppStreamFleetPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:UpdateFleet", 
                "appstream:DescribeFleets", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSGlueServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glue:*", 
                "s3:GetBucketLocation", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketAcl", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeRouteTables", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "iam:ListRolePolicies", 
                "iam:GetRole", 
                "iam:GetRolePolicy"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*/*", 
                "arn:aws:s3:::*/*aws-glue-*/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::crawler-public*", 
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:/aws-glue/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:network-interface/*", 
                "arn:aws:ec2:*:*:security-group/*", 
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringEquals": {
                    "aws:TagKeys": [
                        "aws-glue-service-resource"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonAppStreamServiceAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeSubnets", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:ListBucket", 
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject", 
                "s3:GetObjectVersion", 
                "s3:DeleteObjectVersion", 
                "s3:PutBucketPolicy"
            ], 
            "Resource": "arn:aws:s3:::appstream2-36fb080bb8-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRedshiftFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "redshift:*", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "sns:CreateTopic", 
                "sns:Get*", 
                "sns:List*", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:EnableAlarmActions", 
                "cloudwatch:DisableAlarmActions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/redshift.amazonaws.com/AWSServiceRoleForRedshift", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "redshift.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonZocaloReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "zocalo:Describe*", 
                "ds:DescribeDirectories", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudHSMReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudhsm:Get*", 
                "cloudhsm:List*", 
                "cloudhsm:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ComprehendFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "comprehend:*", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "iam:ListRoles", 
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: SystemAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:Describe*", 
                "acm:Get*", 
                "acm:List*", 
                "acm:Request*", 
                "acm:Resend*", 
                "autoscaling:*", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:ListPublicKeys", 
                "cloudtrail:ListTags", 
                "cloudtrail:LookupEvents", 
                "cloudtrail:StartLogging", 
                "cloudtrail:StopLogging", 
                "cloudwatch:*", 
                "codecommit:BatchGetRepositories", 
                "codecommit:CreateBranch", 
                "codecommit:CreateRepository", 
                "codecommit:Get*", 
                "codecommit:GitPull", 
                "codecommit:GitPush", 
                "codecommit:List*", 
                "codecommit:Put*", 
                "codecommit:Test*", 
                "codecommit:Update*", 
                "codedeploy:*", 
                "codepipeline:*", 
                "config:*", 
                "ds:*", 
                "ec2:Allocate*", 
                "ec2:AssignPrivateIpAddresses*", 
                "ec2:Associate*", 
                "ec2:Allocate*", 
                "ec2:AttachInternetGateway", 
                "ec2:AttachNetworkInterface", 
                "ec2:AttachVpnGateway", 
                "ec2:Bundle*", 
                "ec2:Cancel*", 
                "ec2:Copy*", 
                "ec2:CreateCustomerGateway", 
                "ec2:CreateDhcpOptions", 
                "ec2:CreateFlowLogs", 
                "ec2:CreateImage", 
                "ec2:CreateInstanceExportTask", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateKeyPair", 
                "ec2:CreateNatGateway", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreatePlacementGroup", 
                "ec2:CreateReservedInstancesListing", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSnapshot", 
                "ec2:CreateSpotDatafeedSubscription", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:CreateVpc", 
                "ec2:CreateVpcEndpoint", 
                "ec2:CreateVpnConnection", 
                "ec2:CreateVpnConnectionRoute", 
                "ec2:CreateVpnGateway", 
                "ec2:DeleteFlowLogs", 
                "ec2:DeleteKeyPair", 
                "ec2:DeleteNatGateway", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeletePlacementGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteSpotDatafeedSubscription", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteTags", 
                "ec2:DeleteVpc", 
                "ec2:DeleteVpcEndpoints", 
                "ec2:DeleteVpnConnection", 
                "ec2:DeleteVpnConnectionRoute", 
                "ec2:DeleteVpnGateway", 
                "ec2:DeregisterImage", 
                "ec2:Describe*", 
                "ec2:DetachInternetGateway", 
                "ec2:DetachNetworkInterface", 
                "ec2:DetachVpnGateway", 
                "ec2:DisableVgwRoutePropagation", 
                "ec2:DisableVpcClassicLinkDnsSupport", 
                "ec2:DisassociateAddress", 
                "ec2:DisassociateRouteTable", 
                "ec2:EnableVgwRoutePropagation", 
                "ec2:EnableVolumeIO", 
                "ec2:EnableVpcClassicLinkDnsSupport", 
                "ec2:GetConsoleOutput", 
                "ec2:GetHostReservationPurchasePreview", 
                "ec2:GetPasswordData", 
                "ec2:Import*", 
                "ec2:Modify*", 
                "ec2:MonitorInstances", 
                "ec2:MoveAddressToVpc", 
                "ec2:Purchase*", 
                "ec2:RegisterImage", 
                "ec2:Release*", 
                "ec2:Replace*", 
                "ec2:ReportInstanceStatus", 
                "ec2:Request*", 
                "ec2:Reset*", 
                "ec2:RestoreAddressToClassic", 
                "ec2:RunScheduledInstances", 
                "ec2:UnassignPrivateIpAddresses", 
                "ec2:UnmonitorInstances", 
                "elasticloadbalancing:*", 
                "events:*", 
                "iam:GetAccount*", 
                "iam:GetContextKeys*", 
                "iam:GetCredentialReport", 
                "iam:ListAccountAliases", 
                "iam:ListGroups", 
                "iam:ListOpenIDConnectProviders", 
                "iam:ListPolicies", 
                "iam:ListPoliciesGrantingServiceAccess", 
                "iam:ListRoles", 
                "iam:ListSAMLProviders", 
                "iam:ListServerCertificates", 
                "iam:Simulate*", 
                "iam:UpdateServerCertificate", 
                "iam:UpdateSigningCertificate", 
                "kinesis:ListStreams", 
                "kinesis:PutRecord", 
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:Describe*", 
                "kms:GenerateRandom", 
                "kms:Get*", 
                "kms:List*", 
                "kms:Encrypt", 
                "kms:ReEncrypt*", 
                "lambda:Create*", 
                "lambda:Delete*", 
                "lambda:Get*", 
                "lambda:InvokeFunction", 
                "lambda:List*", 
                "lambda:PublishVersion", 
                "lambda:Update*", 
                "logs:*", 
                "rds:Describe*", 
                "rds:ListTagsForResource", 
                "route53:*", 
                "route53domains:*", 
                "ses:*", 
                "sns:*", 
                "sqs:*", 
                "trustedadvisor:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AcceptVpcPeeringConnection", 
                "ec2:AttachClassicLinkVpc", 
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateVpcPeeringConnection", 
                "ec2:DeleteCustomerGateway", 
                "ec2:DeleteDhcpOptions", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteNetworkAcl*", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteVolume", 
                "ec2:DeleteVpcPeeringConnection", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:DetachVolume", 
                "ec2:DisableVpcClassicLink", 
                "ec2:EnableVpcClassicLink", 
                "ec2:GetConsoleScreenshot", 
                "ec2:RebootInstances", 
                "ec2:RejectVpcPeeringConnection", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "s3:*", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetAccessKeyLastUsed", 
                "iam:GetGroup*", 
                "iam:GetInstanceProfile", 
                "iam:GetLoginProfile", 
                "iam:GetOpenIDConnectProvider", 
                "iam:GetPolicy*", 
                "iam:GetRole*", 
                "iam:GetSAMLProvider", 
                "iam:GetSSHPublicKey", 
                "iam:GetServerCertificate", 
                "iam:GetServiceLastAccessed*", 
                "iam:GetUser*", 
                "iam:ListAccessKeys", 
                "iam:ListAttached*", 
                "iam:ListEntitiesForPolicy", 
                "iam:ListGroupPolicies", 
                "iam:ListGroupsForUser", 
                "iam:ListInstanceProfiles*", 
                "iam:ListMFADevices", 
                "iam:ListPolicyVersions", 
                "iam:ListRolePolicies", 
                "iam:ListSSHPublicKeys", 
                "iam:ListSigningCertificates", 
                "iam:ListUserPolicies", 
                "iam:Upload*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:ListRoles", 
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/rds-monitoring-role", 
                "arn:aws:iam::*:role/ec2-sysadmin-*", 
                "arn:aws:iam::*:role/ecr-sysadmin-*", 
                "arn:aws:iam::*:role/lamdba-sysadmin-*", 
                "arn:aws:iam::*:role/lambda-sysadmin-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceEventsRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:RunTask"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:Get*", 
                "route53:List*", 
                "route53:TestDNSAnswer"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMigrationHubDiscoveryAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "discovery:ListConfigurations", 
                "discovery:DescribeConfigurations"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ReportsAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "ec2-reports:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceAutoscaleRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:DescribeServices", 
                "ecs:UpdateService"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncSchemaAuthor
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appsync:GraphQL", 
                "appsync:CreateResolver", 
                "appsync:CreateType", 
                "appsync:DeleteResolver", 
                "appsync:DeleteType", 
                "appsync:GetResolver", 
                "appsync:GetType", 
                "appsync:GetDataSource", 
                "appsync:GetSchemaCreationStatus", 
                "appsync:GetIntrospectionSchema", 
                "appsync:GetGraphqlApi", 
                "appsync:ListTypes", 
                "appsync:ListApiKeys", 
                "appsync:ListResolvers", 
                "appsync:ListDataSources", 
                "appsync:ListGraphqlApis", 
                "appsync:StartSchemaCreation", 
                "appsync:UpdateResolver", 
                "appsync:UpdateType"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AlexaForBusinessDeviceSetup
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "a4b:RegisterDevice", 
                "a4b:CompleteRegistration", 
                "a4b:SearchDevices"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSBatchServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeImages", 
                "ec2:DescribeImageAttribute", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSpotFleetInstances", 
                "ec2:DescribeSpotFleetRequests", 
                "ec2:DescribeSpotPriceHistory", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:RequestSpotFleet", 
                "ec2:CancelSpotFleetRequests", 
                "ec2:ModifySpotFleetRequest", 
                "ec2:TerminateInstances", 
                "autoscaling:DescribeAccountLimits", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLaunchConfigurations", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:CreateLaunchConfiguration", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:UpdateAutoScalingGroup", 
                "autoscaling:SetDesiredCapacity", 
                "autoscaling:DeleteLaunchConfiguration", 
                "autoscaling:DeleteAutoScalingGroup", 
                "autoscaling:CreateOrUpdateTags", 
                "autoscaling:SuspendProcesses", 
                "autoscaling:PutNotificationConfiguration", 
                "autoscaling:TerminateInstanceInAutoScalingGroup", 
                "ecs:DescribeClusters", 
                "ecs:DescribeContainerInstances", 
                "ecs:DescribeTaskDefinition", 
                "ecs:DescribeTasks", 
                "ecs:ListClusters", 
                "ecs:ListContainerInstances", 
                "ecs:ListTaskDefinitionFamilies", 
                "ecs:ListTaskDefinitions", 
                "ecs:ListTasks", 
                "ecs:CreateCluster", 
                "ecs:DeleteCluster", 
                "ecs:RegisterTaskDefinition", 
                "ecs:DeregisterTaskDefinition", 
                "ecs:RunTask", 
                "ecs:StartTask", 
                "ecs:StopTask", 
                "ecs:UpdateContainerAgent", 
                "ecs:DeregisterContainerInstance", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogGroups", 
                "iam:GetInstanceProfile", 
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ecs-tasks.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": [
                        "spot.amazonaws.com", 
                        "spotfleet.amazonaws.com", 
                        "autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AWSElasticBeanstalkWebTier
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:Get*", 
                "s3:List*", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "BucketAccess"
        }, 
        {
            "Action": [
                "xray:PutTraceSegments", 
                "xray:PutTelemetryRecords"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "XRayAccess"
        }, 
        {
            "Action": [
                "logs:PutLogEvents", 
                "logs:CreateLogStream", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudWatchLogsAccess"
        }
    ]
}
Policy Name: AmazonSQSReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sqs:GetQueueAttributes", 
                "sqs:ListQueues"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMobileHub_ServiceUseOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateUploadBucket", 
                "cloudformation:ListStacks", 
                "cloudformation:ValidateTemplate", 
                "cloudfront:CreateDistribution", 
                "cloudfront:DeleteDistribution", 
                "cloudfront:GetDistribution", 
                "cloudfront:GetDistributionConfig", 
                "cloudfront:TagResource", 
                "cloudfront:UpdateDistribution", 
                "cognito-identity:CreateIdentityPool", 
                "cognito-identity:UpdateIdentityPool", 
                "cognito-identity:DeleteIdentityPool", 
                "cognito-identity:SetIdentityPoolRoles", 
                "cognito-idp:CreateUserPool", 
                "dynamodb:CreateTable", 
                "dynamodb:DeleteTable", 
                "dynamodb:DescribeTable", 
                "dynamodb:TagResource", 
                "dynamodb:UpdateTable", 
                "iam:AddClientIDToOpenIDConnectProvider", 
                "iam:CreateOpenIDConnectProvider", 
                "iam:GetOpenIDConnectProvider", 
                "iam:ListOpenIDConnectProviders", 
                "iam:CreateSAMLProvider", 
                "iam:GetSAMLProvider", 
                "iam:ListSAMLProvider", 
                "iam:UpdateSAMLProvider", 
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:GetFunction", 
                "mobileanalytics:CreateApp", 
                "mobileanalytics:DeleteApp", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListPlatformApplications", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "lex:PutIntent", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:PutSlotType", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:PutBot", 
                "lex:GetBot", 
                "lex:GetBots", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:CreatePlatformApplication", 
                "sns:DeletePlatformApplication", 
                "sns:GetPlatformApplicationAttributes", 
                "sns:SetPlatformApplicationAttributes"
            ], 
            "Resource": [
                "arn:aws:sns:*:*:app/*_MOBILEHUB_*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteBucketPolicy", 
                "s3:DeleteBucketWebsite", 
                "s3:ListBucket", 
                "s3:ListBucketVersions", 
                "s3:GetBucketLocation", 
                "s3:GetBucketVersioning", 
                "s3:PutBucketVersioning", 
                "s3:PutBucketWebsite", 
                "s3:PutBucketPolicy", 
                "s3:PutBucketTagging", 
                "s3:PutBucketCORS", 
                "s3:SetBucketCrossOriginConfiguration"
            ], 
            "Resource": [
                "arn:aws:s3:::*-userfiles-mobilehub-*", 
                "arn:aws:s3:::*-contentdelivery-mobilehub-*", 
                "arn:aws:s3:::*-hosting-mobilehub-*", 
                "arn:aws:s3:::*-deployments-mobilehub-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:DeleteObject", 
                "s3:DeleteVersion", 
                "s3:DeleteObjectVersion", 
                "s3:GetObject", 
                "s3:GetObjectVersion", 
                "s3:PutObject", 
                "s3:PutObjectAcl"
            ], 
            "Resource": [
                "arn:aws:s3:::*-userfiles-mobilehub-*/*", 
                "arn:aws:s3:::*-contentdelivery-mobilehub-*/*", 
                "arn:aws:s3:::*-hosting-mobilehub-*/*", 
                "arn:aws:s3:::*-deployments-mobilehub-*/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:AddPermission", 
                "lambda:CreateAlias", 
                "lambda:DeleteAlias", 
                "lambda:UpdateAlias", 
                "lambda:GetFunctionConfiguration", 
                "lambda:GetPolicy", 
                "lambda:RemovePermission", 
                "lambda:UpdateFunctionCode", 
                "lambda:UpdateFunctionConfiguration"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:*-mobilehub-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateRole", 
                "iam:DeleteRole", 
                "iam:DeleteRolePolicy", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListRolePolicies", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:UpdateAssumeRolePolicy", 
                "iam:AttachRolePolicy", 
                "iam:DetachRolePolicy"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/*_unauth_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_auth_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_consolepush_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_lambdaexecutionrole_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_smsverification_MOBILEHUB_*", 
                "arn:aws:iam::*:role/*_botexecutionrole_MOBILEHUB_*", 
                "arn:aws:iam::*:role/pinpoint-events", 
                "arn:aws:iam::*:role/service-role/pinpoint-events", 
                "arn:aws:iam::*:role/MOBILEHUB-*-lambdaexecution*", 
                "arn:aws:iam::*:role/MobileHub_Service_Role"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole", 
                "iam:GetRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/mobilehub/*:log-stream:*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListAttachedRolePolicies"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/MobileHub_Service_Role"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStacks", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStackResource", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStackResources", 
                "cloudformation:UpdateStack"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/MOBILEHUB-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "apigateway:DELETE", 
                "apigateway:GET", 
                "apigateway:HEAD", 
                "apigateway:OPTIONS", 
                "apigateway:PATCH", 
                "apigateway:POST", 
                "apigateway:PUT"
            ], 
            "Resource": [
                "arn:aws:apigateway:*::/restapis*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "apigateway:GET", 
                "apigateway:HEAD", 
                "apigateway:OPTIONS"
            ], 
            "Resource": [
                "arn:aws:apigateway:*::/domainnames*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cognito-idp:DeleteUserPool", 
                "cognito-idp:DescribeUserPool", 
                "cognito-idp:CreateUserPoolClient", 
                "cognito-idp:DescribeUserPoolClient", 
                "cognito-idp:DeleteUserPoolClient"
            ], 
            "Resource": [
                "arn:aws:cognito-idp:*:*:userpool/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mobiletargeting:UpdateApnsChannel", 
                "mobiletargeting:UpdateApnsSandboxChannel", 
                "mobiletargeting:UpdateEmailChannel", 
                "mobiletargeting:UpdateGcmChannel", 
                "mobiletargeting:UpdateSmsChannel", 
                "mobiletargeting:DeleteApnsChannel", 
                "mobiletargeting:DeleteApnsSandboxChannel", 
                "mobiletargeting:DeleteEmailChannel", 
                "mobiletargeting:DeleteGcmChannel", 
                "mobiletargeting:DeleteSmsChannel"
            ], 
            "Resource": [
                "arn:aws:mobiletargeting:*:*:apps/*/channels/*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonChimeFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "chime:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticLoadBalancingClassicServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAddresses", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:AttachNetworkInterface", 
                "ec2:DetachNetworkInterface", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssignIpv6Addresses", 
                "ec2:UnassignIpv6Addresses"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMigrationHubDMSAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:CreateProgressUpdateStream"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:AssociateCreatedArtifact", 
                "mgh:DescribeMigrationTask", 
                "mgh:DisassociateCreatedArtifact", 
                "mgh:ImportMigrationTask", 
                "mgh:ListCreatedArtifacts", 
                "mgh:NotifyMigrationTaskState", 
                "mgh:PutResourceAttributes", 
                "mgh:NotifyApplicationState", 
                "mgh:DescribeApplicationState", 
                "mgh:AssociateDiscoveredResource", 
                "mgh:DisassociateDiscoveredResource", 
                "mgh:ListDiscoveredResources"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:ListMigrationTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "kinesis:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGuardDutyReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "guardduty:GetDetector", 
                "guardduty:ListDetectors", 
                "guardduty:GetIPSet", 
                "guardduty:ListIPSets", 
                "guardduty:GetThreatIntelSet", 
                "guardduty:ListThreatIntelSets", 
                "guardduty:GetFindings", 
                "guardduty:GetFindingsStatistics", 
                "guardduty:ListFindings", 
                "guardduty:GetMembers", 
                "guardduty:ListMembers", 
                "guardduty:GetMasterAccount", 
                "guardduty:ListInvitations", 
                "guardduty:GetInvitationsCount"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowAllUsersToViewAndManageThisGroup"
        }
    ]
}
Policy Name: AmazonECSServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AttachNetworkInterface", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:Describe*", 
                "ec2:DetachNetworkInterface", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DeregisterTargets", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:RegisterTargets", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateHealthCheck", 
                "route53:DeleteHealthCheck", 
                "route53:Get*", 
                "route53:List*", 
                "route53:UpdateHealthCheck", 
                "servicediscovery:DeregisterInstance", 
                "servicediscovery:Get*", 
                "servicediscovery:List*", 
                "servicediscovery:RegisterInstance", 
                "servicediscovery:UpdateInstanceCustomHealthStatus"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:Describe*", 
                "machinelearning:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRekognitionFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rekognition:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: RDSCloudHsmAuthorizationRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudhsm:CreateLunaClient", 
                "cloudhsm:GetClientConfiguration", 
                "cloudhsm:DeleteLunaClient", 
                "cloudhsm:DescribeLunaClient", 
                "cloudhsm:ModifyLunaClient", 
                "cloudhsm:DescribeHapg", 
                "cloudhsm:ModifyHapg", 
                "cloudhsm:GetConfig"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AdministratorAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningRealTimePredictionOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:Predict"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncPushToCloudWatchLogs
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMigrationHubSMSAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:CreateProgressUpdateStream"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:AssociateCreatedArtifact", 
                "mgh:DescribeMigrationTask", 
                "mgh:DisassociateCreatedArtifact", 
                "mgh:ImportMigrationTask", 
                "mgh:ListCreatedArtifacts", 
                "mgh:NotifyMigrationTaskState", 
                "mgh:PutResourceAttributes", 
                "mgh:NotifyApplicationState", 
                "mgh:DescribeApplicationState", 
                "mgh:AssociateDiscoveredResource", 
                "mgh:DisassociateDiscoveredResource", 
                "mgh:ListDiscoveredResources"
            ], 
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "mgh:ListMigrationTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigUserAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "config:Get*", 
                "config:Describe*", 
                "config:Deliver*", 
                "config:List*", 
                "tag:GetResources", 
                "tag:GetTagKeys", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:LookupEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTConfigAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:AcceptCertificateTransfer", 
                "iot:AddThingToThingGroup", 
                "iot:AssociateTargetsWithJob", 
                "iot:AttachPolicy", 
                "iot:AttachPrincipalPolicy", 
                "iot:AttachThingPrincipal", 
                "iot:CancelCertificateTransfer", 
                "iot:CancelJob", 
                "iot:ClearDefaultAuthorizer", 
                "iot:CreateAuthorizer", 
                "iot:CreateCertificateFromCsr", 
                "iot:CreateJob", 
                "iot:CreateKeysAndCertificate", 
                "iot:CreateOTAUpdate", 
                "iot:CreatePolicy", 
                "iot:CreatePolicyVersion", 
                "iot:CreateRoleAlias", 
                "iot:CreateStream", 
                "iot:CreateThing", 
                "iot:CreateThingGroup", 
                "iot:CreateThingType", 
                "iot:CreateTopicRule", 
                "iot:DeleteAuthorizer", 
                "iot:DeleteCACertificate", 
                "iot:DeleteCertificate", 
                "iot:DeleteOTAUpdate", 
                "iot:DeletePolicy", 
                "iot:DeletePolicyVersion", 
                "iot:DeleteRegistrationCode", 
                "iot:DeleteRoleAlias", 
                "iot:DeleteStream", 
                "iot:DeleteThing", 
                "iot:DeleteThingGroup", 
                "iot:DeleteThingType", 
                "iot:DeleteTopicRule", 
                "iot:DeleteV2LoggingLevel", 
                "iot:DeprecateThingType", 
                "iot:DescribeAuthorizer", 
                "iot:DescribeCACertificate", 
                "iot:DescribeCertificate", 
                "iot:DescribeCertificateTag", 
                "iot:DescribeDefaultAuthorizer", 
                "iot:DescribeEndpoint", 
                "iot:DescribeEventConfigurations", 
                "iot:DescribeIndex", 
                "iot:DescribeJob", 
                "iot:DescribeJobExecution", 
                "iot:DescribeRoleAlias", 
                "iot:DescribeStream", 
                "iot:DescribeThing", 
                "iot:DescribeThingGroup", 
                "iot:DescribeThingRegistrationTask", 
                "iot:DescribeThingType", 
                "iot:DetachPolicy", 
                "iot:DetachPrincipalPolicy", 
                "iot:DetachThingPrincipal", 
                "iot:DisableTopicRule", 
                "iot:EnableTopicRule", 
                "iot:GetEffectivePolicies", 
                "iot:GetIndexingConfiguration", 
                "iot:GetJobDocument", 
                "iot:GetLoggingOptions", 
                "iot:GetOTAUpdate", 
                "iot:GetPolicy", 
                "iot:GetPolicyVersion", 
                "iot:GetRegistrationCode", 
                "iot:GetTopicRule", 
                "iot:GetV2LoggingOptions", 
                "iot:ListAttachedPolicies", 
                "iot:ListAuthorizers", 
                "iot:ListCACertificates", 
                "iot:ListCertificates", 
                "iot:ListCertificatesByCA", 
                "iot:ListIndices", 
                "iot:ListJobExecutionsForJob", 
                "iot:ListJobExecutionsForThing", 
                "iot:ListJobs", 
                "iot:ListOTAUpdates", 
                "iot:ListOutgoingCertificates", 
                "iot:ListPolicies", 
                "iot:ListPolicyPrincipals", 
                "iot:ListPolicyVersions", 
                "iot:ListPrincipalPolicies", 
                "iot:ListPrincipalThings", 
                "iot:ListRoleAliases", 
                "iot:ListStreams", 
                "iot:ListTargetsForPolicy", 
                "iot:ListThingGroups", 
                "iot:ListThingGroupsForThing", 
                "iot:ListThingPrincipals", 
                "iot:ListThingRegistrationTaskReports", 
                "iot:ListThingRegistrationTasks", 
                "iot:ListThings", 
                "iot:ListThingsInThingGroup", 
                "iot:ListThingTypes", 
                "iot:ListTopicRules", 
                "iot:ListV2LoggingLevels", 
                "iot:RegisterCACertificate", 
                "iot:RegisterCertificate", 
                "iot:RegisterThing", 
                "iot:RejectCertificateTransfer", 
                "iot:RemoveThingFromThingGroup", 
                "iot:ReplaceTopicRule", 
                "iot:SearchIndex", 
                "iot:SetDefaultAuthorizer", 
                "iot:SetDefaultPolicyVersion", 
                "iot:SetLoggingOptions", 
                "iot:SetV2LoggingLevel", 
                "iot:SetV2LoggingOptions", 
                "iot:StartThingRegistrationTask", 
                "iot:StopThingRegistrationTask", 
                "iot:TestAuthorization", 
                "iot:TestInvokeAuthorizer", 
                "iot:TransferCertificate", 
                "iot:UpdateAuthorizer", 
                "iot:UpdateCACertificate", 
                "iot:UpdateCertificate", 
                "iot:UpdateCertificateTag", 
                "iot:UpdateEventConfigurations", 
                "iot:UpdateIndexingConfiguration", 
                "iot:UpdateRoleAlias", 
                "iot:UpdateStream", 
                "iot:UpdateThing", 
                "iot:UpdateThingGroup", 
                "iot:UpdateThingGroupsForThing"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: SecurityAudit
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:DescribeCertificate", 
                "acm:ListCertificates", 
                "autoscaling:Describe*", 
                "batch:DescribeComputeEnvironments", 
                "batch:DescribeJobDefinitions", 
                "clouddirectory:ListDirectories", 
                "cloudformation:DescribeStack*", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStack*", 
                "cloudformation:GetStackPolicy", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "cloudhsm:ListHapgs", 
                "cloudhsm:ListHsms", 
                "cloudhsm:ListLunaClients", 
                "cloudsearch:DescribeDomains", 
                "cloudsearch:DescribeServiceAccessPolicies", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:ListTags", 
                "cloudwatch:Describe*", 
                "codebuild:ListProjects", 
                "codecommit:BatchGetRepositories", 
                "codecommit:GetBranch", 
                "codecommit:GetObjectIdentifier", 
                "codecommit:GetRepository", 
                "codecommit:List*", 
                "codedeploy:Batch*", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codepipeline:ListPipelines", 
                "cognito-identity:ListIdentityPools", 
                "cognito-idp:ListUserPools", 
                "config:Deliver*", 
                "config:Describe*", 
                "config:Get*", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:EvaluateExpression", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:QueryObjects", 
                "datapipeline:ValidatePipelineDefinition", 
                "directconnect:Describe*", 
                "ds:DescribeDirectories", 
                "dynamodb:ListStreams", 
                "dynamodb:ListTables", 
                "ec2:Describe*", 
                "ecr:DescribeRepositories", 
                "ecr:GetRepositoryPolicy", 
                "ecs:Describe*", 
                "ecs:List*", 
                "elasticache:Describe*", 
                "elasticbeanstalk:Describe*", 
                "elasticfilesystem:DescribeFileSystems", 
                "elasticloadbalancing:Describe*", 
                "elasticmapreduce:DescribeJobFlows", 
                "elasticmapreduce:ListClusters", 
                "elasticmapreduce:ListInstances", 
                "es:Describe*", 
                "es:ListDomainNames", 
                "events:DescribeEventBus", 
                "events:ListRules", 
                "firehose:Describe*", 
                "firehose:List*", 
                "gamelift:ListBuilds", 
                "gamelift:ListFleets", 
                "glacier:DescribeVault", 
                "glacier:GetVaultAccessPolicy", 
                "glacier:ListVaults", 
                "iam:GenerateCredentialReport", 
                "iam:Get*", 
                "iam:List*", 
                "iot:ListThings", 
                "kinesis:ListStreams", 
                "kinesisanalytics:ListApplications", 
                "kms:Describe*", 
                "kms:Get*", 
                "kms:List*", 
                "lambda:GetAccountSettings", 
                "lambda:GetPolicy", 
                "lambda:ListFunctions", 
                "logs:DescribeDestinations", 
                "logs:DescribeLogGroups", 
                "logs:DescribeMetricFilters", 
                "logs:DescribeResourcePolicies", 
                "machinelearning:DescribeMLModels", 
                "mediastore:GetContainerPolicy", 
                "mediastore:ListContainers", 
                "opsworks-cm:DescribeServers", 
                "rds:Describe*", 
                "rds:DownloadDBLogFilePortion", 
                "rds:ListTagsForResource", 
                "redshift:Describe*", 
                "route53:Get*", 
                "route53:List*", 
                "route53domains:GetDomainDetail", 
                "route53domains:GetOperationDetail", 
                "route53domains:ListDomains", 
                "route53domains:ListOperations", 
                "route53domains:ListTagsForDomain", 
                "s3:GetAccelerateConfiguration", 
                "s3:GetAnalyticsConfiguration", 
                "s3:GetBucket*", 
                "s3:GetEncryptionConfiguration", 
                "s3:GetInventoryConfiguration", 
                "s3:GetLifecycleConfiguration", 
                "s3:GetMetricsConfiguration", 
                "s3:GetObjectAcl", 
                "s3:GetObjectVersionAcl", 
                "s3:GetReplicationConfiguration", 
                "s3:ListAllMyBuckets", 
                "sdb:DomainMetadata", 
                "sdb:ListDomains", 
                "serverlessrepo:GetApplicationPolicy", 
                "serverlessrepo:ListApplications", 
                "ses:GetIdentityDkimAttributes", 
                "ses:GetIdentityVerificationAttributes", 
                "ses:ListIdentities", 
                "snowball:ListClusters", 
                "snowball:ListJobs", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sqs:GetQueueAttributes", 
                "sqs:ListQueues", 
                "ssm:DescribeDocumentPermission", 
                "ssm:ListDocuments", 
                "states:ListStateMachines", 
                "storagegateway:DescribeBandwidthRateLimit", 
                "storagegateway:DescribeCache", 
                "storagegateway:DescribeCachediSCSIVolumes", 
                "storagegateway:DescribeGatewayInformation", 
                "storagegateway:DescribeMaintenanceStartTime", 
                "storagegateway:DescribeNFSFileShares", 
                "storagegateway:DescribeSnapshotSchedule", 
                "storagegateway:DescribeStorediSCSIVolumes", 
                "storagegateway:DescribeTapeArchives", 
                "storagegateway:DescribeTapeRecoveryPoints", 
                "storagegateway:DescribeTapes", 
                "storagegateway:DescribeUploadBuffer", 
                "storagegateway:DescribeVTLDevices", 
                "storagegateway:DescribeWorkingStorage", 
                "storagegateway:List*", 
                "tag:GetResources", 
                "tag:GetTagKeys", 
                "trustedadvisor:Describe*", 
                "waf:ListWebACLs", 
                "waf-regional:ListWebACLs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSResourceGroupsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "resource-groups:Describe*", 
                "resource-groups:Get*", 
                "resource-groups:List*", 
                "resource-groups:Search*", 
                "tag:Get*", 
                "cloudformation:DescribeStacks", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeVolumes", 
                "ec2:DescribeVpcs", 
                "elasticache:DescribeCacheClusters", 
                "elasticache:DescribeSnapshots", 
                "elasticache:ListTagsForResource", 
                "elasticbeanstalk:DescribeEnvironments", 
                "elasticmapreduce:DescribeCluster", 
                "elasticmapreduce:ListClusters", 
                "glacier:ListVaults", 
                "glacier:DescribeVault", 
                "glacier:ListTagsForVault", 
                "kinesis:ListStreams", 
                "kinesis:DescribeStream", 
                "kinesis:ListTagsForStream", 
                "opsworks:DescribeStacks", 
                "opsworks:ListTags", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSnapshots", 
                "rds:ListTagsForResource", 
                "redshift:DescribeClusters", 
                "redshift:DescribeTags", 
                "route53domains:ListDomains", 
                "route53:ListHealthChecks", 
                "route53:GetHealthCheck", 
                "route53:ListHostedZones", 
                "route53:GetHostedZone", 
                "route53:ListTagsForResource", 
                "storagegateway:ListGateways", 
                "storagegateway:DescribeGatewayInformation", 
                "storagegateway:ListTagsForResource", 
                "s3:ListAllMyBuckets", 
                "s3:GetBucketTagging", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTags", 
                "ssm:ListDocuments"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeStarFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codestar:*", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "cloud9:DescribeEnvironment*", 
                "cloud9:ValidateEnvironmentName"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CodeStarEC2"
        }, 
        {
            "Action": [
                "cloudformation:DescribeStack*", 
                "cloudformation:GetTemplateSummary"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awscodestar-*"
            ], 
            "Effect": "Allow", 
            "Sid": "CodeStarCF"
        }
    ]
}
Policy Name: AmazonSSMServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:CancelCommand", 
                "ssm:GetCommandInvocation", 
                "ssm:ListCommandInvocations", 
                "ssm:ListCommands", 
                "ssm:SendCommand"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "resource-groups:ListGroups", 
                "resource-groups:ListGroupResources"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "tag:GetResources"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDataPipeline_FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:List*", 
                "dynamodb:DescribeTable", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBSecurityGroups", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "sns:ListTopics", 
                "sns:Subscribe", 
                "iam:ListRoles", 
                "iam:GetRolePolicy", 
                "iam:GetInstanceProfile", 
                "iam:ListInstanceProfiles", 
                "datapipeline:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultRole"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDynamoDBReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "cloudwatch:DescribeAlarmHistory", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics", 
                "datapipeline:DescribeObjects", 
                "datapipeline:DescribePipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:ListPipelines", 
                "datapipeline:QueryObjects", 
                "dynamodb:BatchGetItem", 
                "dynamodb:DescribeTable", 
                "dynamodb:GetItem", 
                "dynamodb:ListTables", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "dynamodb:DescribeReservedCapacity", 
                "dynamodb:DescribeReservedCapacityOfferings", 
                "dynamodb:ListTagsOfResource", 
                "dynamodb:DescribeTimeToLive", 
                "dynamodb:DescribeLimits", 
                "dynamodb:ListGlobalTables", 
                "dynamodb:DescribeGlobalTable", 
                "dynamodb:DescribeBackup", 
                "dynamodb:ListBackups", 
                "dynamodb:DescribeContinuousBackups", 
                "dax:Describe*", 
                "dax:List*", 
                "dax:GetItem", 
                "dax:BatchGetItem", 
                "dax:Query", 
                "dax:Scan", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "iam:GetRole", 
                "iam:ListRoles", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "lambda:ListFunctions", 
                "lambda:ListEventSourceMappings", 
                "lambda:GetFunctionConfiguration"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AutoScalingConsoleFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateKeyPair", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeLaunchTemplateVersions", 
                "ec2:DescribePlacementGroups", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:ImportKeyPair"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "elasticloadbalancing:Describe*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:ListMetrics", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "autoscaling:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:ListSubscriptions", 
                "sns:ListTopics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:ListRoles", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "autoscaling.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSElementalMediaPackageFullAccess
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": "mediapackage:*", 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AmazonKinesisVideoStreamsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "kinesisvideo:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSNSReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:GetTopicAttributes", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSEC2SpotServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonElasticMapReduceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackEvents", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CreateRoute", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateTags", 
                "ec2:DeleteRoute", 
                "ec2:DeleteTags", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeSpotPriceHistory", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeNetworkAcls", 
                "ec2:CreateVpcEndpoint", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RequestSpotInstances", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RunInstances", 
                "ec2:TerminateInstances", 
                "elasticmapreduce:*", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "kms:List*", 
                "s3:*", 
                "sdb:*", 
                "support:CreateCase", 
                "support:DescribeServices", 
                "support:DescribeSeverityLevels"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "elasticmapreduce.amazonaws.com", 
                        "elasticmapreduce.amazonaws.com.cn"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonS3ReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:Get*", 
                "s3:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticbeanstalk:*", 
                "ec2:*", 
                "ecs:*", 
                "ecr:*", 
                "elasticloadbalancing:*", 
                "autoscaling:*", 
                "cloudwatch:*", 
                "s3:*", 
                "sns:*", 
                "cloudformation:*", 
                "dynamodb:*", 
                "rds:*", 
                "sqs:*", 
                "logs:*", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:PassRole", 
                "iam:ListRolePolicies", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:ListServerCertificates", 
                "acm:DescribeCertificate", 
                "acm:ListCertificates", 
                "codebuild:CreateProject", 
                "codebuild:DeleteProject", 
                "codebuild:BatchGetBuilds", 
                "codebuild:StartBuild"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:AddRoleToInstanceProfile", 
                "iam:CreateInstanceProfile", 
                "iam:CreateRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-elasticbeanstalk*", 
                "arn:aws:iam::*:instance-profile/aws-elasticbeanstalk*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "autoscaling.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "elasticbeanstalk.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:AttachRolePolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PolicyArn": [
                        "arn:aws:iam::aws:policy/AWSElasticBeanstalk*", 
                        "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalk*"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonWorkSpacesAdmin
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "workspaces:CreateWorkspaces", 
                "workspaces:DescribeWorkspaces", 
                "workspaces:RebootWorkspaces", 
                "workspaces:RebuildWorkspaces", 
                "workspaces:TerminateWorkspaces", 
                "workspaces:DescribeWorkspaceDirectories", 
                "workspaces:DescribeWorkspaceBundles", 
                "workspaces:ModifyWorkspaceProperties", 
                "workspaces:StopWorkspaces", 
                "workspaces:StartWorkspaces", 
                "workspaces:DescribeWorkspacesConnectionStatus", 
                "workspaces:CreateTags", 
                "workspaces:DeleteTags", 
                "workspaces:DescribeTags", 
                "kms:ListKeys", 
                "kms:ListAliases", 
                "kms:DescribeKey"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:CompleteLifecycleAction", 
                "autoscaling:DeleteLifecycleHook", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLifecycleHooks", 
                "autoscaling:PutLifecycleHook", 
                "autoscaling:RecordLifecycleActionHeartbeat", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:UpdateAutoScalingGroup", 
                "autoscaling:EnableMetricsCollection", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribePolicies", 
                "autoscaling:DescribeScheduledActions", 
                "autoscaling:DescribeNotificationConfigurations", 
                "autoscaling:DescribeLifecycleHooks", 
                "autoscaling:SuspendProcesses", 
                "autoscaling:ResumeProcesses", 
                "autoscaling:AttachLoadBalancers", 
                "autoscaling:PutScalingPolicy", 
                "autoscaling:PutScheduledUpdateGroupAction", 
                "autoscaling:PutNotificationConfiguration", 
                "autoscaling:PutLifecycleHook", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:DeleteAutoScalingGroup", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:TerminateInstances", 
                "tag:GetTags", 
                "tag:GetResources", 
                "sns:Publish", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticloadbalancing:RegisterTargets", 
                "elasticloadbalancing:DeregisterTargets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSESFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ses:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchLogsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:Describe*", 
                "logs:Get*", 
                "logs:List*", 
                "logs:TestMetricFilter", 
                "logs:FilterLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisFirehoseReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "firehose:Describe*", 
                "firehose:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksRegisterCLI
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "opsworks:AssignInstance", 
                "opsworks:CreateStack", 
                "opsworks:CreateLayer", 
                "opsworks:DeregisterInstance", 
                "opsworks:DescribeInstances", 
                "opsworks:DescribeStackProvisioningParameters", 
                "opsworks:DescribeStacks", 
                "opsworks:UnassignInstance"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:AddUserToGroup", 
                "iam:CreateAccessKey", 
                "iam:CreateGroup", 
                "iam:CreateUser", 
                "iam:ListInstanceProfiles", 
                "iam:PassRole", 
                "iam:PutUserPolicy"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDynamoDBFullAccesswithDataPipeline
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarmHistory", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics", 
                "cloudwatch:PutMetricAlarm", 
                "dynamodb:*", 
                "sns:CreateTopic", 
                "sns:DeleteTopic", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sns:Subscribe", 
                "sns:Unsubscribe", 
                "sns:SetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "DDBConsole"
        }, 
        {
            "Action": [
                "lambda:*", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "DDBConsoleTriggers"
        }, 
        {
            "Action": [
                "datapipeline:*", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "DDBConsoleImportExport"
        }, 
        {
            "Action": [
                "iam:GetRolePolicy", 
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "IAMEDPRoles"
        }, 
        {
            "Action": [
                "ec2:CreateTags", 
                "ec2:DescribeInstances", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "elasticmapreduce:*", 
                "datapipeline:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "EMR"
        }, 
        {
            "Action": [
                "s3:DeleteObject", 
                "s3:Get*", 
                "s3:List*", 
                "s3:Put*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "S3"
        }
    ]
}
Policy Name: AmazonEC2RoleforDataPipelineRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:*", 
                "datapipeline:*", 
                "dynamodb:*", 
                "ec2:Describe*", 
                "elasticmapreduce:AddJobFlowSteps", 
                "elasticmapreduce:Describe*", 
                "elasticmapreduce:ListInstance*", 
                "elasticmapreduce:ModifyInstanceGroups", 
                "rds:Describe*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSecurityGroups", 
                "s3:*", 
                "sdb:*", 
                "sns:*", 
                "sqs:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchLogsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElementalMediaPackageReadOnly
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "mediapackage:List*", 
            "mediapackage:Describe*"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AWSElasticBeanstalkMulticontainerDocker
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:Poll", 
                "ecs:StartTask", 
                "ecs:StopTask", 
                "ecs:DiscoverPollEndpoint", 
                "ecs:StartTelemetrySession", 
                "ecs:RegisterContainerInstance", 
                "ecs:DeregisterContainerInstance", 
                "ecs:DescribeContainerInstances", 
                "ecs:Submit*", 
                "ecs:DescribeTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "ECSAccess"
        }
    ]
}
Policy Name: AWSMigrationHubFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:*", 
                "discovery:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elastictranscoder:*", 
                "cloudfront:*", 
                "s3:List*", 
                "s3:Put*", 
                "s3:Get*", 
                "s3:*MultipartUpload*", 
                "iam:CreateRole", 
                "iam:GetRolePolicy", 
                "iam:PassRole", 
                "iam:PutRolePolicy", 
                "iam:List*", 
                "sns:CreateTopic", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: IAMUserChangePassword
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:ChangePassword"
            ], 
            "Resource": [
                "arn:aws:iam::*:user/${aws:username}"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetAccountPasswordPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAPIGatewayAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "apigateway:*"
            ], 
            "Resource": "arn:aws:apigateway:*::/*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonVPCCrossAccountNetworkInterfaceOperations
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeRouteTables", 
                "ec2:CreateRoute", 
                "ec2:DeleteRoute", 
                "ec2:ReplaceRoute"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeNetworkInterfaces", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AssignPrivateIpAddresses", 
                "ec2:UnassignPrivateIpAddresses"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ServiceCatalogEndUserAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "catalog-user:*", 
                "s3:GetObject", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:SearchProducts"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:DescribeProvisionedProduct", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ScanProvisionedProducts"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "servicecatalog:userLevel": "self"
                }
            }
        }
    ]
}
Policy Name: AmazonMacieSetupRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetEventSelectors", 
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:ListTags", 
                "cloudtrail:LookupEvents", 
                "iam:ListAccountAliases", 
                "s3:GetBucket*", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudtrail:CreateTrail", 
                "cloudtrail:StartLogging", 
                "cloudtrail:StopLogging", 
                "cloudtrail:UpdateTrail", 
                "cloudtrail:DeleteTrail", 
                "cloudtrail:PutEventSelectors"
            ], 
            "Resource": "arn:aws:cloudtrail:*:*:trail/AWSMacieTrail-DO-NOT-EDIT", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteBucketPolicy", 
                "s3:DeleteBucketWebsite", 
                "s3:DeleteObject", 
                "s3:DeleteObjectTagging", 
                "s3:DeleteObjectVersion", 
                "s3:DeleteObjectVersionTagging", 
                "s3:DeleteReplicationConfiguration", 
                "s3:PutBucketPolicy"
            ], 
            "Resource": [
                "arn:aws:s3:::awsmacie-*", 
                "arn:aws:s3:::awsmacietrail-*", 
                "arn:aws:s3:::*-awsmacietrail-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonPollyReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "polly:DescribeVoices", 
                "polly:GetLexicon", 
                "polly:ListLexicons", 
                "polly:SynthesizeSpeech"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsWriteOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "mobileanalytics:PutEvents", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2SpotFleetTaggingRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:CreateTags"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ], 
            "Resource": [
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "elasticloadbalancing:RegisterTargets"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DataScientist
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:*", 
                "cloudwatch:*", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackEvents", 
                "datapipeline:Describe*", 
                "datapipeline:ListPipelines", 
                "datapipeline:GetPipelineDefinition", 
                "datapipeline:QueryObjects", 
                "dynamodb:*", 
                "ec2:CancelSpotInstanceRequests", 
                "ec2:CancelSpotFleetRequests", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:Describe*", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:ModifySpotFleetRequest", 
                "ec2:RequestSpotInstances", 
                "ec2:RequestSpotFleet", 
                "elasticfilesystem:*", 
                "elasticmapreduce:*", 
                "es:*", 
                "firehose:*", 
                "iam:GetInstanceProfile", 
                "iam:GetRole", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:ListRoles", 
                "kinesis:*", 
                "kms:List*", 
                "lambda:Create*", 
                "lambda:Delete*", 
                "lambda:Get*", 
                "lambda:InvokeFunction", 
                "lambda:PublishVersion", 
                "lambda:Update*", 
                "lambda:List*", 
                "machinelearning:*", 
                "sdb:*", 
                "rds:*", 
                "sns:ListSubscriptions", 
                "sns:ListTopics", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents", 
                "redshift:*", 
                "s3:CreateBucket", 
                "sns:CreateTopic", 
                "sns:Get*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:Abort*", 
                "s3:DeleteObject", 
                "s3:Get*", 
                "s3:List*", 
                "s3:PutAccelerateConfiguration", 
                "s3:PutBucketLogging", 
                "s3:PutBucketNotification", 
                "s3:PutBucketTagging", 
                "s3:PutObject", 
                "s3:Replicate*", 
                "s3:RestoreObject"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:RunInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/DataPipelineDefaultRole", 
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole", 
                "arn:aws:iam::*:role/EMR_EC2_DefaultRole", 
                "arn:aws:iam::*:role/EMR_DefaultRole", 
                "arn:aws:iam::*:role/kinesis-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceMeteringFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:MeterUsage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksCMServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteObject", 
                "s3:DeleteBucket", 
                "s3:GetObject", 
                "s3:HeadBucket", 
                "s3:ListBucket", 
                "s3:ListObjects", 
                "s3:PutBucketPolicy"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:DescribeInstanceInformation", 
                "ssm:GetCommandInvocation", 
                "ssm:ListCommandInvocations", 
                "ssm:ListCommands"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:SendCommand"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ssm:resourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
                }
            }
        }, 
        {
            "Action": [
                "ssm:SendCommand"
            ], 
            "Resource": [
                "arn:aws:ssm:*::document/*", 
                "arn:aws:s3:::aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AllocateAddress", 
                "ec2:AssociateAddress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateImage", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeregisterImage", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DisassociateAddress", 
                "ec2:ReleaseAddress", 
                "ec2:RunInstances", 
                "ec2:StopInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
                }
            }
        }, 
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:UpdateStack"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-opsworks-cm-*", 
                "arn:aws:iam::*:role/service-role/aws-opsworks-cm-*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConnector
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "iam:GetUser", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteObject", 
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:PutObject", 
                "s3:PutObjectAcl", 
                "s3:AbortMultipartUpload", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts"
            ], 
            "Resource": "arn:aws:s3:::import-to-ec2-*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CancelConversionTask", 
                "ec2:CancelExportTask", 
                "ec2:CreateImage", 
                "ec2:CreateInstanceExportTask", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:DeleteTags", 
                "ec2:DeleteVolume", 
                "ec2:DescribeConversionTasks", 
                "ec2:DescribeExportTasks", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeRegions", 
                "ec2:DescribeTags", 
                "ec2:DetachVolume", 
                "ec2:ImportInstance", 
                "ec2:ImportVolume", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:RunInstances", 
                "ec2:StartInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:ImportImage", 
                "ec2:DescribeImportImageTasks", 
                "ec2:DeregisterImage", 
                "ec2:DescribeSnapshots", 
                "ec2:DeleteSnapshot", 
                "ec2:CancelImportTask", 
                "ec2:ImportSnapshot", 
                "ec2:DescribeImportSnapshotTasks"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "SNS:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSBatchFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "batch:*", 
                "cloudwatch:GetMetricStatistics", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeKeyPairs", 
                "ecs:DescribeClusters", 
                "ecs:Describe*", 
                "ecs:List*", 
                "logs:Describe*", 
                "logs:Get*", 
                "logs:TestMetricFilter", 
                "logs:FilterLogEvents", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/AWSBatchServiceRole", 
                "arn:aws:iam::*:role/service-role/AWSBatchServiceRole", 
                "arn:aws:iam::*:role/ecsInstanceRole", 
                "arn:aws:iam::*:role/iaws-ec2-spot-fleet-role", 
                "arn:aws:iam::*:role/aws-ec2-spot-fleet-role", 
                "arn:aws:iam::*:role/AWSBatchJobRole*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonECS_FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget", 
                "autoscaling:UpdateAutoScalingGroup", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:CreateLaunchConfiguration", 
                "autoscaling:DeleteAutoScalingGroup", 
                "autoscaling:DeleteLaunchConfiguration", 
                "autoscaling:Describe*", 
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStack*", 
                "cloudformation:UpdateStack", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm", 
                "ec2:AssociateRouteTable", 
                "ec2:AttachInternetGateway", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CancelSpotFleetRequests", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateVpc", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteVpc", 
                "ec2:Describe*", 
                "ec2:DetachInternetGateway", 
                "ec2:DisassociateRouteTable", 
                "ec2:ModifySubnetAttribute", 
                "ec2:ModifyVpcAttribute", 
                "ec2:RequestSpotFleet", 
                "elasticloadbalancing:CreateListener", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:CreateRule", 
                "elasticloadbalancing:CreateTargetGroup", 
                "elasticloadbalancing:DeleteListener", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:DeleteRule", 
                "elasticloadbalancing:DeleteTargetGroup", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeRules", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "ecs:*", 
                "events:DescribeRule", 
                "events:DeleteRule", 
                "events:ListRuleNamesByTarget", 
                "events:ListTargetsByRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "logs:CreateLogGroup", 
                "logs:DescribeLogGroups", 
                "logs:FilterLogEvents", 
                "route53:GetHostedZone", 
                "route53:ListHostedZonesByName", 
                "route53:CreateHostedZone", 
                "route53:DeleteHostedZone", 
                "route53:GetHealthCheck", 
                "servicediscovery:CreatePrivateDnsNamespace", 
                "servicediscovery:CreateService", 
                "servicediscovery:GetNamespace", 
                "servicediscovery:GetOperation", 
                "servicediscovery:GetService", 
                "servicediscovery:ListNamespaces", 
                "servicediscovery:ListServices", 
                "servicediscovery:UpdateService"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:GetParametersByPath", 
                "ssm:GetParameters", 
                "ssm:GetParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/aws/service/ecs*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-name": "EC2ContainerService-*"
                }
            }
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "ecs-tasks.amazonaws.com"
                }
            }
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/ecsInstanceRole*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": [
                "arn:aws:iam::*:role/ecsAutoscaleRole*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "application-autoscaling.amazonaws.com", 
                        "application-autoscaling.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": [
                        "ecs.amazonaws.com", 
                        "spot.amazonaws.com", 
                        "spotfleet.amazonaws.com", 
                        "ecs.application-autoscaling.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: ServiceCatalogAdminReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "catalog-admin:DescribeConstraints", 
                "catalog-admin:DescribeListingForProduct", 
                "catalog-admin:DescribeListings", 
                "catalog-admin:DescribePortfolios", 
                "catalog-admin:DescribeProductVersions", 
                "catalog-admin:GetPortfolioCount", 
                "catalog-admin:GetPortfolios", 
                "catalog-admin:GetProductCounts", 
                "catalog-admin:ListAllPortfolioConstraints", 
                "catalog-admin:ListPortfolioConstraints", 
                "catalog-admin:ListPortfolios", 
                "catalog-admin:ListPrincipalConstraints", 
                "catalog-admin:ListProductConstraints", 
                "catalog-admin:ListResourceUsers", 
                "catalog-admin:ListTagsForResource", 
                "catalog-admin:SearchListings", 
                "catalog-user:*", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplateSummary", 
                "iam:GetGroup", 
                "iam:GetRole", 
                "iam:GetUser", 
                "iam:ListGroups", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "s3:GetObject", 
                "servicecatalog:DescribeTagOption", 
                "servicecatalog:GetTagOptionMigrationStatus", 
                "servicecatalog:ListResourcesForTagOption", 
                "servicecatalog:ListTagOptions", 
                "servicecatalog:AccountLevelDescribeRecord", 
                "servicecatalog:AccountLevelListRecordHistory", 
                "servicecatalog:AccountLevelScanProvisionedProducts", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:DescribeProvisionedProduct", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:ScanProvisionedProducts", 
                "servicecatalog:SearchProducts", 
                "servicecatalog:DescribeConstraint", 
                "servicecatalog:DescribeProductAsAdmin", 
                "servicecatalog:DescribePortfolio", 
                "servicecatalog:DescribeProvisioningArtifact", 
                "servicecatalog:ListAcceptedPortfolioShares", 
                "servicecatalog:ListConstraintsForPortfolio", 
                "servicecatalog:ListPortfolioAccess", 
                "servicecatalog:ListPortfolios", 
                "servicecatalog:ListPortfoliosForProduct", 
                "servicecatalog:ListPrincipalsForPortfolio", 
                "servicecatalog:ListProvisioningArtifacts", 
                "servicecatalog:SearchProductsAsAdmin"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingRDSClusterPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:AddTagsToResource", 
                "rds:CreateDBInstance", 
                "rds:DeleteDBInstance", 
                "rds:DescribeDBClusters", 
                "rds:DescribeDBInstances", 
                "rds:ModifyDBCluster", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSServiceRoleForEC2ScheduledInstances
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "ForAllValues:StringEquals": {
                    "aws:TagKeys": [
                        "aws:ec2sri:scheduledInstanceId"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:ec2sri:scheduledInstanceId": "*"
                }
            }
        }
    ]
}
Policy Name: AWSCodeDeployRoleForLambda
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "lambda:UpdateAlias", 
                "lambda:GetAlias", 
                "sns:Publish"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectVersion"
            ], 
            "Resource": "arn:aws:s3:::*/CodeDeploy/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetObjectVersion"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "s3:ExistingObjectTag/UseWithCodeDeploy": "true"
                }
            }
        }, 
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": "arn:aws:lambda:*:*:function:CodeDeployHook_*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData", 
                "ds:CreateComputer", 
                "ds:DescribeDirectories", 
                "ec2:DescribeInstanceStatus", 
                "logs:*", 
                "ssm:*", 
                "ec2messages:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeCommitReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codecommit:BatchGet*", 
                "codecommit:Get*", 
                "codecommit:Describe*", 
                "codecommit:List*", 
                "codecommit:GitPull"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "events:DescribeRule", 
                "events:ListTargetsByRule"
            ], 
            "Resource": "arn:aws:events:*:*:rule/codecommit*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsCodeCommitRulesReadOnlyAccess"
        }, 
        {
            "Action": [
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:GetTopicAttributes"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "SNSSubscriptionAccess"
        }, 
        {
            "Action": [
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "LambdaReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyListAccess"
        }, 
        {
            "Action": [
                "iam:ListAccessKeys", 
                "iam:ListSSHPublicKeys", 
                "iam:ListServiceSpecificCredentials", 
                "iam:ListAccessKeys", 
                "iam:GetSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow", 
            "Sid": "IAMReadOnlyConsoleAccess"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "autoscaling:UpdateAutoScalingGroup", 
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStack*", 
                "cloudformation:UpdateStack", 
                "cloudwatch:GetMetricStatistics", 
                "ec2:Describe*", 
                "elasticloadbalancing:*", 
                "ecs:*", 
                "events:DescribeRule", 
                "events:DeleteRule", 
                "events:ListRuleNamesByTarget", 
                "events:ListTargetsByRule", 
                "events:PutRule", 
                "events:PutTargets", 
                "events:RemoveTargets", 
                "iam:ListInstanceProfiles", 
                "iam:ListRoles", 
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonFreeRTOSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "freertos:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCognitoReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-identity:Describe*", 
                "cognito-identity:Get*", 
                "cognito-identity:List*", 
                "cognito-idp:Describe*", 
                "cognito-idp:AdminGetUser", 
                "cognito-idp:List*", 
                "cognito-sync:Describe*", 
                "cognito-sync:Get*", 
                "cognito-sync:List*", 
                "iam:ListOpenIdConnectProviders", 
                "iam:ListRoles", 
                "sns:ListPlatformApplications"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDMSCloudWatchLogsRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:DescribeLogGroups"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDescribeOnAllLogGroups"
        }, 
        {
            "Action": [
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDescribeOfAllLogStreamsOnDmsTasksLogGroup"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCreationOfDmsTasksLogGroups"
        }, 
        {
            "Action": [
                "logs:CreateLogStream"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCreationOfDmsTaskLogStream"
        }, 
        {
            "Action": [
                "logs:PutLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowUploadOfLogEventsToDmsTaskLogStream"
        }
    ]
}
Policy Name: AWSApplicationDiscoveryServiceFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mgh:*", 
                "discovery:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53AutoNamingReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "servicediscovery:Get*", 
                "servicediscovery:List*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonVPCFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AcceptVpcPeeringConnection", 
                "ec2:AcceptVpcEndpointConnections", 
                "ec2:AllocateAddress", 
                "ec2:AssignIpv6Addresses", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssociateAddress", 
                "ec2:AssociateDhcpOptions", 
                "ec2:AssociateRouteTable", 
                "ec2:AssociateSubnetCidrBlock", 
                "ec2:AssociateVpcCidrBlock", 
                "ec2:AttachClassicLinkVpc", 
                "ec2:AttachInternetGateway", 
                "ec2:AttachNetworkInterface", 
                "ec2:AttachVpnGateway", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateCustomerGateway", 
                "ec2:CreateDefaultSubnet", 
                "ec2:CreateDefaultVpc", 
                "ec2:CreateDhcpOptions", 
                "ec2:CreateEgressOnlyInternetGateway", 
                "ec2:CreateFlowLogs", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateNatGateway", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAclEntry", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:CreateVpcEndpoint", 
                "ec2:CreateVpcEndpointConnectionNotification", 
                "ec2:CreateVpcEndpointServiceConfiguration", 
                "ec2:CreateVpcPeeringConnection", 
                "ec2:CreateVpnConnection", 
                "ec2:CreateVpnConnectionRoute", 
                "ec2:CreateVpnGateway", 
                "ec2:DeleteCustomerGateway", 
                "ec2:DeleteDhcpOptions", 
                "ec2:DeleteEgressOnlyInternetGateway", 
                "ec2:DeleteFlowLogs", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteNatGateway", 
                "ec2:DeleteNetworkAcl", 
                "ec2:DeleteNetworkAclEntry", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteTags", 
                "ec2:DeleteVpc", 
                "ec2:DeleteVpcEndpoints", 
                "ec2:DeleteVpcEndpointConnectionNotifications", 
                "ec2:DeleteVpcEndpointServiceConfigurations", 
                "ec2:DeleteVpcPeeringConnection", 
                "ec2:DeleteVpnConnection", 
                "ec2:DeleteVpnConnectionRoute", 
                "ec2:DeleteVpnGateway", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeEgressOnlyInternetGateways", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroupReferences", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeStaleSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeVpcClassicLinkDnsSupport", 
                "ec2:DescribeVpcEndpointConnectionNotifications", 
                "ec2:DescribeVpcEndpointConnections", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointServiceConfigurations", 
                "ec2:DescribeVpcEndpointServicePermissions", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:DetachInternetGateway", 
                "ec2:DetachNetworkInterface", 
                "ec2:DetachVpnGateway", 
                "ec2:DisableVgwRoutePropagation", 
                "ec2:DisableVpcClassicLink", 
                "ec2:DisableVpcClassicLinkDnsSupport", 
                "ec2:DisassociateAddress", 
                "ec2:DisassociateRouteTable", 
                "ec2:DisassociateSubnetCidrBlock", 
                "ec2:DisassociateVpcCidrBlock", 
                "ec2:EnableVgwRoutePropagation", 
                "ec2:EnableVpcClassicLink", 
                "ec2:EnableVpcClassicLinkDnsSupport", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:ModifySubnetAttribute", 
                "ec2:ModifyVpcAttribute", 
                "ec2:ModifyVpcEndpoint", 
                "ec2:ModifyVpcEndpointConnectionNotification", 
                "ec2:ModifyVpcEndpointServiceConfiguration", 
                "ec2:ModifyVpcEndpointServicePermissions", 
                "ec2:ModifyVpcPeeringConnectionOptions", 
                "ec2:ModifyVpcTenancy", 
                "ec2:MoveAddressToVpc", 
                "ec2:RejectVpcEndpointConnections", 
                "ec2:RejectVpcPeeringConnection", 
                "ec2:ReleaseAddress", 
                "ec2:ReplaceNetworkAclAssociation", 
                "ec2:ReplaceNetworkAclEntry", 
                "ec2:ReplaceRoute", 
                "ec2:ReplaceRouteTableAssociation", 
                "ec2:ResetNetworkInterfaceAttribute", 
                "ec2:RestoreAddressToClassic", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:UnassignIpv6Addresses", 
                "ec2:UnassignPrivateIpAddresses", 
                "ec2:UpdateSecurityGroupRuleDescriptionsEgress", 
                "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAppSyncAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appsync:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "appsync.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AWSEC2FleetServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeImages", 
                "ec2:DescribeSubnets", 
                "ec2:RequestSpotInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:RunInstances"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com", 
                        "ec2.amazonaws.com.cn"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*", 
                "arn:aws:ec2:*:*:spot-instances-request/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:ec2:fleet-id": "*"
                }
            }
        }
    ]
}
Policy Name: AmazonRoute53AutoNamingFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:GetHostedZone", 
                "route53:ListHostedZonesByName", 
                "route53:CreateHostedZone", 
                "route53:DeleteHostedZone", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateHealthCheck", 
                "route53:GetHealthCheck", 
                "route53:DeleteHealthCheck", 
                "route53:UpdateHealthCheck", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeRegions", 
                "servicediscovery:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSImportExportFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "importexport:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DynamoDBReplicationServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:GetItem", 
                "dynamodb:PutItem", 
                "dynamodb:UpdateItem", 
                "dynamodb:DeleteItem", 
                "dynamodb:DescribeTable", 
                "dynamodb:Scan", 
                "dynamodb:DescribeStream", 
                "dynamodb:GetRecords", 
                "dynamodb:GetShardIterator", 
                "dynamodb:DescribeTimeToLive", 
                "application-autoscaling:DescribeScalableTargets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMechanicalTurkFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mechanicalturk:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerRegistryPowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:GetRepositoryPolicy", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "ecr:DescribeImages", 
                "ecr:BatchGetImage", 
                "ecr:InitiateLayerUpload", 
                "ecr:UploadLayerPart", 
                "ecr:CompleteLayerUpload", 
                "ecr:PutImage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningCreateOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:Add*", 
                "machinelearning:Create*", 
                "machinelearning:Delete*", 
                "machinelearning:Describe*", 
                "machinelearning:Get*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisVideoStreamsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesisvideo:Describe*", 
                "kinesisvideo:Get*", 
                "kinesisvideo:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudTrailReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject", 
                "s3:GetBucketLocation"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudtrail:GetTrailStatus", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:LookupEvents", 
                "cloudtrail:ListTags", 
                "cloudtrail:ListPublicKeys", 
                "cloudtrail:GetEventSelectors", 
                "s3:ListAllMyBuckets", 
                "kms:ListAliases", 
                "lambda:ListFunctions"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaExecute
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:*"
            ], 
            "Resource": "arn:aws:logs:*:*:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject"
            ], 
            "Resource": "arn:aws:s3:::*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTRuleActions
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "dynamodb:PutItem", 
            "kinesis:PutRecord", 
            "iot:Publish", 
            "s3:PutObject", 
            "sns:Publish", 
            "sqs:SendMessage*", 
            "cloudwatch:SetAlarmState", 
            "cloudwatch:PutMetricData", 
            "es:ESHttpPut", 
            "firehose:PutRecord"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AWSQuickSightDescribeRedshift
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "redshift:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticsearchServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "Stmt1480452973134"
        }
    ]
}
Policy Name: AmazonMQReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mq:Describe*", 
                "mq:List*", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: VMImportExportRoleForAWSConnector
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::import-to-ec2-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:ModifySnapshotAttribute", 
                "ec2:CopySnapshot", 
                "ec2:RegisterImage", 
                "ec2:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineCustomActionAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:AcknowledgeJob", 
                "codepipeline:GetJobDetails", 
                "codepipeline:PollForJobs", 
                "codepipeline:PutJobFailureResult", 
                "codepipeline:PutJobSuccessResult"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9ServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:RunInstances", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeInstances", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStacks", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStackResources"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances", 
                "ec2:DeleteSecurityGroup", 
                "ec2:AuthorizeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:DeleteStack"
            ], 
            "Resource": "arn:aws:cloudformation:*:*:stack/aws-cloud9-*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateTags"
            ], 
            "Resource": "arn:aws:ec2:*:*:instance/*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "aws:RequestTag/Name": "aws-cloud9-*"
                }
            }
        }, 
        {
            "Action": [
                "ec2:StartInstances", 
                "ec2:StopInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-cloud9-*"
                }
            }
        }
    ]
}
Policy Name: AWSApplicationAutoscalingECSServicePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:DescribeServices", 
                "ecs:UpdateService", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksInstanceRegistration
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "opsworks:DescribeStackProvisioningParameters", 
                "opsworks:DescribeStacks", 
                "opsworks:RegisterInstance"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCloudDirectoryFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "clouddirectory:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonECSTaskExecutionRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:BatchGetImage", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStorageGatewayFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "storagegateway:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeSnapshots", 
                "ec2:DeleteSnapshot"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonLexReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lex:GetBot", 
                "lex:GetBotAlias", 
                "lex:GetBotAliases", 
                "lex:GetBots", 
                "lex:GetBotChannelAssociation", 
                "lex:GetBotChannelAssociations", 
                "lex:GetBotVersions", 
                "lex:GetBuiltinIntent", 
                "lex:GetBuiltinIntents", 
                "lex:GetBuiltinSlotTypes", 
                "lex:GetIntent", 
                "lex:GetIntents", 
                "lex:GetIntentVersions", 
                "lex:GetSlotType", 
                "lex:GetSlotTypes", 
                "lex:GetSlotTypeVersions", 
                "lex:GetUtterancesView"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonChimeUserManagement
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "chime:ListAccounts", 
                "chime:GetAccount", 
                "chime:GetAccountSettings", 
                "chime:UpdateAccountSettings", 
                "chime:ListUsers", 
                "chime:GetUser", 
                "chime:GetUserByEmail", 
                "chime:InviteUsers", 
                "chime:SuspendUsers", 
                "chime:ActivateUsers", 
                "chime:UpdateUserLicenses", 
                "chime:ResetPersonalPIN", 
                "chime:LogoutUser", 
                "chime:ListDomains", 
                "chime:GetDomain", 
                "chime:ListDirectories", 
                "chime:ListGroups", 
                "chime:SubmitSupportRequest", 
                "chime:ListDelegates", 
                "chime:ListAccountUsageReportData", 
                "chime:GetMeetingDetail", 
                "chime:ListMeetingEvents", 
                "chime:ListMeetingsReportData", 
                "chime:GetUserActivityReportData"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elastictranscoder:Read*", 
                "elastictranscoder:List*", 
                "s3:List*", 
                "iam:List*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSTrustedAdvisorServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:DescribeAccountLimits", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeLaunchConfigurations", 
                "cloudformation:DescribeAccountLimits", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListStacks", 
                "cloudfront:ListDistributions", 
                "cloudtrail:DescribeTrails", 
                "cloudtrail:GetTrailStatus", 
                "dynamodb:DescribeTable", 
                "dynamodb:ListTables", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeReservedInstances", 
                "ec2:DescribeInstances", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeImages", 
                "ec2:DescribeVolumes", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeReservedInstancesOfferings", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancerAttributes", 
                "elasticloadbalancing:DescribeLoadBalancerPolicies", 
                "elasticloadbalancing:DescribeLoadBalancerPolicyTypes", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "iam:GenerateCredentialReport", 
                "iam:GetAccountPasswordPolicy", 
                "iam:GetAccountSummary", 
                "iam:GetCredentialReport", 
                "iam:GetServerCertificate", 
                "iam:ListServerCertificates", 
                "kinesis:DescribeLimits", 
                "rds:DescribeAccountAttributes", 
                "rds:DescribeDBClusters", 
                "rds:DescribeDBEngineVersions", 
                "rds:DescribeDBInstances", 
                "rds:DescribeDBParameterGroups", 
                "rds:DescribeDBParameters", 
                "rds:DescribeDBSecurityGroups", 
                "rds:DescribeDBSnapshots", 
                "rds:DescribeDBSubnetGroups", 
                "rds:DescribeEngineDefaultParameters", 
                "rds:DescribeEvents", 
                "rds:DescribeOptionGroupOptions", 
                "rds:DescribeOptionGroups", 
                "rds:DescribeOrderableDBInstanceOptions", 
                "rds:DescribeReservedDBInstances", 
                "rds:DescribeReservedDBInstancesOfferings", 
                "rds:ListTagsForResource", 
                "redshift:DescribeClusters", 
                "redshift:DescribeReservedNodeOfferings", 
                "redshift:DescribeReservedNodes", 
                "route53:GetHealthCheck", 
                "route53:GetHostedZone", 
                "route53:ListHealthChecks", 
                "route53:ListHostedZones", 
                "route53:ListHostedZonesByName", 
                "route53:ListResourceRecordSets", 
                "s3:GetBucketAcl", 
                "s3:GetBucketPolicy", 
                "s3:GetBucketLocation", 
                "s3:GetBucketLogging", 
                "s3:GetBucketVersioning", 
                "s3:ListBucket", 
                "s3:ListObjects", 
                "s3:ListAllMyBuckets", 
                "ses:GetSendQuota", 
                "sqs:ListQueues", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTConfigReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:DescribeAuthorizer", 
                "iot:DescribeCACertificate", 
                "iot:DescribeCertificate", 
                "iot:DescribeCertificateTag", 
                "iot:DescribeDefaultAuthorizer", 
                "iot:DescribeEndpoint", 
                "iot:DescribeEventConfigurations", 
                "iot:DescribeIndex", 
                "iot:DescribeJob", 
                "iot:DescribeJobExecution", 
                "iot:DescribeRoleAlias", 
                "iot:DescribeStream", 
                "iot:DescribeThing", 
                "iot:DescribeThingGroup", 
                "iot:DescribeThingRegistrationTask", 
                "iot:DescribeThingType", 
                "iot:GetEffectivePolicies", 
                "iot:GetIndexingConfiguration", 
                "iot:GetJobDocument", 
                "iot:GetLoggingOptions", 
                "iot:GetOTAUpdate", 
                "iot:GetPolicy", 
                "iot:GetPolicyVersion", 
                "iot:GetRegistrationCode", 
                "iot:GetTopicRule", 
                "iot:GetV2LoggingOptions", 
                "iot:ListAttachedPolicies", 
                "iot:ListAuthorizers", 
                "iot:ListCACertificates", 
                "iot:ListCertificates", 
                "iot:ListCertificatesByCA", 
                "iot:ListIndices", 
                "iot:ListJobExecutionsForJob", 
                "iot:ListJobExecutionsForThing", 
                "iot:ListJobs", 
                "iot:ListOTAUpdates", 
                "iot:ListOutgoingCertificates", 
                "iot:ListPolicies", 
                "iot:ListPolicyPrincipals", 
                "iot:ListPolicyVersions", 
                "iot:ListPrincipalPolicies", 
                "iot:ListPrincipalThings", 
                "iot:ListRoleAliases", 
                "iot:ListStreams", 
                "iot:ListTargetsForPolicy", 
                "iot:ListThingGroups", 
                "iot:ListThingGroupsForThing", 
                "iot:ListThingPrincipals", 
                "iot:ListThingRegistrationTaskReports", 
                "iot:ListThingRegistrationTasks", 
                "iot:ListThings", 
                "iot:ListThingsInThingGroup", 
                "iot:ListThingTypes", 
                "iot:ListTopicRules", 
                "iot:ListV2LoggingLevels", 
                "iot:SearchIndex", 
                "iot:TestAuthorization", 
                "iot:TestInvokeAuthorizer"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonWorkMailReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ses:Describe*", 
                "ses:Get*", 
                "workmail:Describe*", 
                "workmail:Get*", 
                "workmail:List*", 
                "workmail:Search*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDMSVPCManagementRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaKinesisExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesis:DescribeStream", 
                "kinesis:GetRecords", 
                "kinesis:GetShardIterator", 
                "kinesis:ListStreams", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ResourceGroupsandTagEditorReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "tag:getResources", 
                "tag:getTagKeys", 
                "tag:getTagValues"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRekognitionServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:AmazonRekognition*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesis:PutRecord", 
                "kinesis:PutRecords"
            ], 
            "Resource": "arn:aws:kinesis:*:*:stream/AmazonRekognition*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesisvideo:GetDataEndpoint", 
                "kinesisvideo:GetMedia"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMAutomationRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:Automation*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:CreateImage", 
                "ec2:CopyImage", 
                "ec2:DeregisterImage", 
                "ec2:DescribeImages", 
                "ec2:DeleteSnapshot", 
                "ec2:StartInstances", 
                "ec2:RunInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:CreateTags", 
                "ec2:DeleteTags", 
                "ec2:DescribeTags", 
                "cloudformation:CreateStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:UpdateStack", 
                "cloudformation:DeleteStack"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": [
                "arn:aws:sns:*:*:Automation*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudHSMServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ComprehendReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "comprehend:DetectDominantLanguage", 
                "comprehend:BatchDetectDominantLanguage", 
                "comprehend:DetectEntities", 
                "comprehend:BatchDetectEntities", 
                "comprehend:DetectKeyPhrases", 
                "comprehend:BatchDetectKeyPhrases", 
                "comprehend:DetectSentiment", 
                "comprehend:BatchDetectSentiment", 
                "comprehend:DescribeTopicsDetectionJob", 
                "comprehend:ListTopicsDetectionJobs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStepFunctionsConsoleFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "states:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:ListRoles", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/service-role/StatesExecutionRole*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "lambda:ListFunctions", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSQuickSightIoTAnalyticsAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iotanalytics:ListDatasets", 
                "iotanalytics:DescribeDataset", 
                "iotanalytics:GetDatasetContent"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeBuildReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codebuild:BatchGet*", 
                "codebuild:Get*", 
                "codebuild:List*", 
                "codecommit:GetBranch", 
                "codecommit:GetCommit", 
                "codecommit:GetRepository"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: LexBotPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "polly:SynthesizeSpeech"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMacieFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "macie:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMachineLearningManageRealTimeEndpointOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "machinelearning:CreateRealtimeEndpoint", 
                "machinelearning:DeleteRealtimeEndpoint"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsInvocationAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kinesis:PutRecord"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsInvocationAccess"
        }
    ]
}
Policy Name: CloudFrontReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:ListCertificates", 
                "cloudfront:Get*", 
                "cloudfront:List*", 
                "iam:ListServerCertificates", 
                "route53:List*", 
                "waf:ListWebACLs", 
                "waf:GetWebACL"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDeepLensServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:CreateThing", 
                "iot:DeleteThing", 
                "iot:DeleteThingShadow", 
                "iot:DescribeThing", 
                "iot:GetThingShadow", 
                "iot:UpdateThing", 
                "iot:UpdateThingShadow"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTThingAccess"
        }, 
        {
            "Action": [
                "iot:AttachThingPrincipal", 
                "iot:DetachThingPrincipal"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*", 
                "arn:aws:iot:*:*:cert/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTCertificateAccess"
        }, 
        {
            "Action": [
                "iot:CreateKeysAndCertificate", 
                "iot:CreatePolicy", 
                "iot:CreatePolicyVersion"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTCreateCertificateAndPolicyAccess"
        }, 
        {
            "Action": [
                "iot:AttachPrincipalPolicy"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:policy/deeplens*", 
                "arn:aws:iot:*:*:cert/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTAttachCertificatePolicyAccess"
        }, 
        {
            "Action": [
                "iot:GetThingShadow", 
                "iot:UpdateThingShadow"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTDataAccess"
        }, 
        {
            "Action": [
                "iot:DescribeEndpoint"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensIoTEndpointAccess"
        }, 
        {
            "Action": [
                "deeplens:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAccess"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::deeplens*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensS3ObjectAccess"
        }, 
        {
            "Action": [
                "s3:DeleteBucket", 
                "s3:ListBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensS3Buckets"
        }, 
        {
            "Action": [
                "s3:CreateBucket"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensCreateS3Buckets"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "greengrass.amazonaws.com", 
                        "sagemaker.amazonaws.com"
                    ]
                }
            }, 
            "Sid": "DeepLensIAMPassRoleAccess"
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/AWSDeepLens*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringEqualsIfExists": {
                    "iam:PassedToService": "lambda.amazonaws.com"
                }
            }, 
            "Sid": "DeepLensIAMLambdaPassRoleAccess"
        }, 
        {
            "Action": [
                "greengrass:AssociateRoleToGroup", 
                "greengrass:AssociateServiceRoleToAccount", 
                "greengrass:CreateResourceDefinition", 
                "greengrass:CreateResourceDefinitionVersion", 
                "greengrass:CreateCoreDefinition", 
                "greengrass:CreateCoreDefinitionVersion", 
                "greengrass:CreateDeployment", 
                "greengrass:CreateFunctionDefinition", 
                "greengrass:CreateFunctionDefinitionVersion", 
                "greengrass:CreateGroup", 
                "greengrass:CreateGroupCertificateAuthority", 
                "greengrass:CreateGroupVersion", 
                "greengrass:CreateLoggerDefinition", 
                "greengrass:CreateLoggerDefinitionVersion", 
                "greengrass:CreateSubscriptionDefinition", 
                "greengrass:CreateSubscriptionDefinitionVersion", 
                "greengrass:DeleteCoreDefinition", 
                "greengrass:DeleteFunctionDefinition", 
                "greengrass:DeleteGroup", 
                "greengrass:DeleteLoggerDefinition", 
                "greengrass:DeleteSubscriptionDefinition", 
                "greengrass:DisassociateRoleFromGroup", 
                "greengrass:DisassociateServiceRoleFromAccount", 
                "greengrass:GetAssociatedRole", 
                "greengrass:GetConnectivityInfo", 
                "greengrass:GetCoreDefinition", 
                "greengrass:GetCoreDefinitionVersion", 
                "greengrass:GetDeploymentStatus", 
                "greengrass:GetDeviceDefinition", 
                "greengrass:GetDeviceDefinitionVersion", 
                "greengrass:GetFunctionDefinition", 
                "greengrass:GetFunctionDefinitionVersion", 
                "greengrass:GetGroup", 
                "greengrass:GetGroupCertificateAuthority", 
                "greengrass:GetGroupCertificateConfiguration", 
                "greengrass:GetGroupVersion", 
                "greengrass:GetLoggerDefinition", 
                "greengrass:GetLoggerDefinitionVersion", 
                "greengrass:GetServiceRoleForAccount", 
                "greengrass:GetSubscriptionDefinition", 
                "greengrass:GetSubscriptionDefinitionVersion", 
                "greengrass:ListCoreDefinitionVersions", 
                "greengrass:ListCoreDefinitions", 
                "greengrass:ListDeployments", 
                "greengrass:ListDeviceDefinitionVersions", 
                "greengrass:ListDeviceDefinitions", 
                "greengrass:ListFunctionDefinitionVersions", 
                "greengrass:ListFunctionDefinitions", 
                "greengrass:ListGroupCertificateAuthorities", 
                "greengrass:ListGroupVersions", 
                "greengrass:ListGroups", 
                "greengrass:ListLoggerDefinitionVersions", 
                "greengrass:ListLoggerDefinitions", 
                "greengrass:ListSubscriptionDefinitionVersions", 
                "greengrass:ListSubscriptionDefinitions", 
                "greengrass:ResetDeployments", 
                "greengrass:UpdateConnectivityInfo", 
                "greengrass:UpdateCoreDefinition", 
                "greengrass:UpdateDeviceDefinition", 
                "greengrass:UpdateFunctionDefinition", 
                "greengrass:UpdateGroup", 
                "greengrass:UpdateGroupCertificateConfiguration", 
                "greengrass:UpdateLoggerDefinition", 
                "greengrass:UpdateSubscriptionDefinition"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensGreenGrassAccess"
        }, 
        {
            "Action": [
                "lambda:CreateFunction", 
                "lambda:DeleteFunction", 
                "lambda:GetFunction", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListFunctions", 
                "lambda:ListVersionsByFunction", 
                "lambda:PublishVersion", 
                "lambda:UpdateFunctionCode", 
                "lambda:UpdateFunctionConfiguration"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensLambdaAdminFunctionAccess"
        }, 
        {
            "Action": [
                "sagemaker:CreateTrainingJob", 
                "sagemaker:DescribeTrainingJob", 
                "sagemaker:StopTrainingJob"
            ], 
            "Resource": [
                "arn:aws:sagemaker:*:*:training-job/deeplens*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensSageMakerAccess"
        }, 
        {
            "Action": [
                "acuity:CreateStream", 
                "acuity:DescribeStream", 
                "acuity:DeleteStream"
            ], 
            "Resource": [
                "arn:aws:acuity:*:*:stream/deeplens*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityStreamAccess"
        }, 
        {
            "Action": [
                "acuity:GetDataEndpoint"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "DeepLensAcuityEndpointAccess"
        }
    ]
}
Policy Name: AmazonSNSRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:PutMetricFilter", 
                "logs:PutRetentionPolicy"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonInspectorServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeInstances", 
                "ec2:DescribeTags", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRegions", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "elasticloadbalancing:DescribeListeners", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeLoadBalancerAttributes", 
                "elasticloadbalancing:DescribeRules", 
                "elasticloadbalancing:DescribeTags", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:DescribeTargetHealth"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMobileAnalyticsFinancialReportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mobileanalytics:GetReports", 
                "mobileanalytics:GetFinancialReports"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkService
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:*"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/awseb-*", 
                "arn:aws:cloudformation:*:*:stack/eb-*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowCloudformationOperationsOnElasticBeanstalkStacks"
        }, 
        {
            "Action": [
                "logs:DeleteLogGroup"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowDeleteCloudwatchLogGroups"
        }, 
        {
            "Action": [
                "s3:*"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowS3OperationsOnElasticBeanstalkBuckets"
        }, 
        {
            "Action": [
                "autoscaling:AttachInstances", 
                "autoscaling:CreateAutoScalingGroup", 
                "autoscaling:CreateLaunchConfiguration", 
                "autoscaling:DeleteLaunchConfiguration", 
                "autoscaling:DeleteAutoScalingGroup", 
                "autoscaling:DeleteScheduledAction", 
                "autoscaling:DescribeAccountLimits", 
                "autoscaling:DescribeAutoScalingGroups", 
                "autoscaling:DescribeAutoScalingInstances", 
                "autoscaling:DescribeLaunchConfigurations", 
                "autoscaling:DescribeLoadBalancers", 
                "autoscaling:DescribeNotificationConfigurations", 
                "autoscaling:DescribeScalingActivities", 
                "autoscaling:DescribeScheduledActions", 
                "autoscaling:DetachInstances", 
                "autoscaling:PutScheduledUpdateGroupAction", 
                "autoscaling:ResumeProcesses", 
                "autoscaling:SetDesiredCapacity", 
                "autoscaling:SuspendProcesses", 
                "autoscaling:TerminateInstanceInAutoScalingGroup", 
                "autoscaling:UpdateAutoScalingGroup", 
                "cloudwatch:PutMetricAlarm", 
                "ec2:AssociateAddress", 
                "ec2:AllocateAddress", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeInstanceAttribute", 
                "ec2:DescribeSpotInstanceRequests", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DisassociateAddress", 
                "ec2:ReleaseAddress", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "ec2:TerminateInstances", 
                "ecs:CreateCluster", 
                "ecs:DeleteCluster", 
                "ecs:DescribeClusters", 
                "ecs:RegisterTaskDefinition", 
                "elasticbeanstalk:*", 
                "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer", 
                "elasticloadbalancing:ConfigureHealthCheck", 
                "elasticloadbalancing:CreateLoadBalancer", 
                "elasticloadbalancing:DeleteLoadBalancer", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DescribeInstanceHealth", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticloadbalancing:DescribeTargetHealth", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:DescribeTargetGroups", 
                "elasticloadbalancing:RegisterTargets", 
                "elasticloadbalancing:DeregisterTargets", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "logs:CreateLogGroup", 
                "logs:PutRetentionPolicy", 
                "rds:DescribeDBEngineVersions", 
                "rds:DescribeDBInstances", 
                "rds:DescribeOrderableDBInstanceOptions", 
                "s3:CopyObject", 
                "s3:GetObject", 
                "s3:GetObjectAcl", 
                "s3:GetObjectMetadata", 
                "s3:ListBucket", 
                "s3:listBuckets", 
                "s3:ListObjects", 
                "sns:CreateTopic", 
                "sns:GetTopicAttributes", 
                "sns:ListSubscriptionsByTopic", 
                "sns:Subscribe", 
                "sns:SetTopicAttributes", 
                "sqs:GetQueueAttributes", 
                "sqs:GetQueueUrl", 
                "codebuild:CreateProject", 
                "codebuild:DeleteProject", 
                "codebuild:BatchGetBuilds", 
                "codebuild:StartBuild"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowOperations"
        }
    ]
}
Policy Name: IAMReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:GenerateCredentialReport", 
                "iam:GenerateServiceLastAccessedDetails", 
                "iam:Get*", 
                "iam:List*", 
                "iam:SimulateCustomPolicy", 
                "iam:SimulatePrincipalPolicy"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRDSReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:Describe*", 
                "rds:ListTagsForResource", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonCognitoPowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-identity:*", 
                "cognito-idp:*", 
                "cognito-sync:*", 
                "iam:ListRoles", 
                "iam:ListOpenIdConnectProviders", 
                "sns:ListPlatformApplications"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53AutoNamingRegistrantAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:GetHostedZone", 
                "route53:ListHostedZonesByName", 
                "route53:ChangeResourceRecordSets", 
                "route53:CreateHealthCheck", 
                "route53:GetHealthCheck", 
                "route53:DeleteHealthCheck", 
                "route53:UpdateHealthCheck", 
                "servicediscovery:Get*", 
                "servicediscovery:List*", 
                "servicediscovery:RegisterInstance", 
                "servicediscovery:DeregisterInstance"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticFileSystemFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "elasticfilesystem:*", 
                "kms:DescribeKey", 
                "kms:ListAliases"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: LexChannelPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lex:PostText"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ServerMigrationConnector
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "iam:GetUser", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "sms:SendMessage", 
                "sms:GetMessages"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:DeleteBucket", 
                "s3:DeleteObject", 
                "s3:GetBucketLocation", 
                "s3:GetObject", 
                "s3:ListBucket", 
                "s3:PutObject", 
                "s3:PutObjectAcl", 
                "s3:PutLifecycleConfiguration", 
                "s3:AbortMultipartUpload", 
                "s3:ListBucketMultipartUploads", 
                "s3:ListMultipartUploadParts"
            ], 
            "Resource": [
                "arn:aws:s3:::sms-b-*", 
                "arn:aws:s3:::import-to-ec2-*", 
                "arn:aws:s3:::server-migration-service-upgrade", 
                "arn:aws:s3:::server-migration-service-upgrade/*", 
                "arn:aws:s3:::connector-platform-upgrade-info/*", 
                "arn:aws:s3:::connector-platform-upgrade-info", 
                "arn:aws:s3:::connector-platform-upgrade-bundles/*", 
                "arn:aws:s3:::connector-platform-upgrade-bundles", 
                "arn:aws:s3:::connector-platform-release-notes/*", 
                "arn:aws:s3:::connector-platform-release-notes"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": "awsconnector:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "SNS:Publish"
            ], 
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonESCognitoAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cognito-idp:DescribeUserPool", 
                "cognito-idp:CreateUserPoolClient", 
                "cognito-idp:DeleteUserPoolClient", 
                "cognito-idp:DescribeUserPoolClient", 
                "cognito-idp:AdminInitiateAuth", 
                "cognito-idp:AdminUserGlobalSignOut", 
                "cognito-idp:ListUserPoolClients", 
                "cognito-identity:DescribeIdentityPool", 
                "cognito-identity:UpdateIdentityPool", 
                "cognito-identity:SetIdentityPoolRoles", 
                "cognito-identity:GetIdentityPoolRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "cognito-identity.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AmazonChimeReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "chime:ListAccounts", 
                "chime:GetAccount", 
                "chime:GetAccountSettings", 
                "chime:ListUsers", 
                "chime:GetUser", 
                "chime:GetUserByEmail", 
                "chime:ListDomains", 
                "chime:GetDomain", 
                "chime:ListGroups", 
                "chime:ListDirectories", 
                "chime:ListCDRBucket", 
                "chime:GetCDRBucket", 
                "chime:ListDelegates", 
                "chime:GetAccountResource", 
                "chime:ValidateDelegate", 
                "chime:ListAccountUsageReportData", 
                "chime:GetUserActivityReportData"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonZocaloFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "zocalo:*", 
                "ds:*", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:DescribeChangeSet", 
                "cloudformation:DescribeStackResources", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplate", 
                "cloudformation:ListStackResources", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "cognito-identity:ListIdentityPools", 
                "cognito-sync:GetCognitoEvents", 
                "dynamodb:BatchGetItem", 
                "dynamodb:DescribeStream", 
                "dynamodb:DescribeTable", 
                "dynamodb:GetItem", 
                "dynamodb:ListStreams", 
                "dynamodb:ListTables", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "events:Describe*", 
                "events:List*", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "iam:ListRolePolicies", 
                "iam:ListRoles", 
                "iot:DescribeEndpoint", 
                "iot:GetTopicRules", 
                "iot:ListPolicies", 
                "iot:ListThings", 
                "iot:ListTopicRules", 
                "kinesis:DescribeStream", 
                "kinesis:ListStreams", 
                "kms:ListAliases", 
                "lambda:Get*", 
                "lambda:List*", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:DescribeMetricFilters", 
                "logs:GetLogEvents", 
                "s3:Get*", 
                "s3:List*", 
                "sns:ListSubscriptions", 
                "sns:ListSubscriptionsByTopic", 
                "sns:ListTopics", 
                "sqs:ListQueues", 
                "tag:GetResources"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAccountUsageReportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-portal:ViewUsage"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTOTAUpdate
{
    "Version": "2012-10-17", 
    "Statement": {
        "Action": [
            "iot:CreateJob", 
            "signer:DescribeSigningJob"
        ], 
        "Resource": "*", 
        "Effect": "Allow"
    }
}
Policy Name: AmazonMQFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mq:*", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateNetworkInterfacePermission", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteNetworkInterfacePermission", 
                "ec2:DetachNetworkInterface", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeNetworkInterfacePermissions", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceGetEntitlements
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:GetEntitlements"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceforEC2Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ecs:CreateCluster", 
                "ecs:DeregisterContainerInstance", 
                "ecs:DiscoverPollEndpoint", 
                "ecs:Poll", 
                "ecs:RegisterContainerInstance", 
                "ecs:StartTelemetrySession", 
                "ecs:UpdateContainerInstancesState", 
                "ecs:Submit*", 
                "ecr:GetAuthorizationToken", 
                "ecr:BatchCheckLayerAvailability", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:BatchGetImage", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAppStreamFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:RegisterScalableTarget"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:PutMetricAlarm"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:ListRoles", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/service-role/ApplicationAutoScalingForAmazonAppStreamAccess", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": "application-autoscaling.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSIoTDataAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:Connect", 
                "iot:Publish", 
                "iot:Subscribe", 
                "iot:Receive", 
                "iot:GetThingShadow", 
                "iot:UpdateThingShadow", 
                "iot:DeleteThingShadow"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonTranscribeReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "transcribe:Get*", 
                "transcribe:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonESFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "es:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ServerMigrationServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:ModifySnapshotAttribute", 
                "ec2:CopySnapshot", 
                "ec2:CopyImage", 
                "ec2:Describe*", 
                "ec2:DeleteSnapshot", 
                "ec2:DeregisterImage", 
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSWAFFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "waf:*", 
                "waf-regional:*", 
                "elasticloadbalancing:SetWebACL"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSArtifactAccountSync
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "organizations:ListAccounts", 
                "organizations:DescribeOrganization"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisFirehoseFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "firehose:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "logs:Get*", 
                "logs:List*", 
                "logs:Describe*", 
                "logs:TestMetricFilter", 
                "sns:Get*", 
                "sns:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaBasicExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: ResourceGroupsandTagEditorFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "tag:getResources", 
                "tag:getTagKeys", 
                "tag:getTagValues", 
                "tag:TagResources", 
                "tag:UntagResources", 
                "tag:AddResourceTags", 
                "tag:RemoveResourceTags"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSKeyManagementServicePowerUser
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "kms:CreateAlias", 
                "kms:CreateKey", 
                "kms:DeleteAlias", 
                "kms:Describe*", 
                "kms:GenerateRandom", 
                "kms:Get*", 
                "kms:List*", 
                "kms:TagResource", 
                "kms:UntagResource", 
                "iam:ListGroups", 
                "iam:ListRoles", 
                "iam:ListUsers"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingEC2SpotFleetRequestPolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeSpotFleetRequests", 
                "ec2:ModifySpotFleetRequest", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSImportExportReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "importexport:ListJobs", 
                "importexport:GetStatus"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: CloudWatchEventsServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeVolumeStatus", 
                "ec2:DescribeVolumes", 
                "ec2:RebootInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances", 
                "ec2:CreateSnapshot"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticTranscoderRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:ListBucket", 
                "s3:Put*", 
                "s3:Get*", 
                "s3:*MultipartUpload*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "1"
        }, 
        {
            "Action": [
                "sns:Publish"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "2"
        }, 
        {
            "Action": [
                "s3:*Policy*", 
                "sns:*Permission*", 
                "sns:*Delete*", 
                "s3:*Delete*", 
                "sns:*Remove*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Deny", 
            "Sid": "3"
        }
    ]
}
Policy Name: AWSGlueConsoleFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "glue:*", 
                "redshift:DescribeClusters", 
                "redshift:DescribeClusterSubnetGroups", 
                "iam:ListRoles", 
                "iam:ListRolePolicies", 
                "iam:GetRole", 
                "iam:GetRolePolicy", 
                "iam:ListAttachedRolePolicies", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeInstances", 
                "rds:DescribeDBInstances", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:GetBucketAcl", 
                "s3:GetBucketLocation", 
                "cloudformation:DescribeStacks", 
                "cloudformation:GetTemplateSummary", 
                "dynamodb:ListTables"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*/*", 
                "arn:aws:s3:::*/*aws-glue-*/*", 
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket"
            ], 
            "Resource": [
                "arn:aws:s3:::aws-glue-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:/aws-glue/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack"
            ], 
            "Resource": "arn:aws:cloudformation:*:*:stack/aws-glue*/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:RunInstances"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*", 
                "arn:aws:ec2:*:*:key-pair/*", 
                "arn:aws:ec2:*:*:image/*", 
                "arn:aws:ec2:*:*:security-group/*", 
                "arn:aws:ec2:*:*:network-interface/*", 
                "arn:aws:ec2:*:*:subnet/*", 
                "arn:aws:ec2:*:*:volume/*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:TerminateInstances", 
                "ec2:CreateTags", 
                "ec2:DeleteTags"
            ], 
            "Resource": [
                "arn:aws:ec2:*:*:instance/*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/aws-glue-*/*"
                }, 
                "StringEquals": {
                    "ec2:ResourceTag/aws:cloudformation:logical-id": "ZeppelinInstance"
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "arn:aws:iam::*:role/AWSGlueServiceRole*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "glue.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "arn:aws:iam::*:role/AWSGlueServiceNotebookRole*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "ec2.amazonaws.com"
                    ]
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/service-role/AWSGlueServiceRole*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PassedToService": [
                        "glue.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
Policy Name: AmazonEC2ContainerServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:Describe*", 
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer", 
                "elasticloadbalancing:DeregisterTargets", 
                "elasticloadbalancing:Describe*", 
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer", 
                "elasticloadbalancing:RegisterTargets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSDeviceFarmFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "devicefarm:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:Describe*", 
                "ssm:Get*", 
                "ssm:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStepFunctionsReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "states:ListStateMachines", 
                "states:ListActivities", 
                "states:DescribeStateMachine", 
                "states:DescribeStateMachineForExecution", 
                "states:ListExecutions", 
                "states:DescribeExecution", 
                "states:GetExecutionHistory", 
                "states:DescribeActivity"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceRead-only
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:ViewSubscriptions", 
                "ec2:DescribeAccountAttributes", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSApplicationAutoscalingDynamoDBTablePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "dynamodb:DescribeTable", 
                "dynamodb:UpdateTable", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodePipelineFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codepipeline:*", 
                "iam:ListRoles", 
                "iam:PassRole", 
                "s3:CreateBucket", 
                "s3:GetBucketPolicy", 
                "s3:GetObject", 
                "s3:ListAllMyBuckets", 
                "s3:ListBucket", 
                "s3:PutBucketPolicy", 
                "codecommit:ListBranches", 
                "codecommit:ListRepositories", 
                "codedeploy:GetApplication", 
                "codedeploy:GetDeploymentGroup", 
                "codedeploy:ListApplications", 
                "codedeploy:ListDeploymentGroups", 
                "elasticbeanstalk:DescribeApplications", 
                "elasticbeanstalk:DescribeEnvironments", 
                "lambda:GetFunctionConfiguration", 
                "lambda:ListFunctions", 
                "opsworks:DescribeApps", 
                "opsworks:DescribeLayers", 
                "opsworks:DescribeStacks", 
                "cloudformation:DescribeStacks", 
                "cloudformation:ListChangeSets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloud9User
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloud9:CreateEnvironment*", 
                "cloud9:ValidateEnvironmentName", 
                "cloud9:GetUserPublicKey", 
                "cloud9:UpdateUserSettings", 
                "cloud9:GetUserSettings", 
                "iam:GetUser", 
                "iam:ListUsers", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloud9:DescribeEnvironmentMemberships"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "Null": {
                    "cloud9:UserArn": "true", 
                    "cloud9:EnvironmentId": "true"
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "cloud9.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSGreengrassResourceAccessRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:DeleteThingShadow", 
                "iot:GetThingShadow", 
                "iot:UpdateThingShadow"
            ], 
            "Resource": [
                "arn:aws:iot:*:*:thing/GG_*", 
                "arn:aws:iot:*:*:thing/*-gcm", 
                "arn:aws:iot:*:*:thing/*-gda", 
                "arn:aws:iot:*:*:thing/*-gci"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToShadows"
        }, 
        {
            "Action": [
                "iot:DescribeThing"
            ], 
            "Resource": "arn:aws:iot:*:*:thing/*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToDescribeThings"
        }, 
        {
            "Action": [
                "iot:DescribeCertificate"
            ], 
            "Resource": "arn:aws:iot:*:*:cert/*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToDescribeCertificates"
        }, 
        {
            "Action": [
                "greengrass:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToCallGreengrassServices"
        }, 
        {
            "Action": [
                "lambda:GetFunction", 
                "lambda:GetFunctionConfiguration"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassToGetLambdaFunctions"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": [
                "arn:aws:s3:::*Greengrass*", 
                "arn:aws:s3:::*GreenGrass*", 
                "arn:aws:s3:::*greengrass*", 
                "arn:aws:s3:::*Sagemaker*", 
                "arn:aws:s3:::*SageMaker*", 
                "arn:aws:s3:::*sagemaker*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToS3Objects"
        }, 
        {
            "Action": [
                "s3:GetBucketLocation"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToS3BucketLocation"
        }, 
        {
            "Action": [
                "sagemaker:DescribeTrainingJob"
            ], 
            "Resource": [
                "arn:aws:sagemaker:*:*:training-job/*"
            ], 
            "Effect": "Allow", 
            "Sid": "AllowGreengrassAccessToSageMakerTrainingJobs"
        }
    ]
}
Policy Name: NetworkAdministrator
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "autoscaling:Describe*", 
                "ec2:AllocateAddress", 
                "ec2:AssignPrivateIpAddresses", 
                "ec2:AssociateAddress", 
                "ec2:AssociateDhcpOptions", 
                "ec2:AssociateRouteTable", 
                "ec2:AttachInternetGateway", 
                "ec2:AttachNetworkInterface", 
                "ec2:AttachVpnGateway", 
                "ec2:CreateCustomerGateway", 
                "ec2:CreateDhcpOptions", 
                "ec2:CreateFlowLogs", 
                "ec2:CreateInternetGateway", 
                "ec2:CreateNatGateway", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAcl", 
                "ec2:CreateNetworkAclEntry", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateRoute", 
                "ec2:CreateRouteTable", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:CreateVpcEndpoint", 
                "ec2:CreateVpnConnection", 
                "ec2:CreateVpnConnectionRoute", 
                "ec2:CreateVpnGateway", 
                "ec2:CreatePlacementGroup", 
                "ec2:DeletePlacementGroup", 
                "ec2:DescribePlacementGroups", 
                "ec2:DeleteFlowLogs", 
                "ec2:DeleteNatGateway", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteTags", 
                "ec2:DeleteVpc", 
                "ec2:DeleteVpcEndpoints", 
                "ec2:DeleteVpnConnection", 
                "ec2:DeleteVpnConnectionRoute", 
                "ec2:DeleteVpnGateway", 
                "ec2:DescribeAddresses", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeClassicLinkInstances", 
                "ec2:DescribeCustomerGateways", 
                "ec2:DescribeVpcClassicLinkDnsSupport", 
                "ec2:DescribeDhcpOptions", 
                "ec2:DescribeFlowLogs", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeKeyPairs", 
                "ec2:DescribeMovingAddresses", 
                "ec2:DescribeNatGateways", 
                "ec2:DescribeNetworkAcls", 
                "ec2:DescribeNetworkInterfaceAttribute", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribePrefixLists", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcClassicLink", 
                "ec2:DescribeVpcEndpoints", 
                "ec2:DescribeVpcEndpointServices", 
                "ec2:DescribeVpcPeeringConnections", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeVpnConnections", 
                "ec2:DescribeVpnGateways", 
                "ec2:DetachInternetGateway", 
                "ec2:DetachNetworkInterface", 
                "ec2:DetachVpnGateway", 
                "ec2:DisableVgwRoutePropagation", 
                "ec2:DisassociateAddress", 
                "ec2:DisassociateRouteTable", 
                "ec2:EnableVgwRoutePropagation", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:ModifySubnetAttribute", 
                "ec2:ModifyVpcAttribute", 
                "ec2:ModifyVpcEndpoint", 
                "ec2:MoveAddressToVpc", 
                "ec2:ReleaseAddress", 
                "ec2:ReplaceNetworkAclAssociation", 
                "ec2:ReplaceNetworkAclEntry", 
                "ec2:ReplaceRoute", 
                "ec2:ReplaceRouteTableAssociation", 
                "ec2:ResetNetworkInterfaceAttribute", 
                "ec2:RestoreAddressToClassic", 
                "ec2:UnassignPrivateIpAddresses", 
                "directconnect:*", 
                "route53:*", 
                "route53domains:*", 
                "cloudfront:ListDistributions", 
                "elasticloadbalancing:*", 
                "elasticbeanstalk:Describe*", 
                "elasticbeanstalk:List*", 
                "elasticbeanstalk:RetrieveEnvironmentInfo", 
                "elasticbeanstalk:RequestEnvironmentInfo", 
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "sns:CreateTopic", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DeleteAlarms", 
                "cloudwatch:GetMetricStatistics", 
                "logs:DescribeLogGroups", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ec2:AcceptVpcPeeringConnection", 
                "ec2:AttachClassicLinkVpc", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateVpcPeeringConnection", 
                "ec2:DeleteCustomerGateway", 
                "ec2:DeleteDhcpOptions", 
                "ec2:DeleteInternetGateway", 
                "ec2:DeleteNetworkAcl", 
                "ec2:DeleteNetworkAclEntry", 
                "ec2:DeleteRoute", 
                "ec2:DeleteRouteTable", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteVolume", 
                "ec2:DeleteVpcPeeringConnection", 
                "ec2:DetachClassicLinkVpc", 
                "ec2:DisableVpcClassicLink", 
                "ec2:EnableVpcClassicLink", 
                "ec2:GetConsoleScreenshot", 
                "ec2:RejectVpcPeeringConnection", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "s3:GetBucketWebsiteConfiguration"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:ListRoles", 
                "iam:PassRole"
            ], 
            "Resource": "arn:aws:iam::*:role/flow-logs-*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonWorkSpacesApplicationManagerAdminAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "wam:AuthenticatePackager", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonDRSVPCManagement
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInternetGateways", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcAttribute", 
                "ec2:DescribeVpcs", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRedshiftServiceLinkedRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeAddresses", 
                "ec2:AssociateAddress", 
                "ec2:DisassociateAddress", 
                "ec2:CreateNetworkInterface", 
                "ec2:DeleteNetworkInterface", 
                "ec2:ModifyNetworkInterfaceAttribute"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSXrayFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "xray:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkWorkerTier
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:PutMetricData"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "MetricsAccess"
        }, 
        {
            "Action": [
                "xray:PutTraceSegments", 
                "xray:PutTelemetryRecords"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "XRayAccess"
        }, 
        {
            "Action": [
                "sqs:ChangeMessageVisibility", 
                "sqs:DeleteMessage", 
                "sqs:ReceiveMessage", 
                "sqs:SendMessage"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "QueueAccess"
        }, 
        {
            "Action": [
                "s3:Get*", 
                "s3:List*", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "BucketAccess"
        }, 
        {
            "Action": [
                "dynamodb:BatchGetItem", 
                "dynamodb:BatchWriteItem", 
                "dynamodb:DeleteItem", 
                "dynamodb:GetItem", 
                "dynamodb:PutItem", 
                "dynamodb:Query", 
                "dynamodb:Scan", 
                "dynamodb:UpdateItem"
            ], 
            "Resource": [
                "arn:aws:dynamodb:*:*:table/*-stack-AWSEBWorkerCronLeaderRegistry*"
            ], 
            "Effect": "Allow", 
            "Sid": "DynamoPeriodicTasks"
        }, 
        {
            "Action": [
                "logs:PutLogEvents", 
                "logs:CreateLogStream"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ], 
            "Effect": "Allow", 
            "Sid": "CloudWatchLogsAccess"
        }
    ]
}
Policy Name: AWSDirectConnectFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "directconnect:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeBuildAdminAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codebuild:*", 
                "codecommit:GetBranch", 
                "codecommit:GetCommit", 
                "codecommit:GetRepository", 
                "codecommit:ListBranches", 
                "codecommit:ListRepositories", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ecr:DescribeRepositories", 
                "ecr:ListImages", 
                "s3:GetBucketLocation", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "logs:GetLogEvents"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ssm:PutParameter"
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonKinesisAnalyticsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "kinesisanalytics:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "kinesis:CreateStream", 
                "kinesis:DeleteStream", 
                "kinesis:DescribeStream", 
                "kinesis:ListStreams", 
                "kinesis:PutRecord", 
                "kinesis:PutRecords"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "firehose:DescribeDeliveryStream", 
                "firehose:ListDeliveryStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "logs:GetLogEvents", 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:ListPolicyVersions", 
                "iam:ListRoles"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/service-role/kinesis-analytics*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: APIGatewayServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "elasticloadbalancing:AddListenerCertificates", 
                "elasticloadbalancing:RemoveListenerCertificates", 
                "elasticloadbalancing:ModifyListener"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSAccountActivityAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-portal:ViewBilling"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonGlacierFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "glacier:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonWorkMailFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ds:AuthorizeApplication", 
                "ds:CheckAlias", 
                "ds:CreateAlias", 
                "ds:CreateDirectory", 
                "ds:CreateIdentityPoolDirectory", 
                "ds:CreateDomain", 
                "ds:DeleteAlias", 
                "ds:DeleteDirectory", 
                "ds:DescribeDirectories", 
                "ds:ExtendDirectory", 
                "ds:GetDirectoryLimits", 
                "ds:ListAuthorizedApplications", 
                "ds:UnauthorizeApplication", 
                "ec2:AuthorizeSecurityGroupEgress", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSubnet", 
                "ec2:CreateTags", 
                "ec2:CreateVpc", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSubnet", 
                "ec2:DeleteVpc", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeDomains", 
                "ec2:DescribeRouteTables", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:RevokeSecurityGroupEgress", 
                "ec2:RevokeSecurityGroupIngress", 
                "kms:DescribeKey", 
                "kms:ListAliases", 
                "ses:*", 
                "workmail:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: DAXServiceRolePolicy
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CreateNetworkInterface", 
                "ec2:CreateSecurityGroup", 
                "ec2:DeleteNetworkInterface", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeVpcs", 
                "ec2:ModifyNetworkInterfaceAttribute", 
                "ec2:RevokeSecurityGroupIngress"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSMarketplaceManageSubscriptions
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "aws-marketplace:ViewSubscriptions", 
                "aws-marketplace:Subscribe", 
                "aws-marketplace:Unsubscribe"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSElasticBeanstalkCustomPlatformforEC2Role
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:AttachVolume", 
                "ec2:AuthorizeSecurityGroupIngress", 
                "ec2:CopyImage", 
                "ec2:CreateImage", 
                "ec2:CreateKeypair", 
                "ec2:CreateSecurityGroup", 
                "ec2:CreateSnapshot", 
                "ec2:CreateTags", 
                "ec2:CreateVolume", 
                "ec2:DeleteKeypair", 
                "ec2:DeleteSecurityGroup", 
                "ec2:DeleteSnapshot", 
                "ec2:DeleteVolume", 
                "ec2:DeregisterImage", 
                "ec2:DescribeImageAttribute", 
                "ec2:DescribeImages", 
                "ec2:DescribeInstances", 
                "ec2:DescribeRegions", 
                "ec2:DescribeSecurityGroups", 
                "ec2:DescribeSnapshots", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeTags", 
                "ec2:DescribeVolumes", 
                "ec2:DetachVolume", 
                "ec2:GetPasswordData", 
                "ec2:ModifyImageAttribute", 
                "ec2:ModifyInstanceAttribute", 
                "ec2:ModifySnapshotAttribute", 
                "ec2:RegisterImage", 
                "ec2:RunInstances", 
                "ec2:StopInstances", 
                "ec2:TerminateInstances"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "EC2Access"
        }, 
        {
            "Action": [
                "s3:Get*", 
                "s3:List*", 
                "s3:PutObject"
            ], 
            "Resource": [
                "arn:aws:s3:::elasticbeanstalk-*", 
                "arn:aws:s3:::elasticbeanstalk-*/*"
            ], 
            "Effect": "Allow", 
            "Sid": "BucketAccess"
        }, 
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/platform/*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchLogsAccess"
        }
    ]
}
Policy Name: AWSSupportAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "support:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonElasticMapReduceforAutoScalingRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:DescribeAlarms", 
                "elasticmapreduce:ListInstanceGroups", 
                "elasticmapreduce:ModifyInstanceGroups"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaInvocation-DynamoDB
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "dynamodb:DescribeStream", 
                "dynamodb:GetRecords", 
                "dynamodb:GetShardIterator", 
                "dynamodb:ListStreams"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSServiceCatalogEndUserFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:SetStackPolicy", 
                "cloudformation:ValidateTemplate", 
                "cloudformation:UpdateStack", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:DescribeChangeSet", 
                "cloudformation:ExecuteChangeSet", 
                "cloudformation:ListChangeSets", 
                "cloudformation:DeleteChangeSet"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/SC-*", 
                "arn:aws:cloudformation:*:*:changeSet/SC-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:GetTemplateSummary", 
                "servicecatalog:DescribeProduct", 
                "servicecatalog:DescribeProductView", 
                "servicecatalog:DescribeProvisioningParameters", 
                "servicecatalog:ListLaunchPaths", 
                "servicecatalog:ProvisionProduct", 
                "servicecatalog:SearchProducts"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "servicecatalog:DescribeProvisionedProduct", 
                "servicecatalog:DescribeRecord", 
                "servicecatalog:ListRecordHistory", 
                "servicecatalog:ScanProvisionedProducts", 
                "servicecatalog:TerminateProvisionedProduct", 
                "servicecatalog:UpdateProvisionedProduct", 
                "servicecatalog:SearchProvisionedProducts", 
                "servicecatalog:CreateProvisionedProductPlan", 
                "servicecatalog:DescribeProvisionedProductPlan", 
                "servicecatalog:ExecuteProvisionedProductPlan", 
                "servicecatalog:DeleteProvisionedProductPlan", 
                "servicecatalog:ListProvisionedProductPlans"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "servicecatalog:userLevel": "self"
                }
            }
        }
    ]
}
Policy Name: IAMUserSSHKeys
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iam:DeleteSSHPublicKey", 
                "iam:GetSSHPublicKey", 
                "iam:ListSSHPublicKeys", 
                "iam:UpdateSSHPublicKey", 
                "iam:UploadSSHPublicKey"
            ], 
            "Resource": "arn:aws:iam::*:user/${aws:username}", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSageMakerReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sagemaker:DescribeEndpoint", 
                "sagemaker:DescribeEndpointConfig", 
                "sagemaker:DescribeModel", 
                "sagemaker:DescribeTrainingJob", 
                "sagemaker:DescribeNotebookInstance", 
                "sagemaker:ListEndpointConfigs", 
                "sagemaker:ListEndpoints", 
                "sagemaker:ListModels", 
                "sagemaker:ListTags", 
                "sagemaker:ListTrainingJobs", 
                "sagemaker:ListNotebookInstances", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:DescribeScheduledActions", 
                "cloudwatch:DescribeAlarms"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSIoTFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "iot:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSQuickSightDescribeRDS
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "rds:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSConfigRulesExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "arn:aws:s3:::*/AWSLogs/*/Config/*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "config:Put*", 
                "config:Get*", 
                "config:List*", 
                "config:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonESReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "es:Describe*", 
                "es:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCodeDeployDeployerAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "codedeploy:Batch*", 
                "codedeploy:CreateDeployment", 
                "codedeploy:Get*", 
                "codedeploy:List*", 
                "codedeploy:RegisterApplicationRevision"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonPollyFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "polly:*"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSSMMaintenanceWindowRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ssm:GetAutomationExecution", 
                "ssm:GetParameters", 
                "ssm:ListCommands", 
                "ssm:SendCommand", 
                "ssm:StartAutomationExecution"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1477803259000"
        }, 
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": [
                "arn:aws:lambda:*:*:function:SSM*", 
                "arn:aws:lambda:*:*:function:*:SSM*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1477803259001"
        }, 
        {
            "Action": [
                "states:DescribeExecution", 
                "states:StartExecution"
            ], 
            "Resource": [
                "arn:aws:states:*:*:stateMachine:SSM*", 
                "arn:aws:states:*:*:execution:SSM*"
            ], 
            "Effect": "Allow", 
            "Sid": "Stmt1477803259002"
        }
    ]
}
Policy Name: AmazonRDSEnhancedMonitoringRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:PutRetentionPolicy"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:RDS*"
            ], 
            "Effect": "Allow", 
            "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogGroups"
        }, 
        {
            "Action": [
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:log-group:RDS*:log-stream:*"
            ], 
            "Effect": "Allow", 
            "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogStreams"
        }
    ]
}
Policy Name: AmazonLexFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "kms:DescribeKey", 
                "kms:ListAliases", 
                "lambda:GetPolicy", 
                "lambda:ListFunctions", 
                "lex:*", 
                "polly:DescribeVoices", 
                "polly:SynthesizeSpeech"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "lambda:AddPermission", 
                "lambda:RemovePermission"
            ], 
            "Resource": "arn:aws:lambda:*:*:function:AmazonLex*", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "lambda:Principal": "lex.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:GetRole", 
                "iam:DeleteRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots", 
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "lex.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:DetachRolePolicy"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/AmazonLexBotPolicy"
                }
            }
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "channels.lex.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:DeleteServiceLinkedRole", 
                "iam:GetServiceLinkedRoleDeletionStatus"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:DetachRolePolicy"
            ], 
            "Resource": [
                "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ], 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:PolicyArn": "arn:aws:iam::aws:policy/aws-service-role/LexChannelPolicy"
                }
            }
        }
    ]
}
Policy Name: AWSLambdaVPCAccessExecutionRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DeleteNetworkInterface"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonMacieServiceRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "s3:Get*", 
                "s3:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonLexRunBotsOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lex:PostContent", 
                "lex:PostText"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSNSFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sns:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSServiceCatalogAdminFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:CreateStack", 
                "cloudformation:DeleteStack", 
                "cloudformation:DescribeStackEvents", 
                "cloudformation:DescribeStacks", 
                "cloudformation:SetStackPolicy", 
                "cloudformation:UpdateStack", 
                "cloudformation:CreateChangeSet", 
                "cloudformation:DescribeChangeSet", 
                "cloudformation:ExecuteChangeSet", 
                "cloudformation:ListChangeSets", 
                "cloudformation:DeleteChangeSet", 
                "cloudformation:ListStackResources"
            ], 
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/SC-*", 
                "arn:aws:cloudformation:*:*:changeSet/SC-*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "cloudformation:CreateUploadBucket", 
                "cloudformation:GetTemplateSummary", 
                "cloudformation:ValidateTemplate", 
                "iam:GetGroup", 
                "iam:GetRole", 
                "iam:GetUser", 
                "iam:ListGroups", 
                "iam:ListRoles", 
                "iam:ListUsers", 
                "servicecatalog:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": "servicecatalog.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: CloudSearchReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudsearch:Describe*", 
                "cloudsearch:List*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSGreengrassFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "greengrass:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCloudFormationReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "cloudformation:Describe*", 
                "cloudformation:EstimateTemplateCost", 
                "cloudformation:Get*", 
                "cloudformation:List*", 
                "cloudformation:ValidateTemplate"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonRoute53FullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "route53:*", 
                "route53domains:*", 
                "cloudfront:ListDistributions", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "elasticbeanstalk:DescribeEnvironments", 
                "s3:ListBucket", 
                "s3:GetBucketLocation", 
                "s3:GetBucketWebsite", 
                "ec2:DescribeVpcs", 
                "ec2:DescribeRegions", 
                "sns:ListTopics", 
                "sns:ListSubscriptionsByTopic", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaRole
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "lambda:InvokeFunction"
            ], 
            "Resource": [
                "*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSLambdaENIManagementAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DeleteNetworkInterface"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSOpsWorksCloudWatchLogs
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams"
            ], 
            "Resource": [
                "arn:aws:logs:*:*:*"
            ], 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonAppStreamReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "appstream:Get*", 
                "appstream:List*", 
                "appstream:Describe*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSStepFunctionsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "states:*", 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonInspectorReadOnlyAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "inspector:Describe*", 
                "inspector:Get*", 
                "inspector:List*", 
                "inspector:LocalizeText", 
                "inspector:Preview*", 
                "ec2:DescribeInstances", 
                "ec2:DescribeTags", 
                "sns:ListTopics", 
                "events:DescribeRule", 
                "events:ListRuleNamesByTarget"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: TranslateReadOnly
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "translate:TranslateText", 
                "comprehend:DetectDominantLanguage", 
                "cloudwatch:GetMetricStatistics"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AWSCertificateManagerFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "acm:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: PowerUserAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "NotAction": [
                "iam:*", 
                "organizations:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "iam:CreateServiceLinkedRole", 
                "iam:DeleteServiceLinkedRole", 
                "iam:ListRoles", 
                "organizations:DescribeOrganization"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }
    ]
}
Policy Name: AmazonSageMakerFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "sagemaker:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "ecr:GetAuthorizationToken", 
                "ecr:GetDownloadUrlForLayer", 
                "ecr:BatchGetImage", 
                "ecr:BatchCheckLayerAvailability", 
                "cloudwatch:PutMetricData", 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:DeleteAlarms", 
                "application-autoscaling:DeleteScalingPolicy", 
                "application-autoscaling:DeleteScheduledAction", 
                "application-autoscaling:DeregisterScalableTarget", 
                "application-autoscaling:DescribeScalableTargets", 
                "application-autoscaling:DescribeScalingActivities", 
                "application-autoscaling:DescribeScalingPolicies", 
                "application-autoscaling:DescribeScheduledActions", 
                "application-autoscaling:PutScalingPolicy", 
                "application-autoscaling:PutScheduledAction", 
                "application-autoscaling:RegisterScalableTarget", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogStreams", 
                "logs:GetLogEvents", 
                "logs:PutLogEvents"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject", 
                "s3:PutObject", 
                "s3:DeleteObject"
            ], 
            "Resource": [
                "arn:aws:s3:::*SageMaker*", 
                "arn:aws:s3:::*Sagemaker*", 
                "arn:aws:s3:::*sagemaker*"
            ], 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:CreateBucket", 
                "s3:GetBucketLocation", 
                "s3:ListBucket", 
                "s3:ListAllMyBuckets"
            ], 
            "Resource": "*", 
            "Effect": "Allow"
        }, 
        {
            "Action": [
                "s3:GetObject"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEqualsIgnoreCase": {
                    "s3:ExistingObjectTag/SageMaker": "true"
                }
            }
        }, 
        {
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint", 
            "Effect": "Allow", 
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
                }
            }
        }, 
        {
            "Action": [
                "iam:PassRole"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": "sagemaker.amazonaws.com"
                }
            }
        }
    ]
}
Policy Name: AWSElementalMediaStoreFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": [
                "mediastore:*"
            ], 
            "Resource": "*", 
            "Effect": "Allow", 
            "Condition": {
                "Bool": {
                    "aws:SecureTransport": "true"
                }
            }
        }
    ]
}
Policy Name: CloudWatchEventsFullAccess
{
    "Version": "2012-10-17", 
    "Statement": [
        {
            "Action": "events:*", 
            "Resource": "*", 
            "Effect": "Allow", 
            "Sid": "CloudWatchEventsFullAccess"
        }, 
        {
            "Action": "iam:PassRole", 
            "Resource": "arn:aws:iam::*:role/AWS_Events_Invoke_Targets", 
            "Effect": "Allow", 
            "Sid": "IAMPassRoleForCloudWatchEvents"
        }
    ]
}
