{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "AWS Alerting - This templates creates  components to enable alerting",
	"Parameters": {
		"filterPatternIam": {
			"Default": "{ ( ($.eventSource = \"iam.amazonaws.com\") && (($.eventName = \"Put*Policy\") || ($.eventName = \"Attach*\") || ($.eventName = \"Detach*\") || ($.eventName = \"Create*\") || ($.eventName = \"Update*\") || ($.eventName = \"Upload*\") || ($.eventName = \"Delete*\") || ($.eventName = \"Remove*\") || ($.eventName = \"Set*\")) ) }",
			"Description": "IAM Filter pattern for logs", 
			"Type": "String"
		},
		"filterPatternNetwork": {
			"Default": "{($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) || ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) || ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink)}",
			"Description": "Network Filter pattern for logs",
			"Type": "String"
		},
		"filterPatternSecurity": {
			"Default": "{(($.errorCode = \"*UnauthorizedOperation\") || ($.errorCode = \"AccessDenied*\") || ($.eventName = \"CreateTrail\") || ($.eventName = \"UpdateTrail\") || ($.eventName = \"DeleteTrail\") || ($.eventName = \"StartLogging\") || ($.eventName = \"StopLogging\")|| ($.eventName = \"ConsoleLogin\") && ($.errorMessage = \"Failed authentication\")|| (($.userIdentity.type = \"Root\") && ($.userIdentity.invokedBy NOT EXISTS )&& ($.eventType != \"AwsServiceEvent\"))) && (($.eventName != \"Get*\")&&($.eventName != \"Describe*\")&&($.eventName != \"List*\"))}",
			"Description": "Security Filter pattern for logs",
			"Type": "String"
		},
		"filterPatternKms": {
			"Default": "{ ( ($.eventSource = \"kms.amazonaws.com\") && (($.eventName = \"ScheduleKeyDeletion\") || ($.eventName = \"DeleteKey\") || ($.eventName = \"DisableKey\"))) }",
			"Description": "KMS Filter pattern for logs", 
			"Type": "String"
		},
		"filterPatternSecuritygroups": {
			"Default": "{($.eventName = \"RevokeSecurityGroupIngress\" )  || ($.eventName = \"AuthorizeSecurityGroupEgress\" ) || ($.eventName = \"DeleteSecurityGroup\" ) || ($.eventName = \"AuthorizeSecurityGroupIngress\" ) || ($.eventName = \"RevokeSecurityGroupEgress\") || ($.eventName = \"CreateSecurityGroup\") }",
			"Description": "Security Groups Filter pattern for logs", 
			"Type": "String"
		},
		
		"AlarmThreshold": {
			"Default": "1",
			"Description": "Alarm threshold", 
			"Type": "String"
		},
		"logGroup": {
			"Default": "CloudTrail/DefaultLogGroup",
			"Description": "LogGroup where logs are stored",
			"Type": "String"
		},
		"delay": {
			"Default": "20",
			"Description": "Defines how many minutes the logs can be ago",
			"Type": "String"
		},
		"metricNamespace": {
			"Default": "AlertingCustomMetrics",
			"Description": "When the metric reaches the threshold the alarm is triggered.",
			"Type": "String"
		},
		"networkMetricName": {
			"Default": "NetworkAlerts",
			"Description": "Name of Metric",
			"Type": "String"
		},
		"securityMetricName": {
			"Default": "SecurityAlerts",
			"Description": "Name of Metric",
			"Type": "String"
		},
		"IAMMetricName": {
			"Default": "IAMAlerts",
			"Description": "Name of Metric",
			"Type": "String"
		},
		"KMSMetricName": {
			"Default": "KMSAlerts",
			"Description": "Name of Metric",
			"Type": "String"
		},
		"SecurityGroupsMetricName": {
			"Default": "SecurityGroupsAlerts",
			"Description": "Name of Metric",
			"Type": "String"
		},
		"TopicEmail": {
			"Default": "cloudops@allianz.de",
			"Description": "E-Mail address to subscribe to alerts",
			"Type": "String"
		},
		"LambdaZipVersion": {
			"Default": "1",
			"Description": "Version of lambda stored in S3Bucket",
			"Type": "String"
		},
		"Sender": {
		  "Default": "cloudops@allianz.de",
		  "Description": "E-Mail address to send email",
		  "Type": "String" 
		},
		"Receiver": {
		  "Default": "cloudops@allianz.de",
		  "Description": "E-Mail address of receiver",
		  "Type": "String" 
		}
	},
	"Resources": {
		"AlertingLambda": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"FunctionName": "AlertingLambda",
				"Description": "Function to create an alarm to monitor logs",
				"Code": {
					"S3Bucket": "aws-alerting",
					"S3Key": {
						"Fn::Join": [
							"", [
								"Alerting",
								{
									"Ref": "LambdaZipVersion"
								},
								".zip"
							]
						]
					}
				},
				"Handler": "Alerting.lambda_handler",
				"Role": {
					"Fn::GetAtt": [
						"AlertingExecutionRole",
						"Arn"
					]
				},
				"Runtime": "python2.7",
				"Timeout": "300",
				"Environment": {
					"Variables": {
						"delay": {
							"Ref": "delay"
						},
						"filterPatternNetwork": {
							"Ref": "filterPatternNetwork"
						},
						"filterPatternIam": {
							"Ref": "filterPatternIam"
						},
						"filterPatternSecurity": {
							"Ref": "filterPatternSecurity"
						},
						"filterPatternKms": {
							"Ref": "filterPatternKms"
						},
						"filterPatternSecuritygroups": {
							"Ref": "filterPatternSecuritygroups"
						},
						"snsArn": {
							"Ref": "NotificationSNS"
						},
						"Sender": {
						    "Ref": "Sender"
						},
						"Receiver": {
						    "Ref": "Receiver"
						}
					}
				}
			}
		},
		"AlertingExecutionRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "AlertingExecutionRole",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
							"Effect": "Allow",
							"Principal": {
								"Service": "lambda.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						},
						{
							"Effect": "Allow",
							"Principal": {
								"AWS": {
									"Ref": "AWS::AccountId"
								}
							},
							"Action": "sts:AssumeRole"
						}
					]
				},
				"Path": "/",
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/AWSSupportAccess",
					"arn:aws:iam::aws:policy/ReadOnlyAccess"
				],
				"Policies": [{
					"PolicyName": "Alerting-Assume-Role",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
								"Effect": "Allow",
								"Action": [
									"logs:CreateLogGroup",
									"logs:CreateLogStream",
									"logs:GetLogEvents",
									"logs:PutLogEvents"
								],
								"Resource": [
									"arn:aws:logs:*:*:*"
								]
							},
							{
								"Effect": "Allow",
								"Action": [
									"ses:*",
									"sns:*",
									"support:*",
									"events:*",
									"cloudwatch:*",
									"lambda:AddPermission",
									"lambda:RemovePermission",
									"sts:AssumeRole",
									"ec2:DescribeRegions",
									"iam:GetRole",
									"iam:PassRole"
								],
								"Resource": "*"
							}
						]
					}
				}]
			}
		},
		"NetworkLambdaInvokePermission": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"FunctionName": {
					"Fn::GetAtt": [
						"AlertingLambda",
						"Arn"
					]
				},
				"Action": "lambda:InvokeFunction",
				"Principal": "sns.amazonaws.com",
				"SourceArn": {
					"Ref": "NetworkAlertingSNSTopicTrigger"
				}
			}
		},
		"SecurityLambdaInvokePermission": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"FunctionName": {
					"Fn::GetAtt": [
						"AlertingLambda",
						"Arn"
					]
				},
				"Action": "lambda:InvokeFunction",
				"Principal": "sns.amazonaws.com",
				"SourceArn": {
					"Ref": "SecurityAlertingSNSTopicTrigger"
				}
			}
		},
		"IAMLambdaInvokePermission": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"FunctionName": {
					"Fn::GetAtt": [
						"AlertingLambda",
						"Arn"
					]
				},
				"Action": "lambda:InvokeFunction",
				"Principal": "sns.amazonaws.com",
				"SourceArn": {
					"Ref": "IAMAlertingSNSTopicTrigger"
				}
			}
		},
		"KMSLambdaInvokePermission": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"FunctionName": {
					"Fn::GetAtt": [
						"AlertingLambda",
						"Arn"
					]
				},
				"Action": "lambda:InvokeFunction",
				"Principal": "sns.amazonaws.com",
				"SourceArn": {
					"Ref": "KMSAlertingSNSTopicTrigger"
				}
			}
		},
		"SecurityGroupsLambdaInvokePermission": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"FunctionName": {
					"Fn::GetAtt": [
						"AlertingLambda",
						"Arn"
					]
				},
				"Action": "lambda:InvokeFunction",
				"Principal": "sns.amazonaws.com",
				"SourceArn": {
					"Ref": "SecurityGroupsAlertingSNSTopicTrigger"
				}
			}
		},
		"NetworkAlertingSNSTopicTrigger": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"DisplayName": "NetworkTriggerAlertingLambdaSNS",
				"Subscription": [
					{"Endpoint": {"Fn::GetAtt": ["AlertingLambda","Arn"]},"Protocol": "lambda"}
				],
				"TopicName":"AZD-ALERTS-NETWORK-NetworkLambdaTrigger"
			},
			"DependsOn": [
					"AlertingLambda"
			],
			"Metadata": {
				"Comment": "Create an SNS Topic to Publish Service Limit Alerts to cloudopsteam"
			}
		},
		"SecurityAlertingSNSTopicTrigger": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"DisplayName": "SecurityTriggerAlertingLambdaSNS",
				"Subscription": [
					{"Endpoint": {"Fn::GetAtt": ["AlertingLambda","Arn"]},"Protocol": "lambda"}
				],
				"TopicName":"AZD-ALERTS-SECURITY-SecurityLambdaTrigger"
			},
			"DependsOn": [
				"AlertingLambda"
			],
			"Metadata": {
				"Comment": "Create an SNS Topic to Publish Service Limit Alerts to cloudopsteam"
			}
		},
		"IAMAlertingSNSTopicTrigger": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"DisplayName": "IAMTriggerAlertingLambdaSNS",
				"Subscription": [
					{"Endpoint": {"Fn::GetAtt": ["AlertingLambda","Arn"]},"Protocol": "lambda"}
				],
				"TopicName":"AZD-ALERTS-IAM-IAMLambdaTrigger"
			},
			"DependsOn": [
				"AlertingLambda"
			],
			"Metadata": {
				"Comment": "Create an SNS Topic to Publish Service Limit Alerts to cloudopsteam"
			}
		},
		"KMSAlertingSNSTopicTrigger": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"DisplayName": "KMSTriggerAlertingLambdaSNS",
				"Subscription": [
					{"Endpoint": {"Fn::GetAtt": ["AlertingLambda","Arn"]},"Protocol": "lambda"}
				],
				"TopicName":"AZD-ALERTS-KMS-KMSLambdaTrigger"
			},
			"DependsOn": [
				"AlertingLambda"
			],
			"Metadata": {
				"Comment": "Create an SNS Topic to Publish Service Limit Alerts to cloudopsteam"
			}
		},
		"SecurityGroupsAlertingSNSTopicTrigger": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"DisplayName": "SecurityGroupsTriggerAlertingLambdaSNS",
				"Subscription": [
					{"Endpoint": {"Fn::GetAtt": ["AlertingLambda","Arn"]},"Protocol": "lambda"}
				],
				"TopicName":"AZD-ALERTS-SECURITYGROUPS-SecurityGroupsLambdaTrigger"
			},
			"DependsOn": [
				"AlertingLambda"
			],
			"Metadata": {
				"Comment": "Create an SNS Topic to Publish Service Limit Alerts to cloudopsteam"
			}
		},
		"NotificationSNS": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"DisplayName": "IAMNotificationSNS",
				"Subscription": [{
					"Endpoint": {
						"Ref": "TopicEmail"
					},
					"Protocol": "email"
				}]
			},
			"Metadata": {
				"Comment": "Create an SNS Topic to Publish Service Limit Alerts to cloudopsteam"
			}
		},
		"NetworkAlertingMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "logGroup"
				},
				"FilterPattern": { "Ref":"filterPatternNetwork" },
				"MetricTransformations": [{
					"MetricValue": "1",
					"MetricNamespace": {
						"Ref": "metricNamespace"
					},
					"MetricName": {
						"Ref": "networkMetricName"
					}
				}]
			}
		},
		"SecurityAlertingMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "logGroup"
				},
				"FilterPattern": { "Ref":"filterPatternSecurity" },
				"MetricTransformations": [{
					"MetricValue": "1",
					"MetricNamespace": {
						"Ref": "metricNamespace"
					},
					"MetricName": {
						"Ref": "securityMetricName"
					}
				}]
			}
		},
		"IAMAlertingMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "logGroup"
				},
				"FilterPattern": { "Ref":"filterPatternIam" },
				"MetricTransformations": [{
					"MetricValue": "1",
					"MetricNamespace": {
						"Ref": "metricNamespace"
					},
					"MetricName": {
						"Ref": "IAMMetricName"
					}
				}]
			}
		},
		"KMSAlertingMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "logGroup"
				},
				"FilterPattern": { "Ref":"filterPatternKms" },
				"MetricTransformations": [{
					"MetricValue": "1",
					"MetricNamespace": {
						"Ref": "metricNamespace"
					},
					"MetricName": {
						"Ref": "KMSMetricName"
					}
				}]
			}
		},
		"SecurityGroupsAlertingMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "logGroup"
				},
				"FilterPattern": { "Ref":"filterPatternSecuritygroups" },
				"MetricTransformations": [{
					"MetricValue": "1",
					"MetricNamespace": {
						"Ref": "metricNamespace"
					},
					"MetricName": {
						"Ref": "SecurityGroupsMetricName"
					}
				}]
			}
		},
		"NetworkAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName" : "NetworkAlertingAlarm",
				"AlarmDescription": "Gets triggered if Metric is over threshold",
				"Namespace": {
					"Ref": "metricNamespace"
				},
				"MetricName": {
					"Ref": "networkMetricName"
				},
				"Statistic": "Sum",
				"Period": "900",
				"EvaluationPeriods": "1",
				"Threshold": {
					"Ref": "AlarmThreshold"
				},
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"AlarmActions": [{
					"Ref": "NetworkAlertingSNSTopicTrigger"
				}]
			}
		},
		
		"SecurityAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName" : "SecurityAlertingAlarm",
				"AlarmDescription": "Gets triggered if Metric is over threshold",
				"Namespace": {
					"Ref": "metricNamespace"
				},
				"MetricName": {
					"Ref": "securityMetricName"
				},
				"Statistic": "Sum",
				"Period": "900",
				"EvaluationPeriods": "1",
				"Threshold": {
					"Ref": "AlarmThreshold"
				},
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"AlarmActions": [{
					"Ref": "SecurityAlertingSNSTopicTrigger"
				}]
			}
		},
		"IAMAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName" : "IAMAlertingAlarm",
				"AlarmDescription": "Gets triggered if Metric is over threshold",
				"Namespace": {
					"Ref": "metricNamespace"
				},
				"MetricName": {
					"Ref": "IAMMetricName"
				},
				"Statistic": "Sum",
				"Period": "900",
				"EvaluationPeriods": "1",
				"Threshold": {
					"Ref": "AlarmThreshold"
				},
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"AlarmActions": [{
					"Ref": "IAMAlertingSNSTopicTrigger"
				}]
			}
		}, 
		"KMSAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName" : "KMSAlertingAlarm",
				"AlarmDescription": "Gets triggered if Metric is over threshold",
				"Namespace": {
					"Ref": "metricNamespace"
				},
				"MetricName": {
					"Ref": "KMSMetricName"
				},
				"Statistic": "Sum",
				"Period": "900",
				"EvaluationPeriods": "1",
				"Threshold": {
					"Ref": "AlarmThreshold"
				},
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"AlarmActions": [{
					"Ref": "KMSAlertingSNSTopicTrigger"
				}]
			}
		},
		"SecurityGroupsAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName" : "SecurityGroupsAlertingAlarm",
				"AlarmDescription": "Gets triggered if Metric is over threshold",
				"Namespace": {
					"Ref": "metricNamespace"
				},
				"MetricName": {
					"Ref": "SecurityGroupsMetricName"
				},
				"Statistic": "Sum",
				"Period": "900",
				"EvaluationPeriods": "1",
				"Threshold": {
					"Ref": "AlarmThreshold"
				},
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"AlarmActions": [{
					"Ref": "SecurityGroupsAlertingSNSTopicTrigger"
				}]
			}
		}
	},
	"Outputs": {}
}